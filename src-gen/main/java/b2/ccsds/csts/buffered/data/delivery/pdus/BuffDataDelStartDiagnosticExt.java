/**
 * This class file was automatically generated by jASN1 v1.11.3 (http://www.beanit.com)
 */

package b2.ccsds.csts.buffered.data.delivery.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import b2.ccsds.csts.common.operations.pdus.NotifyInvocation;
import b2.ccsds.csts.common.operations.pdus.TransferDataInvocation;
import b2.ccsds.csts.common.types.AdditionalText;
import b2.ccsds.csts.common.types.ConditionalTime;
import b2.ccsds.csts.common.types.Embedded;
import b2.ccsds.csts.common.types.Extended;
import b2.ccsds.csts.pdus.CstsFrameworkPdu;

public class BuffDataDelStartDiagnosticExt implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private AdditionalText missingTimeValue = null;
	private AdditionalText invalidStartGenerationTime = null;
	private AdditionalText invalidStopGenerationTime = null;
	private AdditionalText inconsistentTime = null;
	private Embedded buffDataDelStartDiagnosticExtExtension = null;
	
	public BuffDataDelStartDiagnosticExt() {
	}

	public BuffDataDelStartDiagnosticExt(byte[] code) {
		this.code = code;
	}

	public void setMissingTimeValue(AdditionalText missingTimeValue) {
		this.missingTimeValue = missingTimeValue;
	}

	public AdditionalText getMissingTimeValue() {
		return missingTimeValue;
	}

	public void setInvalidStartGenerationTime(AdditionalText invalidStartGenerationTime) {
		this.invalidStartGenerationTime = invalidStartGenerationTime;
	}

	public AdditionalText getInvalidStartGenerationTime() {
		return invalidStartGenerationTime;
	}

	public void setInvalidStopGenerationTime(AdditionalText invalidStopGenerationTime) {
		this.invalidStopGenerationTime = invalidStopGenerationTime;
	}

	public AdditionalText getInvalidStopGenerationTime() {
		return invalidStopGenerationTime;
	}

	public void setInconsistentTime(AdditionalText inconsistentTime) {
		this.inconsistentTime = inconsistentTime;
	}

	public AdditionalText getInconsistentTime() {
		return inconsistentTime;
	}

	public void setBuffDataDelStartDiagnosticExtExtension(Embedded buffDataDelStartDiagnosticExtExtension) {
		this.buffDataDelStartDiagnosticExtExtension = buffDataDelStartDiagnosticExtExtension;
	}

	public Embedded getBuffDataDelStartDiagnosticExtExtension() {
		return buffDataDelStartDiagnosticExtExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (buffDataDelStartDiagnosticExtExtension != null) {
			codeLength += buffDataDelStartDiagnosticExtExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
			reverseOS.write(0x64);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (inconsistentTime != null) {
			codeLength += inconsistentTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
			return codeLength;
		}
		
		if (invalidStopGenerationTime != null) {
			codeLength += invalidStopGenerationTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			reverseOS.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (invalidStartGenerationTime != null) {
			codeLength += invalidStartGenerationTime.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (missingTimeValue != null) {
			codeLength += missingTimeValue.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			missingTimeValue = new AdditionalText();
			codeLength += missingTimeValue.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			invalidStartGenerationTime = new AdditionalText();
			codeLength += invalidStartGenerationTime.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			invalidStopGenerationTime = new AdditionalText();
			codeLength += invalidStopGenerationTime.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			inconsistentTime = new AdditionalText();
			codeLength += inconsistentTime.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
			buffDataDelStartDiagnosticExtExtension = new Embedded();
			codeLength += buffDataDelStartDiagnosticExtExtension.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (missingTimeValue != null) {
			sb.append("missingTimeValue: ").append(missingTimeValue);
			return;
		}

		if (invalidStartGenerationTime != null) {
			sb.append("invalidStartGenerationTime: ").append(invalidStartGenerationTime);
			return;
		}

		if (invalidStopGenerationTime != null) {
			sb.append("invalidStopGenerationTime: ").append(invalidStopGenerationTime);
			return;
		}

		if (inconsistentTime != null) {
			sb.append("inconsistentTime: ").append(inconsistentTime);
			return;
		}

		if (buffDataDelStartDiagnosticExtExtension != null) {
			sb.append("buffDataDelStartDiagnosticExtExtension: ");
			buffDataDelStartDiagnosticExtExtension.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

