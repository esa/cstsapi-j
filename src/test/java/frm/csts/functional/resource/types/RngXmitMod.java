/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class RngXmitMod implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static class Enabled implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Calibrating implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			public static class TransponderRatio221To240 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio221To240() {
				}

				public TransponderRatio221To240(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio749To880 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio749To880() {
				}

				public TransponderRatio749To880(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio221To900 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio221To900() {
				}

				public TransponderRatio221To900(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio765To240 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio765To240() {
				}

				public TransponderRatio765To240(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio221To880 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio221To880() {
				}

				public TransponderRatio221To880(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio749To240 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio749To240() {
				}

				public TransponderRatio749To240(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio749To3344 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio749To3344() {
				}

				public TransponderRatio749To3344(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio3599To3344 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio3599To3344() {
				}

				public TransponderRatio3599To3344(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio3599To3360 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio3599To3360() {
				}

				public TransponderRatio3599To3360(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio749ToSet2652To2800 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio749ToSet2652To2800() {
				}

				public TransponderRatio749ToSet2652To2800(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio221To2772 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio221To2772() {
				}

				public TransponderRatio221To2772(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio221To2850 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio221To2850() {
				}

				public TransponderRatio221To2850(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static class TransponderRatio749ToSet836To864 implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger transponderRatioNumerator = null;
				private BerInteger transponderRatioDenominator = null;
				
				public TransponderRatio749ToSet836To864() {
				}

				public TransponderRatio749ToSet836To864(byte[] code) {
					this.code = code;
				}

				public void setTransponderRatioNumerator(BerInteger transponderRatioNumerator) {
					this.transponderRatioNumerator = transponderRatioNumerator;
				}

				public BerInteger getTransponderRatioNumerator() {
					return transponderRatioNumerator;
				}

				public void setTransponderRatioDenominator(BerInteger transponderRatioDenominator) {
					this.transponderRatioDenominator = transponderRatioDenominator;
				}

				public BerInteger getTransponderRatioDenominator() {
					return transponderRatioDenominator;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += transponderRatioDenominator.encode(reverseOS, true);
					
					codeLength += transponderRatioNumerator.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioNumerator = new BerInteger();
						subCodeLength += transponderRatioNumerator.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						transponderRatioDenominator = new BerInteger();
						subCodeLength += transponderRatioDenominator.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioNumerator != null) {
						sb.append("transponderRatioNumerator: ").append(transponderRatioNumerator);
					}
					else {
						sb.append("transponderRatioNumerator: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (transponderRatioDenominator != null) {
						sb.append("transponderRatioDenominator: ").append(transponderRatioDenominator);
					}
					else {
						sb.append("transponderRatioDenominator: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			private TransponderRatio221To240 transponderRatio221To240 = null;
			private TransponderRatio749To880 transponderRatio749To880 = null;
			private TransponderRatio221To900 transponderRatio221To900 = null;
			private TransponderRatio765To240 transponderRatio765To240 = null;
			private TransponderRatio221To880 transponderRatio221To880 = null;
			private TransponderRatio749To240 transponderRatio749To240 = null;
			private TransponderRatio749To3344 transponderRatio749To3344 = null;
			private TransponderRatio3599To3344 transponderRatio3599To3344 = null;
			private TransponderRatio3599To3360 transponderRatio3599To3360 = null;
			private TransponderRatio749ToSet2652To2800 transponderRatio749ToSet2652To2800 = null;
			private TransponderRatio221To2772 transponderRatio221To2772 = null;
			private TransponderRatio221To2850 transponderRatio221To2850 = null;
			private TransponderRatio749ToSet836To864 transponderRatio749ToSet836To864 = null;
			
			public Calibrating() {
			}

			public Calibrating(byte[] code) {
				this.code = code;
			}

			public void setTransponderRatio221To240(TransponderRatio221To240 transponderRatio221To240) {
				this.transponderRatio221To240 = transponderRatio221To240;
			}

			public TransponderRatio221To240 getTransponderRatio221To240() {
				return transponderRatio221To240;
			}

			public void setTransponderRatio749To880(TransponderRatio749To880 transponderRatio749To880) {
				this.transponderRatio749To880 = transponderRatio749To880;
			}

			public TransponderRatio749To880 getTransponderRatio749To880() {
				return transponderRatio749To880;
			}

			public void setTransponderRatio221To900(TransponderRatio221To900 transponderRatio221To900) {
				this.transponderRatio221To900 = transponderRatio221To900;
			}

			public TransponderRatio221To900 getTransponderRatio221To900() {
				return transponderRatio221To900;
			}

			public void setTransponderRatio765To240(TransponderRatio765To240 transponderRatio765To240) {
				this.transponderRatio765To240 = transponderRatio765To240;
			}

			public TransponderRatio765To240 getTransponderRatio765To240() {
				return transponderRatio765To240;
			}

			public void setTransponderRatio221To880(TransponderRatio221To880 transponderRatio221To880) {
				this.transponderRatio221To880 = transponderRatio221To880;
			}

			public TransponderRatio221To880 getTransponderRatio221To880() {
				return transponderRatio221To880;
			}

			public void setTransponderRatio749To240(TransponderRatio749To240 transponderRatio749To240) {
				this.transponderRatio749To240 = transponderRatio749To240;
			}

			public TransponderRatio749To240 getTransponderRatio749To240() {
				return transponderRatio749To240;
			}

			public void setTransponderRatio749To3344(TransponderRatio749To3344 transponderRatio749To3344) {
				this.transponderRatio749To3344 = transponderRatio749To3344;
			}

			public TransponderRatio749To3344 getTransponderRatio749To3344() {
				return transponderRatio749To3344;
			}

			public void setTransponderRatio3599To3344(TransponderRatio3599To3344 transponderRatio3599To3344) {
				this.transponderRatio3599To3344 = transponderRatio3599To3344;
			}

			public TransponderRatio3599To3344 getTransponderRatio3599To3344() {
				return transponderRatio3599To3344;
			}

			public void setTransponderRatio3599To3360(TransponderRatio3599To3360 transponderRatio3599To3360) {
				this.transponderRatio3599To3360 = transponderRatio3599To3360;
			}

			public TransponderRatio3599To3360 getTransponderRatio3599To3360() {
				return transponderRatio3599To3360;
			}

			public void setTransponderRatio749ToSet2652To2800(TransponderRatio749ToSet2652To2800 transponderRatio749ToSet2652To2800) {
				this.transponderRatio749ToSet2652To2800 = transponderRatio749ToSet2652To2800;
			}

			public TransponderRatio749ToSet2652To2800 getTransponderRatio749ToSet2652To2800() {
				return transponderRatio749ToSet2652To2800;
			}

			public void setTransponderRatio221To2772(TransponderRatio221To2772 transponderRatio221To2772) {
				this.transponderRatio221To2772 = transponderRatio221To2772;
			}

			public TransponderRatio221To2772 getTransponderRatio221To2772() {
				return transponderRatio221To2772;
			}

			public void setTransponderRatio221To2850(TransponderRatio221To2850 transponderRatio221To2850) {
				this.transponderRatio221To2850 = transponderRatio221To2850;
			}

			public TransponderRatio221To2850 getTransponderRatio221To2850() {
				return transponderRatio221To2850;
			}

			public void setTransponderRatio749ToSet836To864(TransponderRatio749ToSet836To864 transponderRatio749ToSet836To864) {
				this.transponderRatio749ToSet836To864 = transponderRatio749ToSet836To864;
			}

			public TransponderRatio749ToSet836To864 getTransponderRatio749ToSet836To864() {
				return transponderRatio749ToSet836To864;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (transponderRatio749ToSet836To864 != null) {
					codeLength += transponderRatio749ToSet836To864.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
					reverseOS.write(0xAC);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio221To2850 != null) {
					codeLength += transponderRatio221To2850.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
					reverseOS.write(0xAB);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio221To2772 != null) {
					codeLength += transponderRatio221To2772.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
					reverseOS.write(0xAA);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio749ToSet2652To2800 != null) {
					codeLength += transponderRatio749ToSet2652To2800.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
					reverseOS.write(0xA9);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio3599To3360 != null) {
					codeLength += transponderRatio3599To3360.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
					reverseOS.write(0xA8);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio3599To3344 != null) {
					codeLength += transponderRatio3599To3344.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
					reverseOS.write(0xA7);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio749To3344 != null) {
					codeLength += transponderRatio749To3344.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
					reverseOS.write(0xA6);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio749To240 != null) {
					codeLength += transponderRatio749To240.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
					reverseOS.write(0xA5);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio221To880 != null) {
					codeLength += transponderRatio221To880.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
					reverseOS.write(0xA4);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio765To240 != null) {
					codeLength += transponderRatio765To240.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
					reverseOS.write(0xA3);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio221To900 != null) {
					codeLength += transponderRatio221To900.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
					reverseOS.write(0xA2);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio749To880 != null) {
					codeLength += transponderRatio749To880.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
					return codeLength;
				}
				
				if (transponderRatio221To240 != null) {
					codeLength += transponderRatio221To240.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
					reverseOS.write(0xA0);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
					transponderRatio221To240 = new TransponderRatio221To240();
					codeLength += transponderRatio221To240.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					transponderRatio749To880 = new TransponderRatio749To880();
					codeLength += transponderRatio749To880.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
					transponderRatio221To900 = new TransponderRatio221To900();
					codeLength += transponderRatio221To900.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
					transponderRatio765To240 = new TransponderRatio765To240();
					codeLength += transponderRatio765To240.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
					transponderRatio221To880 = new TransponderRatio221To880();
					codeLength += transponderRatio221To880.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
					transponderRatio749To240 = new TransponderRatio749To240();
					codeLength += transponderRatio749To240.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
					transponderRatio749To3344 = new TransponderRatio749To3344();
					codeLength += transponderRatio749To3344.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
					transponderRatio3599To3344 = new TransponderRatio3599To3344();
					codeLength += transponderRatio3599To3344.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
					transponderRatio3599To3360 = new TransponderRatio3599To3360();
					codeLength += transponderRatio3599To3360.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
					transponderRatio749ToSet2652To2800 = new TransponderRatio749ToSet2652To2800();
					codeLength += transponderRatio749ToSet2652To2800.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
					transponderRatio221To2772 = new TransponderRatio221To2772();
					codeLength += transponderRatio221To2772.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
					transponderRatio221To2850 = new TransponderRatio221To2850();
					codeLength += transponderRatio221To2850.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
					transponderRatio749ToSet836To864 = new TransponderRatio749ToSet836To864();
					codeLength += transponderRatio749ToSet836To864.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (transponderRatio221To240 != null) {
					sb.append("transponderRatio221To240: ");
					transponderRatio221To240.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio749To880 != null) {
					sb.append("transponderRatio749To880: ");
					transponderRatio749To880.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio221To900 != null) {
					sb.append("transponderRatio221To900: ");
					transponderRatio221To900.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio765To240 != null) {
					sb.append("transponderRatio765To240: ");
					transponderRatio765To240.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio221To880 != null) {
					sb.append("transponderRatio221To880: ");
					transponderRatio221To880.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio749To240 != null) {
					sb.append("transponderRatio749To240: ");
					transponderRatio749To240.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio749To3344 != null) {
					sb.append("transponderRatio749To3344: ");
					transponderRatio749To3344.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio3599To3344 != null) {
					sb.append("transponderRatio3599To3344: ");
					transponderRatio3599To3344.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio3599To3360 != null) {
					sb.append("transponderRatio3599To3360: ");
					transponderRatio3599To3360.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio749ToSet2652To2800 != null) {
					sb.append("transponderRatio749ToSet2652To2800: ");
					transponderRatio749ToSet2652To2800.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio221To2772 != null) {
					sb.append("transponderRatio221To2772: ");
					transponderRatio221To2772.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio221To2850 != null) {
					sb.append("transponderRatio221To2850: ");
					transponderRatio221To2850.appendAsString(sb, indentLevel + 1);
					return;
				}

				if (transponderRatio749ToSet836To864 != null) {
					sb.append("transponderRatio749ToSet836To864: ");
					transponderRatio749ToSet836To864.appendAsString(sb, indentLevel + 1);
					return;
				}

				sb.append("<none>");
			}

		}

		private BerNull tracking = null;
		private Calibrating calibrating = null;
		
		public Enabled() {
		}

		public Enabled(byte[] code) {
			this.code = code;
		}

		public void setTracking(BerNull tracking) {
			this.tracking = tracking;
		}

		public BerNull getTracking() {
			return tracking;
		}

		public void setCalibrating(Calibrating calibrating) {
			this.calibrating = calibrating;
		}

		public Calibrating getCalibrating() {
			return calibrating;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			int sublength;

			if (calibrating != null) {
				sublength = calibrating.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (tracking != null) {
				codeLength += tracking.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				tracking = new BerNull();
				codeLength += tracking.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				codeLength += BerLength.skip(is);
				calibrating = new Calibrating();
				codeLength += calibrating.decode(is, null);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (tracking != null) {
				sb.append("tracking: ").append(tracking);
				return;
			}

			if (calibrating != null) {
				sb.append("calibrating: ");
				calibrating.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	private BerNull disabled = null;
	private Enabled enabled = null;
	
	public RngXmitMod() {
	}

	public RngXmitMod(byte[] code) {
		this.code = code;
	}

	public void setDisabled(BerNull disabled) {
		this.disabled = disabled;
	}

	public BerNull getDisabled() {
		return disabled;
	}

	public void setEnabled(Enabled enabled) {
		this.enabled = enabled;
	}

	public Enabled getEnabled() {
		return enabled;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (enabled != null) {
			sublength = enabled.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (disabled != null) {
			codeLength += disabled.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			disabled = new BerNull();
			codeLength += disabled.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			codeLength += BerLength.skip(is);
			enabled = new Enabled();
			codeLength += enabled.decode(is, null);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (disabled != null) {
			sb.append("disabled: ").append(disabled);
			return;
		}

		if (enabled != null) {
			sb.append("enabled: ");
			enabled.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

