/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class RngXmitRngType implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class RngType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class ToneCode implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class CodeComponentAndToneXmitDuration implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static class ToneOnly implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					public static class AmbiguityResolutionFailure implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerNull pauseRngXmit = null;
						private BerNull restartCodeSequence = null;
						
						public AmbiguityResolutionFailure() {
						}

						public AmbiguityResolutionFailure(byte[] code) {
							this.code = code;
						}

						public void setPauseRngXmit(BerNull pauseRngXmit) {
							this.pauseRngXmit = pauseRngXmit;
						}

						public BerNull getPauseRngXmit() {
							return pauseRngXmit;
						}

						public void setRestartCodeSequence(BerNull restartCodeSequence) {
							this.restartCodeSequence = restartCodeSequence;
						}

						public BerNull getRestartCodeSequence() {
							return restartCodeSequence;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (restartCodeSequence != null) {
								codeLength += restartCodeSequence.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (pauseRngXmit != null) {
								codeLength += pauseRngXmit.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								pauseRngXmit = new BerNull();
								codeLength += pauseRngXmit.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								restartCodeSequence = new BerNull();
								codeLength += restartCodeSequence.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (pauseRngXmit != null) {
								sb.append("pauseRngXmit: ").append(pauseRngXmit);
								return;
							}

							if (restartCodeSequence != null) {
								sb.append("restartCodeSequence: ").append(restartCodeSequence);
								return;
							}

							sb.append("<none>");
						}

					}

					private BerInteger maxToneOnlyDuratiom = null;
					private BerNull unlimitedToneOnlyDuration = null;
					private AmbiguityResolutionFailure ambiguityResolutionFailure = null;
					
					public ToneOnly() {
					}

					public ToneOnly(byte[] code) {
						this.code = code;
					}

					public void setMaxToneOnlyDuratiom(BerInteger maxToneOnlyDuratiom) {
						this.maxToneOnlyDuratiom = maxToneOnlyDuratiom;
					}

					public BerInteger getMaxToneOnlyDuratiom() {
						return maxToneOnlyDuratiom;
					}

					public void setUnlimitedToneOnlyDuration(BerNull unlimitedToneOnlyDuration) {
						this.unlimitedToneOnlyDuration = unlimitedToneOnlyDuration;
					}

					public BerNull getUnlimitedToneOnlyDuration() {
						return unlimitedToneOnlyDuration;
					}

					public void setAmbiguityResolutionFailure(AmbiguityResolutionFailure ambiguityResolutionFailure) {
						this.ambiguityResolutionFailure = ambiguityResolutionFailure;
					}

					public AmbiguityResolutionFailure getAmbiguityResolutionFailure() {
						return ambiguityResolutionFailure;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						int sublength;

						if (ambiguityResolutionFailure != null) {
							sublength = ambiguityResolutionFailure.encode(reverseOS);
							codeLength += sublength;
							codeLength += BerLength.encodeLength(reverseOS, sublength);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
							reverseOS.write(0xA2);
							codeLength += 1;
							return codeLength;
						}
						
						if (unlimitedToneOnlyDuration != null) {
							codeLength += unlimitedToneOnlyDuration.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 1
							reverseOS.write(0x81);
							codeLength += 1;
							return codeLength;
						}
						
						if (maxToneOnlyDuratiom != null) {
							codeLength += maxToneOnlyDuratiom.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							maxToneOnlyDuratiom = new BerInteger();
							codeLength += maxToneOnlyDuratiom.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							unlimitedToneOnlyDuration = new BerNull();
							codeLength += unlimitedToneOnlyDuration.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
							codeLength += BerLength.skip(is);
							ambiguityResolutionFailure = new AmbiguityResolutionFailure();
							codeLength += ambiguityResolutionFailure.decode(is, null);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (maxToneOnlyDuratiom != null) {
							sb.append("maxToneOnlyDuratiom: ").append(maxToneOnlyDuratiom);
							return;
						}

						if (unlimitedToneOnlyDuration != null) {
							sb.append("unlimitedToneOnlyDuration: ").append(unlimitedToneOnlyDuration);
							return;
						}

						if (ambiguityResolutionFailure != null) {
							sb.append("ambiguityResolutionFailure: ");
							ambiguityResolutionFailure.appendAsString(sb, indentLevel + 1);
							return;
						}

						sb.append("<none>");
					}

				}

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger codeComponent = null;
				private ToneOnly toneOnly = null;
				
				public CodeComponentAndToneXmitDuration() {
				}

				public CodeComponentAndToneXmitDuration(byte[] code) {
					this.code = code;
				}

				public void setCodeComponent(BerInteger codeComponent) {
					this.codeComponent = codeComponent;
				}

				public BerInteger getCodeComponent() {
					return codeComponent;
				}

				public void setToneOnly(ToneOnly toneOnly) {
					this.toneOnly = toneOnly;
				}

				public ToneOnly getToneOnly() {
					return toneOnly;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += toneOnly.encode(reverseOS);
					
					codeLength += codeComponent.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						codeComponent = new BerInteger();
						subCodeLength += codeComponent.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					toneOnly = new ToneOnly();
					subCodeLength += toneOnly.decode(is, berTag);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (codeComponent != null) {
						sb.append("codeComponent: ").append(codeComponent);
					}
					else {
						sb.append("codeComponent: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (toneOnly != null) {
						sb.append("toneOnly: ");
						toneOnly.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("toneOnly: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger toneFreq = null;
			private BerInteger rngCodeLength = null;
			private CodeComponentAndToneXmitDuration codeComponentAndToneXmitDuration = null;
			
			public ToneCode() {
			}

			public ToneCode(byte[] code) {
				this.code = code;
			}

			public void setToneFreq(BerInteger toneFreq) {
				this.toneFreq = toneFreq;
			}

			public BerInteger getToneFreq() {
				return toneFreq;
			}

			public void setRngCodeLength(BerInteger rngCodeLength) {
				this.rngCodeLength = rngCodeLength;
			}

			public BerInteger getRngCodeLength() {
				return rngCodeLength;
			}

			public void setCodeComponentAndToneXmitDuration(CodeComponentAndToneXmitDuration codeComponentAndToneXmitDuration) {
				this.codeComponentAndToneXmitDuration = codeComponentAndToneXmitDuration;
			}

			public CodeComponentAndToneXmitDuration getCodeComponentAndToneXmitDuration() {
				return codeComponentAndToneXmitDuration;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += codeComponentAndToneXmitDuration.encode(reverseOS, true);
				
				codeLength += rngCodeLength.encode(reverseOS, true);
				
				codeLength += toneFreq.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					toneFreq = new BerInteger();
					subCodeLength += toneFreq.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerInteger.tag)) {
					rngCodeLength = new BerInteger();
					subCodeLength += rngCodeLength.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(CodeComponentAndToneXmitDuration.tag)) {
					codeComponentAndToneXmitDuration = new CodeComponentAndToneXmitDuration();
					subCodeLength += codeComponentAndToneXmitDuration.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (toneFreq != null) {
					sb.append("toneFreq: ").append(toneFreq);
				}
				else {
					sb.append("toneFreq: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rngCodeLength != null) {
					sb.append("rngCodeLength: ").append(rngCodeLength);
				}
				else {
					sb.append("rngCodeLength: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeComponentAndToneXmitDuration != null) {
					sb.append("codeComponentAndToneXmitDuration: ");
					codeComponentAndToneXmitDuration.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("codeComponentAndToneXmitDuration: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class PseudoNoise implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class ChipRate implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class Ccsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					public static class Iis2 implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

						public byte[] code = null;
						private BerInteger i = null;
						private BerInteger k = null;
						
						public Iis2() {
						}

						public Iis2(byte[] code) {
							this.code = code;
						}

						public void setI(BerInteger i) {
							this.i = i;
						}

						public BerInteger getI() {
							return i;
						}

						public void setK(BerInteger k) {
							this.k = k;
						}

						public BerInteger getK() {
							return k;
						}

						public int encode(OutputStream reverseOS) throws IOException {
							return encode(reverseOS, true);
						}

						public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								if (withTag) {
									return tag.encode(reverseOS) + code.length;
								}
								return code.length;
							}

							int codeLength = 0;
							codeLength += k.encode(reverseOS, true);
							
							codeLength += i.encode(reverseOS, true);
							
							codeLength += BerLength.encodeLength(reverseOS, codeLength);

							if (withTag) {
								codeLength += tag.encode(reverseOS);
							}

							return codeLength;

						}

						public int decode(InputStream is) throws IOException {
							return decode(is, true);
						}

						public int decode(InputStream is, boolean withTag) throws IOException {
							int codeLength = 0;
							int subCodeLength = 0;
							BerTag berTag = new BerTag();

							if (withTag) {
								codeLength += tag.decodeAndCheck(is);
							}

							BerLength length = new BerLength();
							codeLength += length.decode(is);

							int totalLength = length.val;
							codeLength += totalLength;

							subCodeLength += berTag.decode(is);
							if (berTag.equals(BerInteger.tag)) {
								i = new BerInteger();
								subCodeLength += i.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerInteger.tag)) {
								k = new BerInteger();
								subCodeLength += k.decode(is, false);
								if (subCodeLength == totalLength) {
									return codeLength;
								}
							}
							throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

							
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS, false);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							sb.append("{");
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (i != null) {
								sb.append("i: ").append(i);
							}
							else {
								sb.append("i: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (k != null) {
								sb.append("k: ").append(k);
							}
							else {
								sb.append("k: <empty-required-field>");
							}
							
							sb.append("\n");
							for (int i = 0; i < indentLevel; i++) {
								sb.append("\t");
							}
							sb.append("}");
						}

					}

					public static class Kis6 implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

						public byte[] code = null;
						private BerInteger i = null;
						private BerInteger k = null;
						
						public Kis6() {
						}

						public Kis6(byte[] code) {
							this.code = code;
						}

						public void setI(BerInteger i) {
							this.i = i;
						}

						public BerInteger getI() {
							return i;
						}

						public void setK(BerInteger k) {
							this.k = k;
						}

						public BerInteger getK() {
							return k;
						}

						public int encode(OutputStream reverseOS) throws IOException {
							return encode(reverseOS, true);
						}

						public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								if (withTag) {
									return tag.encode(reverseOS) + code.length;
								}
								return code.length;
							}

							int codeLength = 0;
							codeLength += k.encode(reverseOS, true);
							
							codeLength += i.encode(reverseOS, true);
							
							codeLength += BerLength.encodeLength(reverseOS, codeLength);

							if (withTag) {
								codeLength += tag.encode(reverseOS);
							}

							return codeLength;

						}

						public int decode(InputStream is) throws IOException {
							return decode(is, true);
						}

						public int decode(InputStream is, boolean withTag) throws IOException {
							int codeLength = 0;
							int subCodeLength = 0;
							BerTag berTag = new BerTag();

							if (withTag) {
								codeLength += tag.decodeAndCheck(is);
							}

							BerLength length = new BerLength();
							codeLength += length.decode(is);

							int totalLength = length.val;
							codeLength += totalLength;

							subCodeLength += berTag.decode(is);
							if (berTag.equals(BerInteger.tag)) {
								i = new BerInteger();
								subCodeLength += i.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerInteger.tag)) {
								k = new BerInteger();
								subCodeLength += k.decode(is, false);
								if (subCodeLength == totalLength) {
									return codeLength;
								}
							}
							throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

							
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS, false);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							sb.append("{");
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (i != null) {
								sb.append("i: ").append(i);
							}
							else {
								sb.append("i: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (k != null) {
								sb.append("k: ").append(k);
							}
							else {
								sb.append("k: <empty-required-field>");
							}
							
							sb.append("\n");
							for (int i = 0; i < indentLevel; i++) {
								sb.append("\t");
							}
							sb.append("}");
						}

					}

					private Iis2 iis2 = null;
					private Kis6 kis6 = null;
					
					public Ccsds() {
					}

					public Ccsds(byte[] code) {
						this.code = code;
					}

					public void setIis2(Iis2 iis2) {
						this.iis2 = iis2;
					}

					public Iis2 getIis2() {
						return iis2;
					}

					public void setKis6(Kis6 kis6) {
						this.kis6 = kis6;
					}

					public Kis6 getKis6() {
						return kis6;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						if (kis6 != null) {
							codeLength += kis6.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
							reverseOS.write(0xA1);
							codeLength += 1;
							return codeLength;
						}
						
						if (iis2 != null) {
							codeLength += iis2.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
							reverseOS.write(0xA0);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
							iis2 = new Iis2();
							codeLength += iis2.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
							kis6 = new Kis6();
							codeLength += kis6.decode(is, false);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (iis2 != null) {
							sb.append("iis2: ");
							iis2.appendAsString(sb, indentLevel + 1);
							return;
						}

						if (kis6 != null) {
							sb.append("kis6: ");
							kis6.appendAsString(sb, indentLevel + 1);
							return;
						}

						sb.append("<none>");
					}

				}

				private Ccsds ccsds = null;
				private BerInteger nonCcsds = null;
				
				public ChipRate() {
				}

				public ChipRate(byte[] code) {
					this.code = code;
				}

				public void setCcsds(Ccsds ccsds) {
					this.ccsds = ccsds;
				}

				public Ccsds getCcsds() {
					return ccsds;
				}

				public void setNonCcsds(BerInteger nonCcsds) {
					this.nonCcsds = nonCcsds;
				}

				public BerInteger getNonCcsds() {
					return nonCcsds;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					int sublength;

					if (nonCcsds != null) {
						codeLength += nonCcsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsds != null) {
						sublength = ccsds.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						codeLength += BerLength.skip(is);
						ccsds = new Ccsds();
						codeLength += ccsds.decode(is, null);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						nonCcsds = new BerInteger();
						codeLength += nonCcsds.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsds != null) {
						sb.append("ccsds: ");
						ccsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (nonCcsds != null) {
						sb.append("nonCcsds: ").append(nonCcsds);
						return;
					}

					sb.append("<none>");
				}

			}

			public static class ModulationSense implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private BerNull ccsds = null;
				private BerNull nonCcsds = null;
				
				public ModulationSense() {
				}

				public ModulationSense(byte[] code) {
					this.code = code;
				}

				public void setCcsds(BerNull ccsds) {
					this.ccsds = ccsds;
				}

				public BerNull getCcsds() {
					return ccsds;
				}

				public void setNonCcsds(BerNull nonCcsds) {
					this.nonCcsds = nonCcsds;
				}

				public BerNull getNonCcsds() {
					return nonCcsds;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsds != null) {
						codeLength += nonCcsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsds != null) {
						codeLength += ccsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						ccsds = new BerNull();
						codeLength += ccsds.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						nonCcsds = new BerNull();
						codeLength += nonCcsds.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsds != null) {
						sb.append("ccsds: ").append(ccsds);
						return;
					}

					if (nonCcsds != null) {
						sb.append("nonCcsds: ").append(nonCcsds);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private ChipRate chipRate = null;
			private BerEnum codeType = null;
			private ModulationSense modulationSense = null;
			
			public PseudoNoise() {
			}

			public PseudoNoise(byte[] code) {
				this.code = code;
			}

			public void setChipRate(ChipRate chipRate) {
				this.chipRate = chipRate;
			}

			public ChipRate getChipRate() {
				return chipRate;
			}

			public void setCodeType(BerEnum codeType) {
				this.codeType = codeType;
			}

			public BerEnum getCodeType() {
				return codeType;
			}

			public void setModulationSense(ModulationSense modulationSense) {
				this.modulationSense = modulationSense;
			}

			public ModulationSense getModulationSense() {
				return modulationSense;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += modulationSense.encode(reverseOS);
				
				codeLength += codeType.encode(reverseOS, true);
				
				codeLength += chipRate.encode(reverseOS);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				chipRate = new ChipRate();
				subCodeLength += chipRate.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(BerEnum.tag)) {
					codeType = new BerEnum();
					subCodeLength += codeType.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				modulationSense = new ModulationSense();
				subCodeLength += modulationSense.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (chipRate != null) {
					sb.append("chipRate: ");
					chipRate.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("chipRate: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeType != null) {
					sb.append("codeType: ").append(codeType);
				}
				else {
					sb.append("codeType: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (modulationSense != null) {
					sb.append("modulationSense: ");
					modulationSense.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("modulationSense: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private ToneCode toneCode = null;
		private PseudoNoise pseudoNoise = null;
		
		public RngType() {
		}

		public RngType(byte[] code) {
			this.code = code;
		}

		public void setToneCode(ToneCode toneCode) {
			this.toneCode = toneCode;
		}

		public ToneCode getToneCode() {
			return toneCode;
		}

		public void setPseudoNoise(PseudoNoise pseudoNoise) {
			this.pseudoNoise = pseudoNoise;
		}

		public PseudoNoise getPseudoNoise() {
			return pseudoNoise;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (pseudoNoise != null) {
				codeLength += pseudoNoise.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (toneCode != null) {
				codeLength += toneCode.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				toneCode = new ToneCode();
				codeLength += toneCode.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				pseudoNoise = new PseudoNoise();
				codeLength += pseudoNoise.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (toneCode != null) {
				sb.append("toneCode: ");
				toneCode.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (pseudoNoise != null) {
				sb.append("pseudoNoise: ");
				pseudoNoise.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum dopplerCompensation = null;
	private RngType rngType = null;
	
	public RngXmitRngType() {
	}

	public RngXmitRngType(byte[] code) {
		this.code = code;
	}

	public void setDopplerCompensation(BerEnum dopplerCompensation) {
		this.dopplerCompensation = dopplerCompensation;
	}

	public BerEnum getDopplerCompensation() {
		return dopplerCompensation;
	}

	public void setRngType(RngType rngType) {
		this.rngType = rngType;
	}

	public RngType getRngType() {
		return rngType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += rngType.encode(reverseOS);
		
		codeLength += dopplerCompensation.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerEnum.tag)) {
			dopplerCompensation = new BerEnum();
			subCodeLength += dopplerCompensation.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		rngType = new RngType();
		subCodeLength += rngType.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dopplerCompensation != null) {
			sb.append("dopplerCompensation: ").append(dopplerCompensation);
		}
		else {
			sb.append("dopplerCompensation: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rngType != null) {
			sb.append("rngType: ");
			rngType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("rngType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

