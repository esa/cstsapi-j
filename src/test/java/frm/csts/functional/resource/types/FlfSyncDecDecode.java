/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class FlfSyncDecDecode implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SymbolDecode implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class ReedSolomon implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum rsCorrectionCapabilty = null;
			private RsInterleavingDepth rsInterleavingDepth = null;
			
			public ReedSolomon() {
			}

			public ReedSolomon(byte[] code) {
				this.code = code;
			}

			public void setRsCorrectionCapabilty(BerEnum rsCorrectionCapabilty) {
				this.rsCorrectionCapabilty = rsCorrectionCapabilty;
			}

			public BerEnum getRsCorrectionCapabilty() {
				return rsCorrectionCapabilty;
			}

			public void setRsInterleavingDepth(RsInterleavingDepth rsInterleavingDepth) {
				this.rsInterleavingDepth = rsInterleavingDepth;
			}

			public RsInterleavingDepth getRsInterleavingDepth() {
				return rsInterleavingDepth;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += rsInterleavingDepth.encode(reverseOS, true);
				
				codeLength += rsCorrectionCapabilty.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerEnum.tag)) {
					rsCorrectionCapabilty = new BerEnum();
					subCodeLength += rsCorrectionCapabilty.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(RsInterleavingDepth.tag)) {
					rsInterleavingDepth = new RsInterleavingDepth();
					subCodeLength += rsInterleavingDepth.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rsCorrectionCapabilty != null) {
					sb.append("rsCorrectionCapabilty: ").append(rsCorrectionCapabilty);
				}
				else {
					sb.append("rsCorrectionCapabilty: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rsInterleavingDepth != null) {
					sb.append("rsInterleavingDepth: ").append(rsInterleavingDepth);
				}
				else {
					sb.append("rsInterleavingDepth: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Concatenated implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class Convolutional implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static class GeneratorPolynomials implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					public static class NonCcsds implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

						public byte[] code = null;
						private BerBitString g1ConnectionVector = null;
						private BerBitString g2ConnectionVector = null;
						private BerEnum polynomialSequence = null;
						private BerEnum polynomialInversion = null;
						
						public NonCcsds() {
						}

						public NonCcsds(byte[] code) {
							this.code = code;
						}

						public void setG1ConnectionVector(BerBitString g1ConnectionVector) {
							this.g1ConnectionVector = g1ConnectionVector;
						}

						public BerBitString getG1ConnectionVector() {
							return g1ConnectionVector;
						}

						public void setG2ConnectionVector(BerBitString g2ConnectionVector) {
							this.g2ConnectionVector = g2ConnectionVector;
						}

						public BerBitString getG2ConnectionVector() {
							return g2ConnectionVector;
						}

						public void setPolynomialSequence(BerEnum polynomialSequence) {
							this.polynomialSequence = polynomialSequence;
						}

						public BerEnum getPolynomialSequence() {
							return polynomialSequence;
						}

						public void setPolynomialInversion(BerEnum polynomialInversion) {
							this.polynomialInversion = polynomialInversion;
						}

						public BerEnum getPolynomialInversion() {
							return polynomialInversion;
						}

						public int encode(OutputStream reverseOS) throws IOException {
							return encode(reverseOS, true);
						}

						public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								if (withTag) {
									return tag.encode(reverseOS) + code.length;
								}
								return code.length;
							}

							int codeLength = 0;
							codeLength += polynomialInversion.encode(reverseOS, true);
							
							codeLength += polynomialSequence.encode(reverseOS, true);
							
							codeLength += g2ConnectionVector.encode(reverseOS, true);
							
							codeLength += g1ConnectionVector.encode(reverseOS, true);
							
							codeLength += BerLength.encodeLength(reverseOS, codeLength);

							if (withTag) {
								codeLength += tag.encode(reverseOS);
							}

							return codeLength;

						}

						public int decode(InputStream is) throws IOException {
							return decode(is, true);
						}

						public int decode(InputStream is, boolean withTag) throws IOException {
							int codeLength = 0;
							int subCodeLength = 0;
							BerTag berTag = new BerTag();

							if (withTag) {
								codeLength += tag.decodeAndCheck(is);
							}

							BerLength length = new BerLength();
							codeLength += length.decode(is);

							int totalLength = length.val;
							codeLength += totalLength;

							subCodeLength += berTag.decode(is);
							if (berTag.equals(BerBitString.tag)) {
								g1ConnectionVector = new BerBitString();
								subCodeLength += g1ConnectionVector.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerBitString.tag)) {
								g2ConnectionVector = new BerBitString();
								subCodeLength += g2ConnectionVector.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerEnum.tag)) {
								polynomialSequence = new BerEnum();
								subCodeLength += polynomialSequence.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerEnum.tag)) {
								polynomialInversion = new BerEnum();
								subCodeLength += polynomialInversion.decode(is, false);
								if (subCodeLength == totalLength) {
									return codeLength;
								}
							}
							throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

							
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS, false);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							sb.append("{");
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (g1ConnectionVector != null) {
								sb.append("g1ConnectionVector: ").append(g1ConnectionVector);
							}
							else {
								sb.append("g1ConnectionVector: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (g2ConnectionVector != null) {
								sb.append("g2ConnectionVector: ").append(g2ConnectionVector);
							}
							else {
								sb.append("g2ConnectionVector: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (polynomialSequence != null) {
								sb.append("polynomialSequence: ").append(polynomialSequence);
							}
							else {
								sb.append("polynomialSequence: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (polynomialInversion != null) {
								sb.append("polynomialInversion: ").append(polynomialInversion);
							}
							else {
								sb.append("polynomialInversion: <empty-required-field>");
							}
							
							sb.append("\n");
							for (int i = 0; i < indentLevel; i++) {
								sb.append("\t");
							}
							sb.append("}");
						}

					}

					private BerNull ccsds = null;
					private NonCcsds nonCcsds = null;
					
					public GeneratorPolynomials() {
					}

					public GeneratorPolynomials(byte[] code) {
						this.code = code;
					}

					public void setCcsds(BerNull ccsds) {
						this.ccsds = ccsds;
					}

					public BerNull getCcsds() {
						return ccsds;
					}

					public void setNonCcsds(NonCcsds nonCcsds) {
						this.nonCcsds = nonCcsds;
					}

					public NonCcsds getNonCcsds() {
						return nonCcsds;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						if (nonCcsds != null) {
							codeLength += nonCcsds.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
							reverseOS.write(0xA1);
							codeLength += 1;
							return codeLength;
						}
						
						if (ccsds != null) {
							codeLength += ccsds.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							ccsds = new BerNull();
							codeLength += ccsds.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
							nonCcsds = new NonCcsds();
							codeLength += nonCcsds.decode(is, false);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (ccsds != null) {
							sb.append("ccsds: ").append(ccsds);
							return;
						}

						if (nonCcsds != null) {
							sb.append("nonCcsds: ");
							nonCcsds.appendAsString(sb, indentLevel + 1);
							return;
						}

						sb.append("<none>");
					}

				}

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private GeneratorPolynomials generatorPolynomials = null;
				private ConvolutionalCodeRate codeRate = null;
				
				public Convolutional() {
				}

				public Convolutional(byte[] code) {
					this.code = code;
				}

				public void setGeneratorPolynomials(GeneratorPolynomials generatorPolynomials) {
					this.generatorPolynomials = generatorPolynomials;
				}

				public GeneratorPolynomials getGeneratorPolynomials() {
					return generatorPolynomials;
				}

				public void setCodeRate(ConvolutionalCodeRate codeRate) {
					this.codeRate = codeRate;
				}

				public ConvolutionalCodeRate getCodeRate() {
					return codeRate;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += codeRate.encode(reverseOS, true);
					
					codeLength += generatorPolynomials.encode(reverseOS);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					generatorPolynomials = new GeneratorPolynomials();
					subCodeLength += generatorPolynomials.decode(is, berTag);
					subCodeLength += berTag.decode(is);
					
					if (berTag.equals(ConvolutionalCodeRate.tag)) {
						codeRate = new ConvolutionalCodeRate();
						subCodeLength += codeRate.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (generatorPolynomials != null) {
						sb.append("generatorPolynomials: ");
						generatorPolynomials.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("generatorPolynomials: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (codeRate != null) {
						sb.append("codeRate: ").append(codeRate);
					}
					else {
						sb.append("codeRate: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private Convolutional convolutional = null;
			private BerEnum rsCorrectionCapabilty = null;
			private RsInterleavingDepth rsInterleavingDepth = null;
			
			public Concatenated() {
			}

			public Concatenated(byte[] code) {
				this.code = code;
			}

			public void setConvolutional(Convolutional convolutional) {
				this.convolutional = convolutional;
			}

			public Convolutional getConvolutional() {
				return convolutional;
			}

			public void setRsCorrectionCapabilty(BerEnum rsCorrectionCapabilty) {
				this.rsCorrectionCapabilty = rsCorrectionCapabilty;
			}

			public BerEnum getRsCorrectionCapabilty() {
				return rsCorrectionCapabilty;
			}

			public void setRsInterleavingDepth(RsInterleavingDepth rsInterleavingDepth) {
				this.rsInterleavingDepth = rsInterleavingDepth;
			}

			public RsInterleavingDepth getRsInterleavingDepth() {
				return rsInterleavingDepth;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += rsInterleavingDepth.encode(reverseOS, true);
				
				codeLength += rsCorrectionCapabilty.encode(reverseOS, true);
				
				codeLength += convolutional.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(Convolutional.tag)) {
					convolutional = new Convolutional();
					subCodeLength += convolutional.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerEnum.tag)) {
					rsCorrectionCapabilty = new BerEnum();
					subCodeLength += rsCorrectionCapabilty.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(RsInterleavingDepth.tag)) {
					rsInterleavingDepth = new RsInterleavingDepth();
					subCodeLength += rsInterleavingDepth.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (convolutional != null) {
					sb.append("convolutional: ");
					convolutional.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("convolutional: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rsCorrectionCapabilty != null) {
					sb.append("rsCorrectionCapabilty: ").append(rsCorrectionCapabilty);
				}
				else {
					sb.append("rsCorrectionCapabilty: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rsInterleavingDepth != null) {
					sb.append("rsInterleavingDepth: ").append(rsInterleavingDepth);
				}
				else {
					sb.append("rsInterleavingDepth: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Turbo implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger maxNumberOfIterations = null;
			private BerEnum codeRate = null;
			
			public Turbo() {
			}

			public Turbo(byte[] code) {
				this.code = code;
			}

			public void setMaxNumberOfIterations(BerInteger maxNumberOfIterations) {
				this.maxNumberOfIterations = maxNumberOfIterations;
			}

			public BerInteger getMaxNumberOfIterations() {
				return maxNumberOfIterations;
			}

			public void setCodeRate(BerEnum codeRate) {
				this.codeRate = codeRate;
			}

			public BerEnum getCodeRate() {
				return codeRate;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += codeRate.encode(reverseOS, true);
				
				codeLength += maxNumberOfIterations.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					maxNumberOfIterations = new BerInteger();
					subCodeLength += maxNumberOfIterations.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerEnum.tag)) {
					codeRate = new BerEnum();
					subCodeLength += codeRate.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (maxNumberOfIterations != null) {
					sb.append("maxNumberOfIterations: ").append(maxNumberOfIterations);
				}
				else {
					sb.append("maxNumberOfIterations: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeRate != null) {
					sb.append("codeRate: ").append(codeRate);
				}
				else {
					sb.append("codeRate: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class SlicedLdpc implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class CodeRateAndSliceLength implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class CodeRate1Over2 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class CsmPattern implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerOctetString ccsds = null;
						private BerOctetString nonCCSDS = null;
						
						public CsmPattern() {
						}

						public CsmPattern(byte[] code) {
							this.code = code;
						}

						public void setCcsds(BerOctetString ccsds) {
							this.ccsds = ccsds;
						}

						public BerOctetString getCcsds() {
							return ccsds;
						}

						public void setNonCCSDS(BerOctetString nonCCSDS) {
							this.nonCCSDS = nonCCSDS;
						}

						public BerOctetString getNonCCSDS() {
							return nonCCSDS;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (nonCCSDS != null) {
								codeLength += nonCCSDS.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (ccsds != null) {
								codeLength += ccsds.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								ccsds = new BerOctetString();
								codeLength += ccsds.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								nonCCSDS = new BerOctetString();
								codeLength += nonCCSDS.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (ccsds != null) {
								sb.append("ccsds: ").append(ccsds);
								return;
							}

							if (nonCCSDS != null) {
								sb.append("nonCCSDS: ").append(nonCCSDS);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private LdpcCodeRate codeRate = null;
					private BerInteger sliceLength = null;
					private CsmPattern csmPattern = null;
					
					public CodeRate1Over2() {
					}

					public CodeRate1Over2(byte[] code) {
						this.code = code;
					}

					public void setCodeRate(LdpcCodeRate codeRate) {
						this.codeRate = codeRate;
					}

					public LdpcCodeRate getCodeRate() {
						return codeRate;
					}

					public void setSliceLength(BerInteger sliceLength) {
						this.sliceLength = sliceLength;
					}

					public BerInteger getSliceLength() {
						return sliceLength;
					}

					public void setCsmPattern(CsmPattern csmPattern) {
						this.csmPattern = csmPattern;
					}

					public CsmPattern getCsmPattern() {
						return csmPattern;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += csmPattern.encode(reverseOS);
						
						codeLength += sliceLength.encode(reverseOS, true);
						
						codeLength += codeRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(LdpcCodeRate.tag)) {
							codeRate = new LdpcCodeRate();
							subCodeLength += codeRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							sliceLength = new BerInteger();
							subCodeLength += sliceLength.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						csmPattern = new CsmPattern();
						subCodeLength += csmPattern.decode(is, berTag);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (codeRate != null) {
							sb.append("codeRate: ").append(codeRate);
						}
						else {
							sb.append("codeRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (sliceLength != null) {
							sb.append("sliceLength: ").append(sliceLength);
						}
						else {
							sb.append("sliceLength: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (csmPattern != null) {
							sb.append("csmPattern: ");
							csmPattern.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("csmPattern: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class CodeRate2Over3 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class CsmPattern implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerOctetString ccsds = null;
						private BerOctetString nonCCSDS = null;
						
						public CsmPattern() {
						}

						public CsmPattern(byte[] code) {
							this.code = code;
						}

						public void setCcsds(BerOctetString ccsds) {
							this.ccsds = ccsds;
						}

						public BerOctetString getCcsds() {
							return ccsds;
						}

						public void setNonCCSDS(BerOctetString nonCCSDS) {
							this.nonCCSDS = nonCCSDS;
						}

						public BerOctetString getNonCCSDS() {
							return nonCCSDS;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (nonCCSDS != null) {
								codeLength += nonCCSDS.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (ccsds != null) {
								codeLength += ccsds.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								ccsds = new BerOctetString();
								codeLength += ccsds.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								nonCCSDS = new BerOctetString();
								codeLength += nonCCSDS.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (ccsds != null) {
								sb.append("ccsds: ").append(ccsds);
								return;
							}

							if (nonCCSDS != null) {
								sb.append("nonCCSDS: ").append(nonCCSDS);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private LdpcCodeRate codeRate = null;
					private BerInteger sliceLength = null;
					private CsmPattern csmPattern = null;
					
					public CodeRate2Over3() {
					}

					public CodeRate2Over3(byte[] code) {
						this.code = code;
					}

					public void setCodeRate(LdpcCodeRate codeRate) {
						this.codeRate = codeRate;
					}

					public LdpcCodeRate getCodeRate() {
						return codeRate;
					}

					public void setSliceLength(BerInteger sliceLength) {
						this.sliceLength = sliceLength;
					}

					public BerInteger getSliceLength() {
						return sliceLength;
					}

					public void setCsmPattern(CsmPattern csmPattern) {
						this.csmPattern = csmPattern;
					}

					public CsmPattern getCsmPattern() {
						return csmPattern;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += csmPattern.encode(reverseOS);
						
						codeLength += sliceLength.encode(reverseOS, true);
						
						codeLength += codeRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(LdpcCodeRate.tag)) {
							codeRate = new LdpcCodeRate();
							subCodeLength += codeRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							sliceLength = new BerInteger();
							subCodeLength += sliceLength.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						csmPattern = new CsmPattern();
						subCodeLength += csmPattern.decode(is, berTag);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (codeRate != null) {
							sb.append("codeRate: ").append(codeRate);
						}
						else {
							sb.append("codeRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (sliceLength != null) {
							sb.append("sliceLength: ").append(sliceLength);
						}
						else {
							sb.append("sliceLength: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (csmPattern != null) {
							sb.append("csmPattern: ");
							csmPattern.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("csmPattern: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class CodeRate4Over5 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class CsmPattern implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerOctetString ccsds = null;
						private BerOctetString nonCCSDS = null;
						
						public CsmPattern() {
						}

						public CsmPattern(byte[] code) {
							this.code = code;
						}

						public void setCcsds(BerOctetString ccsds) {
							this.ccsds = ccsds;
						}

						public BerOctetString getCcsds() {
							return ccsds;
						}

						public void setNonCCSDS(BerOctetString nonCCSDS) {
							this.nonCCSDS = nonCCSDS;
						}

						public BerOctetString getNonCCSDS() {
							return nonCCSDS;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (nonCCSDS != null) {
								codeLength += nonCCSDS.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (ccsds != null) {
								codeLength += ccsds.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								ccsds = new BerOctetString();
								codeLength += ccsds.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								nonCCSDS = new BerOctetString();
								codeLength += nonCCSDS.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (ccsds != null) {
								sb.append("ccsds: ").append(ccsds);
								return;
							}

							if (nonCCSDS != null) {
								sb.append("nonCCSDS: ").append(nonCCSDS);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private LdpcCodeRate codeRate = null;
					private BerInteger sliceLength = null;
					private CsmPattern csmPattern = null;
					
					public CodeRate4Over5() {
					}

					public CodeRate4Over5(byte[] code) {
						this.code = code;
					}

					public void setCodeRate(LdpcCodeRate codeRate) {
						this.codeRate = codeRate;
					}

					public LdpcCodeRate getCodeRate() {
						return codeRate;
					}

					public void setSliceLength(BerInteger sliceLength) {
						this.sliceLength = sliceLength;
					}

					public BerInteger getSliceLength() {
						return sliceLength;
					}

					public void setCsmPattern(CsmPattern csmPattern) {
						this.csmPattern = csmPattern;
					}

					public CsmPattern getCsmPattern() {
						return csmPattern;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += csmPattern.encode(reverseOS);
						
						codeLength += sliceLength.encode(reverseOS, true);
						
						codeLength += codeRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(LdpcCodeRate.tag)) {
							codeRate = new LdpcCodeRate();
							subCodeLength += codeRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							sliceLength = new BerInteger();
							subCodeLength += sliceLength.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						csmPattern = new CsmPattern();
						subCodeLength += csmPattern.decode(is, berTag);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (codeRate != null) {
							sb.append("codeRate: ").append(codeRate);
						}
						else {
							sb.append("codeRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (sliceLength != null) {
							sb.append("sliceLength: ").append(sliceLength);
						}
						else {
							sb.append("sliceLength: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (csmPattern != null) {
							sb.append("csmPattern: ");
							csmPattern.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("csmPattern: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class CodeRate223Over255 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class CsmPattern implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerOctetString ccsds = null;
						private BerOctetString nonCCSDS = null;
						
						public CsmPattern() {
						}

						public CsmPattern(byte[] code) {
							this.code = code;
						}

						public void setCcsds(BerOctetString ccsds) {
							this.ccsds = ccsds;
						}

						public BerOctetString getCcsds() {
							return ccsds;
						}

						public void setNonCCSDS(BerOctetString nonCCSDS) {
							this.nonCCSDS = nonCCSDS;
						}

						public BerOctetString getNonCCSDS() {
							return nonCCSDS;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (nonCCSDS != null) {
								codeLength += nonCCSDS.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (ccsds != null) {
								codeLength += ccsds.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								ccsds = new BerOctetString();
								codeLength += ccsds.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								nonCCSDS = new BerOctetString();
								codeLength += nonCCSDS.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (ccsds != null) {
								sb.append("ccsds: ").append(ccsds);
								return;
							}

							if (nonCCSDS != null) {
								sb.append("nonCCSDS: ").append(nonCCSDS);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private LdpcCodeRate codeRate = null;
					private BerInteger sliceLength = null;
					private CsmPattern csmPattern = null;
					
					public CodeRate223Over255() {
					}

					public CodeRate223Over255(byte[] code) {
						this.code = code;
					}

					public void setCodeRate(LdpcCodeRate codeRate) {
						this.codeRate = codeRate;
					}

					public LdpcCodeRate getCodeRate() {
						return codeRate;
					}

					public void setSliceLength(BerInteger sliceLength) {
						this.sliceLength = sliceLength;
					}

					public BerInteger getSliceLength() {
						return sliceLength;
					}

					public void setCsmPattern(CsmPattern csmPattern) {
						this.csmPattern = csmPattern;
					}

					public CsmPattern getCsmPattern() {
						return csmPattern;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += csmPattern.encode(reverseOS);
						
						codeLength += sliceLength.encode(reverseOS, true);
						
						codeLength += codeRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(LdpcCodeRate.tag)) {
							codeRate = new LdpcCodeRate();
							subCodeLength += codeRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							sliceLength = new BerInteger();
							subCodeLength += sliceLength.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						csmPattern = new CsmPattern();
						subCodeLength += csmPattern.decode(is, berTag);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (codeRate != null) {
							sb.append("codeRate: ").append(codeRate);
						}
						else {
							sb.append("codeRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (sliceLength != null) {
							sb.append("sliceLength: ").append(sliceLength);
						}
						else {
							sb.append("sliceLength: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (csmPattern != null) {
							sb.append("csmPattern: ");
							csmPattern.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("csmPattern: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private CodeRate1Over2 codeRate1Over2 = null;
				private CodeRate2Over3 codeRate2Over3 = null;
				private CodeRate4Over5 codeRate4Over5 = null;
				private CodeRate223Over255 codeRate223Over255 = null;
				
				public CodeRateAndSliceLength() {
				}

				public CodeRateAndSliceLength(byte[] code) {
					this.code = code;
				}

				public void setCodeRate1Over2(CodeRate1Over2 codeRate1Over2) {
					this.codeRate1Over2 = codeRate1Over2;
				}

				public CodeRate1Over2 getCodeRate1Over2() {
					return codeRate1Over2;
				}

				public void setCodeRate2Over3(CodeRate2Over3 codeRate2Over3) {
					this.codeRate2Over3 = codeRate2Over3;
				}

				public CodeRate2Over3 getCodeRate2Over3() {
					return codeRate2Over3;
				}

				public void setCodeRate4Over5(CodeRate4Over5 codeRate4Over5) {
					this.codeRate4Over5 = codeRate4Over5;
				}

				public CodeRate4Over5 getCodeRate4Over5() {
					return codeRate4Over5;
				}

				public void setCodeRate223Over255(CodeRate223Over255 codeRate223Over255) {
					this.codeRate223Over255 = codeRate223Over255;
				}

				public CodeRate223Over255 getCodeRate223Over255() {
					return codeRate223Over255;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (codeRate223Over255 != null) {
						codeLength += codeRate223Over255.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
						reverseOS.write(0xA3);
						codeLength += 1;
						return codeLength;
					}
					
					if (codeRate4Over5 != null) {
						codeLength += codeRate4Over5.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
						reverseOS.write(0xA2);
						codeLength += 1;
						return codeLength;
					}
					
					if (codeRate2Over3 != null) {
						codeLength += codeRate2Over3.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (codeRate1Over2 != null) {
						codeLength += codeRate1Over2.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						codeRate1Over2 = new CodeRate1Over2();
						codeLength += codeRate1Over2.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						codeRate2Over3 = new CodeRate2Over3();
						codeLength += codeRate2Over3.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
						codeRate4Over5 = new CodeRate4Over5();
						codeLength += codeRate4Over5.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
						codeRate223Over255 = new CodeRate223Over255();
						codeLength += codeRate223Over255.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (codeRate1Over2 != null) {
						sb.append("codeRate1Over2: ");
						codeRate1Over2.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (codeRate2Over3 != null) {
						sb.append("codeRate2Over3: ");
						codeRate2Over3.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (codeRate4Over5 != null) {
						sb.append("codeRate4Over5: ");
						codeRate4Over5.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (codeRate223Over255 != null) {
						sb.append("codeRate223Over255: ");
						codeRate223Over255.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger codeBlockSize = null;
			private CodeRateAndSliceLength codeRateAndSliceLength = null;
			
			public SlicedLdpc() {
			}

			public SlicedLdpc(byte[] code) {
				this.code = code;
			}

			public void setCodeBlockSize(BerInteger codeBlockSize) {
				this.codeBlockSize = codeBlockSize;
			}

			public BerInteger getCodeBlockSize() {
				return codeBlockSize;
			}

			public void setCodeRateAndSliceLength(CodeRateAndSliceLength codeRateAndSliceLength) {
				this.codeRateAndSliceLength = codeRateAndSliceLength;
			}

			public CodeRateAndSliceLength getCodeRateAndSliceLength() {
				return codeRateAndSliceLength;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += codeRateAndSliceLength.encode(reverseOS);
				
				codeLength += codeBlockSize.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					codeBlockSize = new BerInteger();
					subCodeLength += codeBlockSize.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				codeRateAndSliceLength = new CodeRateAndSliceLength();
				subCodeLength += codeRateAndSliceLength.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeBlockSize != null) {
					sb.append("codeBlockSize: ").append(codeBlockSize);
				}
				else {
					sb.append("codeBlockSize: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeRateAndSliceLength != null) {
					sb.append("codeRateAndSliceLength: ");
					codeRateAndSliceLength.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("codeRateAndSliceLength: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private BerNull noDecoding = null;
		private ConvolutionalCodeRate convolutional = null;
		private ReedSolomon reedSolomon = null;
		private Concatenated concatenated = null;
		private Turbo turbo = null;
		private BerEnum ldpc = null;
		private SlicedLdpc slicedLdpc = null;
		
		public SymbolDecode() {
		}

		public SymbolDecode(byte[] code) {
			this.code = code;
		}

		public void setNoDecoding(BerNull noDecoding) {
			this.noDecoding = noDecoding;
		}

		public BerNull getNoDecoding() {
			return noDecoding;
		}

		public void setConvolutional(ConvolutionalCodeRate convolutional) {
			this.convolutional = convolutional;
		}

		public ConvolutionalCodeRate getConvolutional() {
			return convolutional;
		}

		public void setReedSolomon(ReedSolomon reedSolomon) {
			this.reedSolomon = reedSolomon;
		}

		public ReedSolomon getReedSolomon() {
			return reedSolomon;
		}

		public void setConcatenated(Concatenated concatenated) {
			this.concatenated = concatenated;
		}

		public Concatenated getConcatenated() {
			return concatenated;
		}

		public void setTurbo(Turbo turbo) {
			this.turbo = turbo;
		}

		public Turbo getTurbo() {
			return turbo;
		}

		public void setLdpc(BerEnum ldpc) {
			this.ldpc = ldpc;
		}

		public BerEnum getLdpc() {
			return ldpc;
		}

		public void setSlicedLdpc(SlicedLdpc slicedLdpc) {
			this.slicedLdpc = slicedLdpc;
		}

		public SlicedLdpc getSlicedLdpc() {
			return slicedLdpc;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (slicedLdpc != null) {
				codeLength += slicedLdpc.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
				reverseOS.write(0xA6);
				codeLength += 1;
				return codeLength;
			}
			
			if (ldpc != null) {
				codeLength += ldpc.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 5
				reverseOS.write(0x85);
				codeLength += 1;
				return codeLength;
			}
			
			if (turbo != null) {
				codeLength += turbo.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				reverseOS.write(0xA4);
				codeLength += 1;
				return codeLength;
			}
			
			if (concatenated != null) {
				codeLength += concatenated.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (reedSolomon != null) {
				codeLength += reedSolomon.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (convolutional != null) {
				codeLength += convolutional.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (noDecoding != null) {
				codeLength += noDecoding.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				noDecoding = new BerNull();
				codeLength += noDecoding.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				convolutional = new ConvolutionalCodeRate();
				codeLength += convolutional.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				reedSolomon = new ReedSolomon();
				codeLength += reedSolomon.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				concatenated = new Concatenated();
				codeLength += concatenated.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				turbo = new Turbo();
				codeLength += turbo.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
				ldpc = new BerEnum();
				codeLength += ldpc.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
				slicedLdpc = new SlicedLdpc();
				codeLength += slicedLdpc.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noDecoding != null) {
				sb.append("noDecoding: ").append(noDecoding);
				return;
			}

			if (convolutional != null) {
				sb.append("convolutional: ").append(convolutional);
				return;
			}

			if (reedSolomon != null) {
				sb.append("reedSolomon: ");
				reedSolomon.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (concatenated != null) {
				sb.append("concatenated: ");
				concatenated.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (turbo != null) {
				sb.append("turbo: ");
				turbo.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (ldpc != null) {
				sb.append("ldpc: ").append(ldpc);
				return;
			}

			if (slicedLdpc != null) {
				sb.append("slicedLdpc: ");
				slicedLdpc.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum differentialDecode = null;
	private SymbolDecode symbolDecode = null;
	
	public FlfSyncDecDecode() {
	}

	public FlfSyncDecDecode(byte[] code) {
		this.code = code;
	}

	public void setDifferentialDecode(BerEnum differentialDecode) {
		this.differentialDecode = differentialDecode;
	}

	public BerEnum getDifferentialDecode() {
		return differentialDecode;
	}

	public void setSymbolDecode(SymbolDecode symbolDecode) {
		this.symbolDecode = symbolDecode;
	}

	public SymbolDecode getSymbolDecode() {
		return symbolDecode;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += symbolDecode.encode(reverseOS);
		
		codeLength += differentialDecode.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerEnum.tag)) {
			differentialDecode = new BerEnum();
			subCodeLength += differentialDecode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		symbolDecode = new SymbolDecode();
		subCodeLength += symbolDecode.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (differentialDecode != null) {
			sb.append("differentialDecode: ").append(differentialDecode);
		}
		else {
			sb.append("differentialDecode: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (symbolDecode != null) {
			sb.append("symbolDecode: ");
			symbolDecode.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("symbolDecode: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

