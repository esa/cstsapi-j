/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class Ccsds401CarrierRcptModulationType implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static class Subcarrier implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class SymbolRate implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			private BerInteger ccsdsSubcarrierFrequencySymbolRateRatio = null;
			private BerInteger nonCcsdsAbsoluteSymbolRate = null;
			
			public SymbolRate() {
			}

			public SymbolRate(byte[] code) {
				this.code = code;
			}

			public void setCcsdsSubcarrierFrequencySymbolRateRatio(BerInteger ccsdsSubcarrierFrequencySymbolRateRatio) {
				this.ccsdsSubcarrierFrequencySymbolRateRatio = ccsdsSubcarrierFrequencySymbolRateRatio;
			}

			public BerInteger getCcsdsSubcarrierFrequencySymbolRateRatio() {
				return ccsdsSubcarrierFrequencySymbolRateRatio;
			}

			public void setNonCcsdsAbsoluteSymbolRate(BerInteger nonCcsdsAbsoluteSymbolRate) {
				this.nonCcsdsAbsoluteSymbolRate = nonCcsdsAbsoluteSymbolRate;
			}

			public BerInteger getNonCcsdsAbsoluteSymbolRate() {
				return nonCcsdsAbsoluteSymbolRate;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (nonCcsdsAbsoluteSymbolRate != null) {
					codeLength += nonCcsdsAbsoluteSymbolRate.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
					return codeLength;
				}
				
				if (ccsdsSubcarrierFrequencySymbolRateRatio != null) {
					codeLength += ccsdsSubcarrierFrequencySymbolRateRatio.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					ccsdsSubcarrierFrequencySymbolRateRatio = new BerInteger();
					codeLength += ccsdsSubcarrierFrequencySymbolRateRatio.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					nonCcsdsAbsoluteSymbolRate = new BerInteger();
					codeLength += nonCcsdsAbsoluteSymbolRate.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (ccsdsSubcarrierFrequencySymbolRateRatio != null) {
					sb.append("ccsdsSubcarrierFrequencySymbolRateRatio: ").append(ccsdsSubcarrierFrequencySymbolRateRatio);
					return;
				}

				if (nonCcsdsAbsoluteSymbolRate != null) {
					sb.append("nonCcsdsAbsoluteSymbolRate: ").append(nonCcsdsAbsoluteSymbolRate);
					return;
				}

				sb.append("<none>");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private SymbolRate symbolRate = null;
		private BerEnum subcarrierWaveform = null;
		private BerInteger modulationIndexTelemetry = null;
		private PcmFormat pcmFormat = null;
		
		public Subcarrier() {
		}

		public Subcarrier(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(SymbolRate symbolRate) {
			this.symbolRate = symbolRate;
		}

		public SymbolRate getSymbolRate() {
			return symbolRate;
		}

		public void setSubcarrierWaveform(BerEnum subcarrierWaveform) {
			this.subcarrierWaveform = subcarrierWaveform;
		}

		public BerEnum getSubcarrierWaveform() {
			return subcarrierWaveform;
		}

		public void setModulationIndexTelemetry(BerInteger modulationIndexTelemetry) {
			this.modulationIndexTelemetry = modulationIndexTelemetry;
		}

		public BerInteger getModulationIndexTelemetry() {
			return modulationIndexTelemetry;
		}

		public void setPcmFormat(PcmFormat pcmFormat) {
			this.pcmFormat = pcmFormat;
		}

		public PcmFormat getPcmFormat() {
			return pcmFormat;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += pcmFormat.encode(reverseOS, true);
			
			codeLength += modulationIndexTelemetry.encode(reverseOS, true);
			
			codeLength += subcarrierWaveform.encode(reverseOS, true);
			
			codeLength += symbolRate.encode(reverseOS);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			symbolRate = new SymbolRate();
			subCodeLength += symbolRate.decode(is, berTag);
			subCodeLength += berTag.decode(is);
			
			if (berTag.equals(BerEnum.tag)) {
				subcarrierWaveform = new BerEnum();
				subCodeLength += subcarrierWaveform.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerInteger.tag)) {
				modulationIndexTelemetry = new BerInteger();
				subCodeLength += modulationIndexTelemetry.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(PcmFormat.tag)) {
				pcmFormat = new PcmFormat();
				subCodeLength += pcmFormat.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ");
				symbolRate.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (subcarrierWaveform != null) {
				sb.append("subcarrierWaveform: ").append(subcarrierWaveform);
			}
			else {
				sb.append("subcarrierWaveform: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (modulationIndexTelemetry != null) {
				sb.append("modulationIndexTelemetry: ").append(modulationIndexTelemetry);
			}
			else {
				sb.append("modulationIndexTelemetry: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (pcmFormat != null) {
				sb.append("pcmFormat: ").append(pcmFormat);
			}
			else {
				sb.append("pcmFormat: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Direct implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger symbolRate = null;
		private BerInteger modulationIndexTelemetry = null;
		private PcmFormat pcmFormat = null;
		
		public Direct() {
		}

		public Direct(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(BerInteger symbolRate) {
			this.symbolRate = symbolRate;
		}

		public BerInteger getSymbolRate() {
			return symbolRate;
		}

		public void setModulationIndexTelemetry(BerInteger modulationIndexTelemetry) {
			this.modulationIndexTelemetry = modulationIndexTelemetry;
		}

		public BerInteger getModulationIndexTelemetry() {
			return modulationIndexTelemetry;
		}

		public void setPcmFormat(PcmFormat pcmFormat) {
			this.pcmFormat = pcmFormat;
		}

		public PcmFormat getPcmFormat() {
			return pcmFormat;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += pcmFormat.encode(reverseOS, true);
			
			codeLength += modulationIndexTelemetry.encode(reverseOS, true);
			
			codeLength += symbolRate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerInteger.tag)) {
				symbolRate = new BerInteger();
				subCodeLength += symbolRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerInteger.tag)) {
				modulationIndexTelemetry = new BerInteger();
				subCodeLength += modulationIndexTelemetry.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(PcmFormat.tag)) {
				pcmFormat = new PcmFormat();
				subCodeLength += pcmFormat.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ").append(symbolRate);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (modulationIndexTelemetry != null) {
				sb.append("modulationIndexTelemetry: ").append(modulationIndexTelemetry);
			}
			else {
				sb.append("modulationIndexTelemetry: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (pcmFormat != null) {
				sb.append("pcmFormat: ").append(pcmFormat);
			}
			else {
				sb.append("pcmFormat: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Bpsk implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger symbolRate = null;
		private PcmFormat pcmFormat = null;
		private BerEnum matchedFilter = null;
		
		public Bpsk() {
		}

		public Bpsk(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(BerInteger symbolRate) {
			this.symbolRate = symbolRate;
		}

		public BerInteger getSymbolRate() {
			return symbolRate;
		}

		public void setPcmFormat(PcmFormat pcmFormat) {
			this.pcmFormat = pcmFormat;
		}

		public PcmFormat getPcmFormat() {
			return pcmFormat;
		}

		public void setMatchedFilter(BerEnum matchedFilter) {
			this.matchedFilter = matchedFilter;
		}

		public BerEnum getMatchedFilter() {
			return matchedFilter;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += matchedFilter.encode(reverseOS, true);
			
			codeLength += pcmFormat.encode(reverseOS, true);
			
			codeLength += symbolRate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerInteger.tag)) {
				symbolRate = new BerInteger();
				subCodeLength += symbolRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(PcmFormat.tag)) {
				pcmFormat = new PcmFormat();
				subCodeLength += pcmFormat.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerEnum.tag)) {
				matchedFilter = new BerEnum();
				subCodeLength += matchedFilter.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ").append(symbolRate);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (pcmFormat != null) {
				sb.append("pcmFormat: ").append(pcmFormat);
			}
			else {
				sb.append("pcmFormat: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (matchedFilter != null) {
				sb.append("matchedFilter: ").append(matchedFilter);
			}
			else {
				sb.append("matchedFilter: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Qpsk implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class ConstellationConfiguration implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			public static class NonCcsds implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static class SymbolToIqMapping implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					private BerNull evenSymbolOnIchannel = null;
					private BerNull evenSymbolOnQchannel = null;
					
					public SymbolToIqMapping() {
					}

					public SymbolToIqMapping(byte[] code) {
						this.code = code;
					}

					public void setEvenSymbolOnIchannel(BerNull evenSymbolOnIchannel) {
						this.evenSymbolOnIchannel = evenSymbolOnIchannel;
					}

					public BerNull getEvenSymbolOnIchannel() {
						return evenSymbolOnIchannel;
					}

					public void setEvenSymbolOnQchannel(BerNull evenSymbolOnQchannel) {
						this.evenSymbolOnQchannel = evenSymbolOnQchannel;
					}

					public BerNull getEvenSymbolOnQchannel() {
						return evenSymbolOnQchannel;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						if (evenSymbolOnQchannel != null) {
							codeLength += evenSymbolOnQchannel.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 1
							reverseOS.write(0x81);
							codeLength += 1;
							return codeLength;
						}
						
						if (evenSymbolOnIchannel != null) {
							codeLength += evenSymbolOnIchannel.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							evenSymbolOnIchannel = new BerNull();
							codeLength += evenSymbolOnIchannel.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							evenSymbolOnQchannel = new BerNull();
							codeLength += evenSymbolOnQchannel.decode(is, false);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (evenSymbolOnIchannel != null) {
							sb.append("evenSymbolOnIchannel: ").append(evenSymbolOnIchannel);
							return;
						}

						if (evenSymbolOnQchannel != null) {
							sb.append("evenSymbolOnQchannel: ").append(evenSymbolOnQchannel);
							return;
						}

						sb.append("<none>");
					}

				}

				public static class SymbolPairToPhaseAssignment implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolPair00 = null;
					private BerInteger symbolPair01 = null;
					private BerInteger symbolPair10 = null;
					private BerInteger symbolPair11 = null;
					
					public SymbolPairToPhaseAssignment() {
					}

					public SymbolPairToPhaseAssignment(byte[] code) {
						this.code = code;
					}

					public void setSymbolPair00(BerInteger symbolPair00) {
						this.symbolPair00 = symbolPair00;
					}

					public BerInteger getSymbolPair00() {
						return symbolPair00;
					}

					public void setSymbolPair01(BerInteger symbolPair01) {
						this.symbolPair01 = symbolPair01;
					}

					public BerInteger getSymbolPair01() {
						return symbolPair01;
					}

					public void setSymbolPair10(BerInteger symbolPair10) {
						this.symbolPair10 = symbolPair10;
					}

					public BerInteger getSymbolPair10() {
						return symbolPair10;
					}

					public void setSymbolPair11(BerInteger symbolPair11) {
						this.symbolPair11 = symbolPair11;
					}

					public BerInteger getSymbolPair11() {
						return symbolPair11;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += symbolPair11.encode(reverseOS, true);
						
						codeLength += symbolPair10.encode(reverseOS, true);
						
						codeLength += symbolPair01.encode(reverseOS, true);
						
						codeLength += symbolPair00.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolPair00 = new BerInteger();
							subCodeLength += symbolPair00.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair01 = new BerInteger();
							subCodeLength += symbolPair01.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair10 = new BerInteger();
							subCodeLength += symbolPair10.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair11 = new BerInteger();
							subCodeLength += symbolPair11.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair00 != null) {
							sb.append("symbolPair00: ").append(symbolPair00);
						}
						else {
							sb.append("symbolPair00: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair01 != null) {
							sb.append("symbolPair01: ").append(symbolPair01);
						}
						else {
							sb.append("symbolPair01: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair10 != null) {
							sb.append("symbolPair10: ").append(symbolPair10);
						}
						else {
							sb.append("symbolPair10: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair11 != null) {
							sb.append("symbolPair11: ").append(symbolPair11);
						}
						else {
							sb.append("symbolPair11: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private SymbolToIqMapping symbolToIqMapping = null;
				private SymbolPairToPhaseAssignment symbolPairToPhaseAssignment = null;
				
				public NonCcsds() {
				}

				public NonCcsds(byte[] code) {
					this.code = code;
				}

				public void setSymbolToIqMapping(SymbolToIqMapping symbolToIqMapping) {
					this.symbolToIqMapping = symbolToIqMapping;
				}

				public SymbolToIqMapping getSymbolToIqMapping() {
					return symbolToIqMapping;
				}

				public void setSymbolPairToPhaseAssignment(SymbolPairToPhaseAssignment symbolPairToPhaseAssignment) {
					this.symbolPairToPhaseAssignment = symbolPairToPhaseAssignment;
				}

				public SymbolPairToPhaseAssignment getSymbolPairToPhaseAssignment() {
					return symbolPairToPhaseAssignment;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += symbolPairToPhaseAssignment.encode(reverseOS, true);
					
					codeLength += symbolToIqMapping.encode(reverseOS);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					symbolToIqMapping = new SymbolToIqMapping();
					subCodeLength += symbolToIqMapping.decode(is, berTag);
					subCodeLength += berTag.decode(is);
					
					if (berTag.equals(SymbolPairToPhaseAssignment.tag)) {
						symbolPairToPhaseAssignment = new SymbolPairToPhaseAssignment();
						subCodeLength += symbolPairToPhaseAssignment.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (symbolToIqMapping != null) {
						sb.append("symbolToIqMapping: ");
						symbolToIqMapping.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("symbolToIqMapping: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (symbolPairToPhaseAssignment != null) {
						sb.append("symbolPairToPhaseAssignment: ");
						symbolPairToPhaseAssignment.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("symbolPairToPhaseAssignment: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			private BerNull ccsds = null;
			private NonCcsds nonCcsds = null;
			
			public ConstellationConfiguration() {
			}

			public ConstellationConfiguration(byte[] code) {
				this.code = code;
			}

			public void setCcsds(BerNull ccsds) {
				this.ccsds = ccsds;
			}

			public BerNull getCcsds() {
				return ccsds;
			}

			public void setNonCcsds(NonCcsds nonCcsds) {
				this.nonCcsds = nonCcsds;
			}

			public NonCcsds getNonCcsds() {
				return nonCcsds;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (nonCcsds != null) {
					codeLength += nonCcsds.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
					return codeLength;
				}
				
				if (ccsds != null) {
					codeLength += ccsds.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					ccsds = new BerNull();
					codeLength += ccsds.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					nonCcsds = new NonCcsds();
					codeLength += nonCcsds.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (ccsds != null) {
					sb.append("ccsds: ").append(ccsds);
					return;
				}

				if (nonCcsds != null) {
					sb.append("nonCcsds: ");
					nonCcsds.appendAsString(sb, indentLevel + 1);
					return;
				}

				sb.append("<none>");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger symbolRate = null;
		private ConstellationConfiguration constellationConfiguration = null;
		private BerEnum matchedFilter = null;
		
		public Qpsk() {
		}

		public Qpsk(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(BerInteger symbolRate) {
			this.symbolRate = symbolRate;
		}

		public BerInteger getSymbolRate() {
			return symbolRate;
		}

		public void setConstellationConfiguration(ConstellationConfiguration constellationConfiguration) {
			this.constellationConfiguration = constellationConfiguration;
		}

		public ConstellationConfiguration getConstellationConfiguration() {
			return constellationConfiguration;
		}

		public void setMatchedFilter(BerEnum matchedFilter) {
			this.matchedFilter = matchedFilter;
		}

		public BerEnum getMatchedFilter() {
			return matchedFilter;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += matchedFilter.encode(reverseOS, true);
			
			codeLength += constellationConfiguration.encode(reverseOS);
			
			codeLength += symbolRate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerInteger.tag)) {
				symbolRate = new BerInteger();
				subCodeLength += symbolRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			constellationConfiguration = new ConstellationConfiguration();
			subCodeLength += constellationConfiguration.decode(is, berTag);
			subCodeLength += berTag.decode(is);
			
			if (berTag.equals(BerEnum.tag)) {
				matchedFilter = new BerEnum();
				subCodeLength += matchedFilter.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ").append(symbolRate);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (constellationConfiguration != null) {
				sb.append("constellationConfiguration: ");
				constellationConfiguration.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("constellationConfiguration: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (matchedFilter != null) {
				sb.append("matchedFilter: ").append(matchedFilter);
			}
			else {
				sb.append("matchedFilter: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Oqpsk implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class ConstellationConfiguration implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			public static class NonCcsds implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static class SymbolToIqMapping implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					private BerNull evenSymbolOnIchannel = null;
					private BerNull evenSymbolOnQchannel = null;
					
					public SymbolToIqMapping() {
					}

					public SymbolToIqMapping(byte[] code) {
						this.code = code;
					}

					public void setEvenSymbolOnIchannel(BerNull evenSymbolOnIchannel) {
						this.evenSymbolOnIchannel = evenSymbolOnIchannel;
					}

					public BerNull getEvenSymbolOnIchannel() {
						return evenSymbolOnIchannel;
					}

					public void setEvenSymbolOnQchannel(BerNull evenSymbolOnQchannel) {
						this.evenSymbolOnQchannel = evenSymbolOnQchannel;
					}

					public BerNull getEvenSymbolOnQchannel() {
						return evenSymbolOnQchannel;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						if (evenSymbolOnQchannel != null) {
							codeLength += evenSymbolOnQchannel.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 1
							reverseOS.write(0x81);
							codeLength += 1;
							return codeLength;
						}
						
						if (evenSymbolOnIchannel != null) {
							codeLength += evenSymbolOnIchannel.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, PRIMITIVE, 0
							reverseOS.write(0x80);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
							evenSymbolOnIchannel = new BerNull();
							codeLength += evenSymbolOnIchannel.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
							evenSymbolOnQchannel = new BerNull();
							codeLength += evenSymbolOnQchannel.decode(is, false);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (evenSymbolOnIchannel != null) {
							sb.append("evenSymbolOnIchannel: ").append(evenSymbolOnIchannel);
							return;
						}

						if (evenSymbolOnQchannel != null) {
							sb.append("evenSymbolOnQchannel: ").append(evenSymbolOnQchannel);
							return;
						}

						sb.append("<none>");
					}

				}

				public static class SymbolPairToPhaseAssignment implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolPair00 = null;
					private BerInteger symbolPair01 = null;
					private BerInteger symbolPair10 = null;
					private BerInteger symbolPair11 = null;
					
					public SymbolPairToPhaseAssignment() {
					}

					public SymbolPairToPhaseAssignment(byte[] code) {
						this.code = code;
					}

					public void setSymbolPair00(BerInteger symbolPair00) {
						this.symbolPair00 = symbolPair00;
					}

					public BerInteger getSymbolPair00() {
						return symbolPair00;
					}

					public void setSymbolPair01(BerInteger symbolPair01) {
						this.symbolPair01 = symbolPair01;
					}

					public BerInteger getSymbolPair01() {
						return symbolPair01;
					}

					public void setSymbolPair10(BerInteger symbolPair10) {
						this.symbolPair10 = symbolPair10;
					}

					public BerInteger getSymbolPair10() {
						return symbolPair10;
					}

					public void setSymbolPair11(BerInteger symbolPair11) {
						this.symbolPair11 = symbolPair11;
					}

					public BerInteger getSymbolPair11() {
						return symbolPair11;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += symbolPair11.encode(reverseOS, true);
						
						codeLength += symbolPair10.encode(reverseOS, true);
						
						codeLength += symbolPair01.encode(reverseOS, true);
						
						codeLength += symbolPair00.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolPair00 = new BerInteger();
							subCodeLength += symbolPair00.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair01 = new BerInteger();
							subCodeLength += symbolPair01.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair10 = new BerInteger();
							subCodeLength += symbolPair10.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							symbolPair11 = new BerInteger();
							subCodeLength += symbolPair11.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair00 != null) {
							sb.append("symbolPair00: ").append(symbolPair00);
						}
						else {
							sb.append("symbolPair00: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair01 != null) {
							sb.append("symbolPair01: ").append(symbolPair01);
						}
						else {
							sb.append("symbolPair01: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair10 != null) {
							sb.append("symbolPair10: ").append(symbolPair10);
						}
						else {
							sb.append("symbolPair10: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolPair11 != null) {
							sb.append("symbolPair11: ").append(symbolPair11);
						}
						else {
							sb.append("symbolPair11: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private SymbolToIqMapping symbolToIqMapping = null;
				private SymbolPairToPhaseAssignment symbolPairToPhaseAssignment = null;
				
				public NonCcsds() {
				}

				public NonCcsds(byte[] code) {
					this.code = code;
				}

				public void setSymbolToIqMapping(SymbolToIqMapping symbolToIqMapping) {
					this.symbolToIqMapping = symbolToIqMapping;
				}

				public SymbolToIqMapping getSymbolToIqMapping() {
					return symbolToIqMapping;
				}

				public void setSymbolPairToPhaseAssignment(SymbolPairToPhaseAssignment symbolPairToPhaseAssignment) {
					this.symbolPairToPhaseAssignment = symbolPairToPhaseAssignment;
				}

				public SymbolPairToPhaseAssignment getSymbolPairToPhaseAssignment() {
					return symbolPairToPhaseAssignment;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += symbolPairToPhaseAssignment.encode(reverseOS, true);
					
					codeLength += symbolToIqMapping.encode(reverseOS);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					symbolToIqMapping = new SymbolToIqMapping();
					subCodeLength += symbolToIqMapping.decode(is, berTag);
					subCodeLength += berTag.decode(is);
					
					if (berTag.equals(SymbolPairToPhaseAssignment.tag)) {
						symbolPairToPhaseAssignment = new SymbolPairToPhaseAssignment();
						subCodeLength += symbolPairToPhaseAssignment.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (symbolToIqMapping != null) {
						sb.append("symbolToIqMapping: ");
						symbolToIqMapping.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("symbolToIqMapping: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (symbolPairToPhaseAssignment != null) {
						sb.append("symbolPairToPhaseAssignment: ");
						symbolPairToPhaseAssignment.appendAsString(sb, indentLevel + 1);
					}
					else {
						sb.append("symbolPairToPhaseAssignment: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			private BerNull ccsds = null;
			private NonCcsds nonCcsds = null;
			
			public ConstellationConfiguration() {
			}

			public ConstellationConfiguration(byte[] code) {
				this.code = code;
			}

			public void setCcsds(BerNull ccsds) {
				this.ccsds = ccsds;
			}

			public BerNull getCcsds() {
				return ccsds;
			}

			public void setNonCcsds(NonCcsds nonCcsds) {
				this.nonCcsds = nonCcsds;
			}

			public NonCcsds getNonCcsds() {
				return nonCcsds;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (nonCcsds != null) {
					codeLength += nonCcsds.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
					reverseOS.write(0xA1);
					codeLength += 1;
					return codeLength;
				}
				
				if (ccsds != null) {
					codeLength += ccsds.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					ccsds = new BerNull();
					codeLength += ccsds.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
					nonCcsds = new NonCcsds();
					codeLength += nonCcsds.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (ccsds != null) {
					sb.append("ccsds: ").append(ccsds);
					return;
				}

				if (nonCcsds != null) {
					sb.append("nonCcsds: ");
					nonCcsds.appendAsString(sb, indentLevel + 1);
					return;
				}

				sb.append("<none>");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger symbolRate = null;
		private ConstellationConfiguration constellationConfiguration = null;
		private BerEnum matchedFilter = null;
		
		public Oqpsk() {
		}

		public Oqpsk(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(BerInteger symbolRate) {
			this.symbolRate = symbolRate;
		}

		public BerInteger getSymbolRate() {
			return symbolRate;
		}

		public void setConstellationConfiguration(ConstellationConfiguration constellationConfiguration) {
			this.constellationConfiguration = constellationConfiguration;
		}

		public ConstellationConfiguration getConstellationConfiguration() {
			return constellationConfiguration;
		}

		public void setMatchedFilter(BerEnum matchedFilter) {
			this.matchedFilter = matchedFilter;
		}

		public BerEnum getMatchedFilter() {
			return matchedFilter;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += matchedFilter.encode(reverseOS, true);
			
			codeLength += constellationConfiguration.encode(reverseOS);
			
			codeLength += symbolRate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerInteger.tag)) {
				symbolRate = new BerInteger();
				subCodeLength += symbolRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			constellationConfiguration = new ConstellationConfiguration();
			subCodeLength += constellationConfiguration.decode(is, berTag);
			subCodeLength += berTag.decode(is);
			
			if (berTag.equals(BerEnum.tag)) {
				matchedFilter = new BerEnum();
				subCodeLength += matchedFilter.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ").append(symbolRate);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (constellationConfiguration != null) {
				sb.append("constellationConfiguration: ");
				constellationConfiguration.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("constellationConfiguration: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (matchedFilter != null) {
				sb.append("matchedFilter: ").append(matchedFilter);
			}
			else {
				sb.append("matchedFilter: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Gmsk implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerInteger symbolRate = null;
		private BerInteger bandwidthSymbolPeriodProduct = null;
		private BerEnum concurrentGmskAndPnRng = null;
		
		public Gmsk() {
		}

		public Gmsk(byte[] code) {
			this.code = code;
		}

		public void setSymbolRate(BerInteger symbolRate) {
			this.symbolRate = symbolRate;
		}

		public BerInteger getSymbolRate() {
			return symbolRate;
		}

		public void setBandwidthSymbolPeriodProduct(BerInteger bandwidthSymbolPeriodProduct) {
			this.bandwidthSymbolPeriodProduct = bandwidthSymbolPeriodProduct;
		}

		public BerInteger getBandwidthSymbolPeriodProduct() {
			return bandwidthSymbolPeriodProduct;
		}

		public void setConcurrentGmskAndPnRng(BerEnum concurrentGmskAndPnRng) {
			this.concurrentGmskAndPnRng = concurrentGmskAndPnRng;
		}

		public BerEnum getConcurrentGmskAndPnRng() {
			return concurrentGmskAndPnRng;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += concurrentGmskAndPnRng.encode(reverseOS, true);
			
			codeLength += bandwidthSymbolPeriodProduct.encode(reverseOS, true);
			
			codeLength += symbolRate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerInteger.tag)) {
				symbolRate = new BerInteger();
				subCodeLength += symbolRate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerInteger.tag)) {
				bandwidthSymbolPeriodProduct = new BerInteger();
				subCodeLength += bandwidthSymbolPeriodProduct.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerEnum.tag)) {
				concurrentGmskAndPnRng = new BerEnum();
				subCodeLength += concurrentGmskAndPnRng.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (symbolRate != null) {
				sb.append("symbolRate: ").append(symbolRate);
			}
			else {
				sb.append("symbolRate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (bandwidthSymbolPeriodProduct != null) {
				sb.append("bandwidthSymbolPeriodProduct: ").append(bandwidthSymbolPeriodProduct);
			}
			else {
				sb.append("bandwidthSymbolPeriodProduct: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (concurrentGmskAndPnRng != null) {
				sb.append("concurrentGmskAndPnRng: ").append(concurrentGmskAndPnRng);
			}
			else {
				sb.append("concurrentGmskAndPnRng: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	private Subcarrier subcarrier = null;
	private Direct direct = null;
	private Bpsk bpsk = null;
	private Qpsk qpsk = null;
	private Oqpsk oqpsk = null;
	private Gmsk gmsk = null;
	
	public Ccsds401CarrierRcptModulationType() {
	}

	public Ccsds401CarrierRcptModulationType(byte[] code) {
		this.code = code;
	}

	public void setSubcarrier(Subcarrier subcarrier) {
		this.subcarrier = subcarrier;
	}

	public Subcarrier getSubcarrier() {
		return subcarrier;
	}

	public void setDirect(Direct direct) {
		this.direct = direct;
	}

	public Direct getDirect() {
		return direct;
	}

	public void setBpsk(Bpsk bpsk) {
		this.bpsk = bpsk;
	}

	public Bpsk getBpsk() {
		return bpsk;
	}

	public void setQpsk(Qpsk qpsk) {
		this.qpsk = qpsk;
	}

	public Qpsk getQpsk() {
		return qpsk;
	}

	public void setOqpsk(Oqpsk oqpsk) {
		this.oqpsk = oqpsk;
	}

	public Oqpsk getOqpsk() {
		return oqpsk;
	}

	public void setGmsk(Gmsk gmsk) {
		this.gmsk = gmsk;
	}

	public Gmsk getGmsk() {
		return gmsk;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (gmsk != null) {
			codeLength += gmsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			reverseOS.write(0xA5);
			codeLength += 1;
			return codeLength;
		}
		
		if (oqpsk != null) {
			codeLength += oqpsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
			return codeLength;
		}
		
		if (qpsk != null) {
			codeLength += qpsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
			return codeLength;
		}
		
		if (bpsk != null) {
			codeLength += bpsk.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (direct != null) {
			codeLength += direct.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (subcarrier != null) {
			codeLength += subcarrier.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			subcarrier = new Subcarrier();
			codeLength += subcarrier.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			direct = new Direct();
			codeLength += direct.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			bpsk = new Bpsk();
			codeLength += bpsk.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			qpsk = new Qpsk();
			codeLength += qpsk.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			oqpsk = new Oqpsk();
			codeLength += oqpsk.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			gmsk = new Gmsk();
			codeLength += gmsk.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (subcarrier != null) {
			sb.append("subcarrier: ");
			subcarrier.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (direct != null) {
			sb.append("direct: ");
			direct.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (bpsk != null) {
			sb.append("bpsk: ");
			bpsk.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (qpsk != null) {
			sb.append("qpsk: ");
			qpsk.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (oqpsk != null) {
			sb.append("oqpsk: ");
			oqpsk.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (gmsk != null) {
			sb.append("gmsk: ");
			gmsk.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

