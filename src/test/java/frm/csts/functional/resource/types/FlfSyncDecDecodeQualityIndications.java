/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class FlfSyncDecDecodeQualityIndications implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class BerEstimates implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerReal asmDerivedBerEstimate = null;
		private BerReal rsDerivedBerEstimate = null;
		
		public BerEstimates() {
		}

		public BerEstimates(byte[] code) {
			this.code = code;
		}

		public void setAsmDerivedBerEstimate(BerReal asmDerivedBerEstimate) {
			this.asmDerivedBerEstimate = asmDerivedBerEstimate;
		}

		public BerReal getAsmDerivedBerEstimate() {
			return asmDerivedBerEstimate;
		}

		public void setRsDerivedBerEstimate(BerReal rsDerivedBerEstimate) {
			this.rsDerivedBerEstimate = rsDerivedBerEstimate;
		}

		public BerReal getRsDerivedBerEstimate() {
			return rsDerivedBerEstimate;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += rsDerivedBerEstimate.encode(reverseOS, true);
			
			codeLength += asmDerivedBerEstimate.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerReal.tag)) {
				asmDerivedBerEstimate = new BerReal();
				subCodeLength += asmDerivedBerEstimate.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerReal.tag)) {
				rsDerivedBerEstimate = new BerReal();
				subCodeLength += rsDerivedBerEstimate.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (asmDerivedBerEstimate != null) {
				sb.append("asmDerivedBerEstimate: ").append(asmDerivedBerEstimate);
			}
			else {
				sb.append("asmDerivedBerEstimate: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (rsDerivedBerEstimate != null) {
				sb.append("rsDerivedBerEstimate: ").append(rsDerivedBerEstimate);
			}
			else {
				sb.append("rsDerivedBerEstimate: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class QualityIndications implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class NoDecoding implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			private BerNull fecfAbsent = null;
			private BerReal fecfPresent = null;
			
			public NoDecoding() {
			}

			public NoDecoding(byte[] code) {
				this.code = code;
			}

			public void setFecfAbsent(BerNull fecfAbsent) {
				this.fecfAbsent = fecfAbsent;
			}

			public BerNull getFecfAbsent() {
				return fecfAbsent;
			}

			public void setFecfPresent(BerReal fecfPresent) {
				this.fecfPresent = fecfPresent;
			}

			public BerReal getFecfPresent() {
				return fecfPresent;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (fecfPresent != null) {
					codeLength += fecfPresent.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
					return codeLength;
				}
				
				if (fecfAbsent != null) {
					codeLength += fecfAbsent.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					fecfAbsent = new BerNull();
					codeLength += fecfAbsent.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					fecfPresent = new BerReal();
					codeLength += fecfPresent.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (fecfAbsent != null) {
					sb.append("fecfAbsent: ").append(fecfAbsent);
					return;
				}

				if (fecfPresent != null) {
					sb.append("fecfPresent: ").append(fecfPresent);
					return;
				}

				sb.append("<none>");
			}

		}

		public static class ReedSolomonOrConcatenated implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum rsDecoderLockStatus = null;
			private BerInteger countOfRsCodeWordsProcessed = null;
			private BerReal ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample = null;
			
			public ReedSolomonOrConcatenated() {
			}

			public ReedSolomonOrConcatenated(byte[] code) {
				this.code = code;
			}

			public void setRsDecoderLockStatus(BerEnum rsDecoderLockStatus) {
				this.rsDecoderLockStatus = rsDecoderLockStatus;
			}

			public BerEnum getRsDecoderLockStatus() {
				return rsDecoderLockStatus;
			}

			public void setCountOfRsCodeWordsProcessed(BerInteger countOfRsCodeWordsProcessed) {
				this.countOfRsCodeWordsProcessed = countOfRsCodeWordsProcessed;
			}

			public BerInteger getCountOfRsCodeWordsProcessed() {
				return countOfRsCodeWordsProcessed;
			}

			public void setRatioBadCodeWordsToTotalCountOfCodeWordsInTheSample(BerReal ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample) {
				this.ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample = ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample;
			}

			public BerReal getRatioBadCodeWordsToTotalCountOfCodeWordsInTheSample() {
				return ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample.encode(reverseOS, true);
				
				codeLength += countOfRsCodeWordsProcessed.encode(reverseOS, true);
				
				codeLength += rsDecoderLockStatus.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerEnum.tag)) {
					rsDecoderLockStatus = new BerEnum();
					subCodeLength += rsDecoderLockStatus.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerInteger.tag)) {
					countOfRsCodeWordsProcessed = new BerInteger();
					subCodeLength += countOfRsCodeWordsProcessed.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerReal.tag)) {
					ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample = new BerReal();
					subCodeLength += ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rsDecoderLockStatus != null) {
					sb.append("rsDecoderLockStatus: ").append(rsDecoderLockStatus);
				}
				else {
					sb.append("rsDecoderLockStatus: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (countOfRsCodeWordsProcessed != null) {
					sb.append("countOfRsCodeWordsProcessed: ").append(countOfRsCodeWordsProcessed);
				}
				else {
					sb.append("countOfRsCodeWordsProcessed: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample != null) {
					sb.append("ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample: ").append(ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample);
				}
				else {
					sb.append("ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Turbo implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class IterationsCount implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger maxNumberOfIterationsPerFrame = null;
				private BerInteger averageNumberOfIterationsPerFrame = null;
				
				public IterationsCount() {
				}

				public IterationsCount(byte[] code) {
					this.code = code;
				}

				public void setMaxNumberOfIterationsPerFrame(BerInteger maxNumberOfIterationsPerFrame) {
					this.maxNumberOfIterationsPerFrame = maxNumberOfIterationsPerFrame;
				}

				public BerInteger getMaxNumberOfIterationsPerFrame() {
					return maxNumberOfIterationsPerFrame;
				}

				public void setAverageNumberOfIterationsPerFrame(BerInteger averageNumberOfIterationsPerFrame) {
					this.averageNumberOfIterationsPerFrame = averageNumberOfIterationsPerFrame;
				}

				public BerInteger getAverageNumberOfIterationsPerFrame() {
					return averageNumberOfIterationsPerFrame;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += averageNumberOfIterationsPerFrame.encode(reverseOS, true);
					
					codeLength += maxNumberOfIterationsPerFrame.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						maxNumberOfIterationsPerFrame = new BerInteger();
						subCodeLength += maxNumberOfIterationsPerFrame.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						averageNumberOfIterationsPerFrame = new BerInteger();
						subCodeLength += averageNumberOfIterationsPerFrame.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (maxNumberOfIterationsPerFrame != null) {
						sb.append("maxNumberOfIterationsPerFrame: ").append(maxNumberOfIterationsPerFrame);
					}
					else {
						sb.append("maxNumberOfIterationsPerFrame: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (averageNumberOfIterationsPerFrame != null) {
						sb.append("averageNumberOfIterationsPerFrame: ").append(averageNumberOfIterationsPerFrame);
					}
					else {
						sb.append("averageNumberOfIterationsPerFrame: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum turboDecoderLockStatus = null;
			private IterationsCount iterationsCount = null;
			private BerReal ratioBadFramesToTotalCountOfFramesInTheSample = null;
			
			public Turbo() {
			}

			public Turbo(byte[] code) {
				this.code = code;
			}

			public void setTurboDecoderLockStatus(BerEnum turboDecoderLockStatus) {
				this.turboDecoderLockStatus = turboDecoderLockStatus;
			}

			public BerEnum getTurboDecoderLockStatus() {
				return turboDecoderLockStatus;
			}

			public void setIterationsCount(IterationsCount iterationsCount) {
				this.iterationsCount = iterationsCount;
			}

			public IterationsCount getIterationsCount() {
				return iterationsCount;
			}

			public void setRatioBadFramesToTotalCountOfFramesInTheSample(BerReal ratioBadFramesToTotalCountOfFramesInTheSample) {
				this.ratioBadFramesToTotalCountOfFramesInTheSample = ratioBadFramesToTotalCountOfFramesInTheSample;
			}

			public BerReal getRatioBadFramesToTotalCountOfFramesInTheSample() {
				return ratioBadFramesToTotalCountOfFramesInTheSample;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += ratioBadFramesToTotalCountOfFramesInTheSample.encode(reverseOS, true);
				
				codeLength += iterationsCount.encode(reverseOS, true);
				
				codeLength += turboDecoderLockStatus.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerEnum.tag)) {
					turboDecoderLockStatus = new BerEnum();
					subCodeLength += turboDecoderLockStatus.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(IterationsCount.tag)) {
					iterationsCount = new IterationsCount();
					subCodeLength += iterationsCount.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerReal.tag)) {
					ratioBadFramesToTotalCountOfFramesInTheSample = new BerReal();
					subCodeLength += ratioBadFramesToTotalCountOfFramesInTheSample.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (turboDecoderLockStatus != null) {
					sb.append("turboDecoderLockStatus: ").append(turboDecoderLockStatus);
				}
				else {
					sb.append("turboDecoderLockStatus: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (iterationsCount != null) {
					sb.append("iterationsCount: ");
					iterationsCount.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("iterationsCount: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (ratioBadFramesToTotalCountOfFramesInTheSample != null) {
					sb.append("ratioBadFramesToTotalCountOfFramesInTheSample: ").append(ratioBadFramesToTotalCountOfFramesInTheSample);
				}
				else {
					sb.append("ratioBadFramesToTotalCountOfFramesInTheSample: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Ldpc implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class IterationsCount implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

				public byte[] code = null;
				private BerInteger maxNumberOfIterationsPerFrame = null;
				private BerInteger averageNumberOfIterationsPerFrame = null;
				
				public IterationsCount() {
				}

				public IterationsCount(byte[] code) {
					this.code = code;
				}

				public void setMaxNumberOfIterationsPerFrame(BerInteger maxNumberOfIterationsPerFrame) {
					this.maxNumberOfIterationsPerFrame = maxNumberOfIterationsPerFrame;
				}

				public BerInteger getMaxNumberOfIterationsPerFrame() {
					return maxNumberOfIterationsPerFrame;
				}

				public void setAverageNumberOfIterationsPerFrame(BerInteger averageNumberOfIterationsPerFrame) {
					this.averageNumberOfIterationsPerFrame = averageNumberOfIterationsPerFrame;
				}

				public BerInteger getAverageNumberOfIterationsPerFrame() {
					return averageNumberOfIterationsPerFrame;
				}

				public int encode(OutputStream reverseOS) throws IOException {
					return encode(reverseOS, true);
				}

				public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						if (withTag) {
							return tag.encode(reverseOS) + code.length;
						}
						return code.length;
					}

					int codeLength = 0;
					codeLength += averageNumberOfIterationsPerFrame.encode(reverseOS, true);
					
					codeLength += maxNumberOfIterationsPerFrame.encode(reverseOS, true);
					
					codeLength += BerLength.encodeLength(reverseOS, codeLength);

					if (withTag) {
						codeLength += tag.encode(reverseOS);
					}

					return codeLength;

				}

				public int decode(InputStream is) throws IOException {
					return decode(is, true);
				}

				public int decode(InputStream is, boolean withTag) throws IOException {
					int codeLength = 0;
					int subCodeLength = 0;
					BerTag berTag = new BerTag();

					if (withTag) {
						codeLength += tag.decodeAndCheck(is);
					}

					BerLength length = new BerLength();
					codeLength += length.decode(is);

					int totalLength = length.val;
					codeLength += totalLength;

					subCodeLength += berTag.decode(is);
					if (berTag.equals(BerInteger.tag)) {
						maxNumberOfIterationsPerFrame = new BerInteger();
						subCodeLength += maxNumberOfIterationsPerFrame.decode(is, false);
						subCodeLength += berTag.decode(is);
					}
					else {
						throw new IOException("Tag does not match the mandatory sequence element tag.");
					}
					
					if (berTag.equals(BerInteger.tag)) {
						averageNumberOfIterationsPerFrame = new BerInteger();
						subCodeLength += averageNumberOfIterationsPerFrame.decode(is, false);
						if (subCodeLength == totalLength) {
							return codeLength;
						}
					}
					throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

					
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS, false);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					sb.append("{");
					sb.append("\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (maxNumberOfIterationsPerFrame != null) {
						sb.append("maxNumberOfIterationsPerFrame: ").append(maxNumberOfIterationsPerFrame);
					}
					else {
						sb.append("maxNumberOfIterationsPerFrame: <empty-required-field>");
					}
					
					sb.append(",\n");
					for (int i = 0; i < indentLevel + 1; i++) {
						sb.append("\t");
					}
					if (averageNumberOfIterationsPerFrame != null) {
						sb.append("averageNumberOfIterationsPerFrame: ").append(averageNumberOfIterationsPerFrame);
					}
					else {
						sb.append("averageNumberOfIterationsPerFrame: <empty-required-field>");
					}
					
					sb.append("\n");
					for (int i = 0; i < indentLevel; i++) {
						sb.append("\t");
					}
					sb.append("}");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum ldpcDecoderLockStatus = null;
			private IterationsCount iterationsCount = null;
			private BerReal ratioBadFramesToTotalCountOfFramesInTheSample = null;
			
			public Ldpc() {
			}

			public Ldpc(byte[] code) {
				this.code = code;
			}

			public void setLdpcDecoderLockStatus(BerEnum ldpcDecoderLockStatus) {
				this.ldpcDecoderLockStatus = ldpcDecoderLockStatus;
			}

			public BerEnum getLdpcDecoderLockStatus() {
				return ldpcDecoderLockStatus;
			}

			public void setIterationsCount(IterationsCount iterationsCount) {
				this.iterationsCount = iterationsCount;
			}

			public IterationsCount getIterationsCount() {
				return iterationsCount;
			}

			public void setRatioBadFramesToTotalCountOfFramesInTheSample(BerReal ratioBadFramesToTotalCountOfFramesInTheSample) {
				this.ratioBadFramesToTotalCountOfFramesInTheSample = ratioBadFramesToTotalCountOfFramesInTheSample;
			}

			public BerReal getRatioBadFramesToTotalCountOfFramesInTheSample() {
				return ratioBadFramesToTotalCountOfFramesInTheSample;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += ratioBadFramesToTotalCountOfFramesInTheSample.encode(reverseOS, true);
				
				codeLength += iterationsCount.encode(reverseOS, true);
				
				codeLength += ldpcDecoderLockStatus.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerEnum.tag)) {
					ldpcDecoderLockStatus = new BerEnum();
					subCodeLength += ldpcDecoderLockStatus.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(IterationsCount.tag)) {
					iterationsCount = new IterationsCount();
					subCodeLength += iterationsCount.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerReal.tag)) {
					ratioBadFramesToTotalCountOfFramesInTheSample = new BerReal();
					subCodeLength += ratioBadFramesToTotalCountOfFramesInTheSample.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (ldpcDecoderLockStatus != null) {
					sb.append("ldpcDecoderLockStatus: ").append(ldpcDecoderLockStatus);
				}
				else {
					sb.append("ldpcDecoderLockStatus: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (iterationsCount != null) {
					sb.append("iterationsCount: ");
					iterationsCount.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("iterationsCount: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (ratioBadFramesToTotalCountOfFramesInTheSample != null) {
					sb.append("ratioBadFramesToTotalCountOfFramesInTheSample: ").append(ratioBadFramesToTotalCountOfFramesInTheSample);
				}
				else {
					sb.append("ratioBadFramesToTotalCountOfFramesInTheSample: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private NoDecoding noDecoding = null;
		private BerNull convolutional = null;
		private ReedSolomonOrConcatenated reedSolomonOrConcatenated = null;
		private Turbo turbo = null;
		private Ldpc ldpc = null;
		
		public QualityIndications() {
		}

		public QualityIndications(byte[] code) {
			this.code = code;
		}

		public void setNoDecoding(NoDecoding noDecoding) {
			this.noDecoding = noDecoding;
		}

		public NoDecoding getNoDecoding() {
			return noDecoding;
		}

		public void setConvolutional(BerNull convolutional) {
			this.convolutional = convolutional;
		}

		public BerNull getConvolutional() {
			return convolutional;
		}

		public void setReedSolomonOrConcatenated(ReedSolomonOrConcatenated reedSolomonOrConcatenated) {
			this.reedSolomonOrConcatenated = reedSolomonOrConcatenated;
		}

		public ReedSolomonOrConcatenated getReedSolomonOrConcatenated() {
			return reedSolomonOrConcatenated;
		}

		public void setTurbo(Turbo turbo) {
			this.turbo = turbo;
		}

		public Turbo getTurbo() {
			return turbo;
		}

		public void setLdpc(Ldpc ldpc) {
			this.ldpc = ldpc;
		}

		public Ldpc getLdpc() {
			return ldpc;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			int sublength;

			if (ldpc != null) {
				codeLength += ldpc.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
				reverseOS.write(0xA4);
				codeLength += 1;
				return codeLength;
			}
			
			if (turbo != null) {
				codeLength += turbo.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
				reverseOS.write(0xA3);
				codeLength += 1;
				return codeLength;
			}
			
			if (reedSolomonOrConcatenated != null) {
				codeLength += reedSolomonOrConcatenated.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (convolutional != null) {
				codeLength += convolutional.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (noDecoding != null) {
				sublength = noDecoding.encode(reverseOS);
				codeLength += sublength;
				codeLength += BerLength.encodeLength(reverseOS, sublength);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				codeLength += BerLength.skip(is);
				noDecoding = new NoDecoding();
				codeLength += noDecoding.decode(is, null);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				convolutional = new BerNull();
				codeLength += convolutional.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				reedSolomonOrConcatenated = new ReedSolomonOrConcatenated();
				codeLength += reedSolomonOrConcatenated.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
				turbo = new Turbo();
				codeLength += turbo.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
				ldpc = new Ldpc();
				codeLength += ldpc.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noDecoding != null) {
				sb.append("noDecoding: ");
				noDecoding.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (convolutional != null) {
				sb.append("convolutional: ").append(convolutional);
				return;
			}

			if (reedSolomonOrConcatenated != null) {
				sb.append("reedSolomonOrConcatenated: ");
				reedSolomonOrConcatenated.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (turbo != null) {
				sb.append("turbo: ");
				turbo.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (ldpc != null) {
				sb.append("ldpc: ");
				ldpc.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerInteger countOfFramesProcessed = null;
	private BerEstimates berEstimates = null;
	private QualityIndications qualityIndications = null;
	
	public FlfSyncDecDecodeQualityIndications() {
	}

	public FlfSyncDecDecodeQualityIndications(byte[] code) {
		this.code = code;
	}

	public void setCountOfFramesProcessed(BerInteger countOfFramesProcessed) {
		this.countOfFramesProcessed = countOfFramesProcessed;
	}

	public BerInteger getCountOfFramesProcessed() {
		return countOfFramesProcessed;
	}

	public void setBerEstimates(BerEstimates berEstimates) {
		this.berEstimates = berEstimates;
	}

	public BerEstimates getBerEstimates() {
		return berEstimates;
	}

	public void setQualityIndications(QualityIndications qualityIndications) {
		this.qualityIndications = qualityIndications;
	}

	public QualityIndications getQualityIndications() {
		return qualityIndications;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += qualityIndications.encode(reverseOS);
		
		codeLength += berEstimates.encode(reverseOS, true);
		
		codeLength += countOfFramesProcessed.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerInteger.tag)) {
			countOfFramesProcessed = new BerInteger();
			subCodeLength += countOfFramesProcessed.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerEstimates.tag)) {
			berEstimates = new BerEstimates();
			subCodeLength += berEstimates.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		qualityIndications = new QualityIndications();
		subCodeLength += qualityIndications.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (countOfFramesProcessed != null) {
			sb.append("countOfFramesProcessed: ").append(countOfFramesProcessed);
		}
		else {
			sb.append("countOfFramesProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (berEstimates != null) {
			sb.append("berEstimates: ");
			berEstimates.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("berEstimates: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (qualityIndications != null) {
			sb.append("qualityIndications: ");
			qualityIndications.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("qualityIndications: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

