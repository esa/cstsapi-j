/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class TcPlopSyncAcqAndIdlePattern implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class AcquisitionSequence implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static class AcquisitionPattern implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public byte[] code = null;
			private BerOctetString ccsds0 = null;
			private BerOctetString ccsds1 = null;
			private BerOctetString nonCcsds = null;
			
			public AcquisitionPattern() {
			}

			public AcquisitionPattern(byte[] code) {
				this.code = code;
			}

			public void setCcsds0(BerOctetString ccsds0) {
				this.ccsds0 = ccsds0;
			}

			public BerOctetString getCcsds0() {
				return ccsds0;
			}

			public void setCcsds1(BerOctetString ccsds1) {
				this.ccsds1 = ccsds1;
			}

			public BerOctetString getCcsds1() {
				return ccsds1;
			}

			public void setNonCcsds(BerOctetString nonCcsds) {
				this.nonCcsds = nonCcsds;
			}

			public BerOctetString getNonCcsds() {
				return nonCcsds;
			}

			public int encode(OutputStream reverseOS) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					return code.length;
				}

				int codeLength = 0;
				if (nonCcsds != null) {
					codeLength += nonCcsds.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 2
					reverseOS.write(0x82);
					codeLength += 1;
					return codeLength;
				}
				
				if (ccsds1 != null) {
					codeLength += ccsds1.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 1
					reverseOS.write(0x81);
					codeLength += 1;
					return codeLength;
				}
				
				if (ccsds0 != null) {
					codeLength += ccsds0.encode(reverseOS, false);
					// write tag: CONTEXT_CLASS, PRIMITIVE, 0
					reverseOS.write(0x80);
					codeLength += 1;
					return codeLength;
				}
				
				throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, null);
			}

			public int decode(InputStream is, BerTag berTag) throws IOException {

				int codeLength = 0;
				BerTag passedTag = berTag;

				if (berTag == null) {
					berTag = new BerTag();
					codeLength += berTag.decode(is);
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
					ccsds0 = new BerOctetString();
					codeLength += ccsds0.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
					ccsds1 = new BerOctetString();
					codeLength += ccsds1.decode(is, false);
					return codeLength;
				}

				if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
					nonCcsds = new BerOctetString();
					codeLength += nonCcsds.decode(is, false);
					return codeLength;
				}

				if (passedTag != null) {
					return 0;
				}

				throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				if (ccsds0 != null) {
					sb.append("ccsds0: ").append(ccsds0);
					return;
				}

				if (ccsds1 != null) {
					sb.append("ccsds1: ").append(ccsds1);
					return;
				}

				if (nonCcsds != null) {
					sb.append("nonCcsds: ").append(nonCcsds);
					return;
				}

				sb.append("<none>");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private AcquisitionPattern acquisitionPattern = null;
		private BerInteger acquisitionSequenceLength = null;
		
		public AcquisitionSequence() {
		}

		public AcquisitionSequence(byte[] code) {
			this.code = code;
		}

		public void setAcquisitionPattern(AcquisitionPattern acquisitionPattern) {
			this.acquisitionPattern = acquisitionPattern;
		}

		public AcquisitionPattern getAcquisitionPattern() {
			return acquisitionPattern;
		}

		public void setAcquisitionSequenceLength(BerInteger acquisitionSequenceLength) {
			this.acquisitionSequenceLength = acquisitionSequenceLength;
		}

		public BerInteger getAcquisitionSequenceLength() {
			return acquisitionSequenceLength;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += acquisitionSequenceLength.encode(reverseOS, true);
			
			codeLength += acquisitionPattern.encode(reverseOS);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			acquisitionPattern = new AcquisitionPattern();
			subCodeLength += acquisitionPattern.decode(is, berTag);
			subCodeLength += berTag.decode(is);
			
			if (berTag.equals(BerInteger.tag)) {
				acquisitionSequenceLength = new BerInteger();
				subCodeLength += acquisitionSequenceLength.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (acquisitionPattern != null) {
				sb.append("acquisitionPattern: ");
				acquisitionPattern.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("acquisitionPattern: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (acquisitionSequenceLength != null) {
				sb.append("acquisitionSequenceLength: ").append(acquisitionSequenceLength);
			}
			else {
				sb.append("acquisitionSequenceLength: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class IdlePattern implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerOctetString ccsds0 = null;
		private BerOctetString ccsds1 = null;
		private BerOctetString nonCcsds = null;
		
		public IdlePattern() {
		}

		public IdlePattern(byte[] code) {
			this.code = code;
		}

		public void setCcsds0(BerOctetString ccsds0) {
			this.ccsds0 = ccsds0;
		}

		public BerOctetString getCcsds0() {
			return ccsds0;
		}

		public void setCcsds1(BerOctetString ccsds1) {
			this.ccsds1 = ccsds1;
		}

		public BerOctetString getCcsds1() {
			return ccsds1;
		}

		public void setNonCcsds(BerOctetString nonCcsds) {
			this.nonCcsds = nonCcsds;
		}

		public BerOctetString getNonCcsds() {
			return nonCcsds;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (nonCcsds != null) {
				codeLength += nonCcsds.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (ccsds1 != null) {
				codeLength += ccsds1.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (ccsds0 != null) {
				codeLength += ccsds0.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				ccsds0 = new BerOctetString();
				codeLength += ccsds0.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				ccsds1 = new BerOctetString();
				codeLength += ccsds1.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				nonCcsds = new BerOctetString();
				codeLength += nonCcsds.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (ccsds0 != null) {
				sb.append("ccsds0: ").append(ccsds0);
				return;
			}

			if (ccsds1 != null) {
				sb.append("ccsds1: ").append(ccsds1);
				return;
			}

			if (nonCcsds != null) {
				sb.append("nonCcsds: ").append(nonCcsds);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private AcquisitionSequence acquisitionSequence = null;
	private IdlePattern idlePattern = null;
	
	public TcPlopSyncAcqAndIdlePattern() {
	}

	public TcPlopSyncAcqAndIdlePattern(byte[] code) {
		this.code = code;
	}

	public void setAcquisitionSequence(AcquisitionSequence acquisitionSequence) {
		this.acquisitionSequence = acquisitionSequence;
	}

	public AcquisitionSequence getAcquisitionSequence() {
		return acquisitionSequence;
	}

	public void setIdlePattern(IdlePattern idlePattern) {
		this.idlePattern = idlePattern;
	}

	public IdlePattern getIdlePattern() {
		return idlePattern;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += idlePattern.encode(reverseOS);
		
		codeLength += acquisitionSequence.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(AcquisitionSequence.tag)) {
			acquisitionSequence = new AcquisitionSequence();
			subCodeLength += acquisitionSequence.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		idlePattern = new IdlePattern();
		subCodeLength += idlePattern.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (acquisitionSequence != null) {
			sb.append("acquisitionSequence: ");
			acquisitionSequence.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("acquisitionSequence: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (idlePattern != null) {
			sb.append("idlePattern: ");
			idlePattern.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("idlePattern: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

