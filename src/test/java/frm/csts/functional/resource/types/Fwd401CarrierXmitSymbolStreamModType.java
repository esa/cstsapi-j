/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class Fwd401CarrierXmitSymbolStreamModType implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SymbolRateDopplerCompensation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerNull noCompensation = null;
		private BerInteger staticOffset = null;
		private BerNull ramping = null;
		
		public SymbolRateDopplerCompensation() {
		}

		public SymbolRateDopplerCompensation(byte[] code) {
			this.code = code;
		}

		public void setNoCompensation(BerNull noCompensation) {
			this.noCompensation = noCompensation;
		}

		public BerNull getNoCompensation() {
			return noCompensation;
		}

		public void setStaticOffset(BerInteger staticOffset) {
			this.staticOffset = staticOffset;
		}

		public BerInteger getStaticOffset() {
			return staticOffset;
		}

		public void setRamping(BerNull ramping) {
			this.ramping = ramping;
		}

		public BerNull getRamping() {
			return ramping;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (ramping != null) {
				codeLength += ramping.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (staticOffset != null) {
				codeLength += staticOffset.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (noCompensation != null) {
				codeLength += noCompensation.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				noCompensation = new BerNull();
				codeLength += noCompensation.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				staticOffset = new BerInteger();
				codeLength += staticOffset.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				ramping = new BerNull();
				codeLength += ramping.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noCompensation != null) {
				sb.append("noCompensation: ").append(noCompensation);
				return;
			}

			if (staticOffset != null) {
				sb.append("staticOffset: ").append(staticOffset);
				return;
			}

			if (ramping != null) {
				sb.append("ramping: ").append(ramping);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ModType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Bpsk implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class BpskSymbolRate implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private BerInteger ccsdsBpskSymcolRate = null;
				private BerInteger nonCcsdsBpskSymbolRate = null;
				
				public BpskSymbolRate() {
				}

				public BpskSymbolRate(byte[] code) {
					this.code = code;
				}

				public void setCcsdsBpskSymcolRate(BerInteger ccsdsBpskSymcolRate) {
					this.ccsdsBpskSymcolRate = ccsdsBpskSymcolRate;
				}

				public BerInteger getCcsdsBpskSymcolRate() {
					return ccsdsBpskSymcolRate;
				}

				public void setNonCcsdsBpskSymbolRate(BerInteger nonCcsdsBpskSymbolRate) {
					this.nonCcsdsBpskSymbolRate = nonCcsdsBpskSymbolRate;
				}

				public BerInteger getNonCcsdsBpskSymbolRate() {
					return nonCcsdsBpskSymbolRate;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsdsBpskSymbolRate != null) {
						codeLength += nonCcsdsBpskSymbolRate.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsdsBpskSymcolRate != null) {
						codeLength += ccsdsBpskSymcolRate.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						ccsdsBpskSymcolRate = new BerInteger();
						codeLength += ccsdsBpskSymcolRate.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						nonCcsdsBpskSymbolRate = new BerInteger();
						codeLength += nonCcsdsBpskSymbolRate.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsdsBpskSymcolRate != null) {
						sb.append("ccsdsBpskSymcolRate: ").append(ccsdsBpskSymcolRate);
						return;
					}

					if (nonCcsdsBpskSymbolRate != null) {
						sb.append("nonCcsdsBpskSymbolRate: ").append(nonCcsdsBpskSymbolRate);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BpskSymbolRate bpskSymbolRate = null;
			private PcmFormat tcBpskPcmFormat = null;
			
			public Bpsk() {
			}

			public Bpsk(byte[] code) {
				this.code = code;
			}

			public void setBpskSymbolRate(BpskSymbolRate bpskSymbolRate) {
				this.bpskSymbolRate = bpskSymbolRate;
			}

			public BpskSymbolRate getBpskSymbolRate() {
				return bpskSymbolRate;
			}

			public void setTcBpskPcmFormat(PcmFormat tcBpskPcmFormat) {
				this.tcBpskPcmFormat = tcBpskPcmFormat;
			}

			public PcmFormat getTcBpskPcmFormat() {
				return tcBpskPcmFormat;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += tcBpskPcmFormat.encode(reverseOS, true);
				
				codeLength += bpskSymbolRate.encode(reverseOS);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				bpskSymbolRate = new BpskSymbolRate();
				subCodeLength += bpskSymbolRate.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(PcmFormat.tag)) {
					tcBpskPcmFormat = new PcmFormat();
					subCodeLength += tcBpskPcmFormat.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (bpskSymbolRate != null) {
					sb.append("bpskSymbolRate: ");
					bpskSymbolRate.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("bpskSymbolRate: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (tcBpskPcmFormat != null) {
					sb.append("tcBpskPcmFormat: ").append(tcBpskPcmFormat);
				}
				else {
					sb.append("tcBpskPcmFormat: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Direct implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class DirectModSymbolRate implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private BerInteger ccsdsDirectModSymbolRate = null;
				private BerInteger nonCcsdsDirectModSymbolRate = null;
				
				public DirectModSymbolRate() {
				}

				public DirectModSymbolRate(byte[] code) {
					this.code = code;
				}

				public void setCcsdsDirectModSymbolRate(BerInteger ccsdsDirectModSymbolRate) {
					this.ccsdsDirectModSymbolRate = ccsdsDirectModSymbolRate;
				}

				public BerInteger getCcsdsDirectModSymbolRate() {
					return ccsdsDirectModSymbolRate;
				}

				public void setNonCcsdsDirectModSymbolRate(BerInteger nonCcsdsDirectModSymbolRate) {
					this.nonCcsdsDirectModSymbolRate = nonCcsdsDirectModSymbolRate;
				}

				public BerInteger getNonCcsdsDirectModSymbolRate() {
					return nonCcsdsDirectModSymbolRate;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsdsDirectModSymbolRate != null) {
						codeLength += nonCcsdsDirectModSymbolRate.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 1
						reverseOS.write(0x81);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsdsDirectModSymbolRate != null) {
						codeLength += ccsdsDirectModSymbolRate.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, PRIMITIVE, 0
						reverseOS.write(0x80);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
						ccsdsDirectModSymbolRate = new BerInteger();
						codeLength += ccsdsDirectModSymbolRate.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
						nonCcsdsDirectModSymbolRate = new BerInteger();
						codeLength += nonCcsdsDirectModSymbolRate.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsdsDirectModSymbolRate != null) {
						sb.append("ccsdsDirectModSymbolRate: ").append(ccsdsDirectModSymbolRate);
						return;
					}

					if (nonCcsdsDirectModSymbolRate != null) {
						sb.append("nonCcsdsDirectModSymbolRate: ").append(nonCcsdsDirectModSymbolRate);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger symbolStreamDirectModulationIndex = null;
			private DirectModSymbolRate directModSymbolRate = null;
			private PcmFormat tcDirectPcmFormat = null;
			
			public Direct() {
			}

			public Direct(byte[] code) {
				this.code = code;
			}

			public void setSymbolStreamDirectModulationIndex(BerInteger symbolStreamDirectModulationIndex) {
				this.symbolStreamDirectModulationIndex = symbolStreamDirectModulationIndex;
			}

			public BerInteger getSymbolStreamDirectModulationIndex() {
				return symbolStreamDirectModulationIndex;
			}

			public void setDirectModSymbolRate(DirectModSymbolRate directModSymbolRate) {
				this.directModSymbolRate = directModSymbolRate;
			}

			public DirectModSymbolRate getDirectModSymbolRate() {
				return directModSymbolRate;
			}

			public void setTcDirectPcmFormat(PcmFormat tcDirectPcmFormat) {
				this.tcDirectPcmFormat = tcDirectPcmFormat;
			}

			public PcmFormat getTcDirectPcmFormat() {
				return tcDirectPcmFormat;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += tcDirectPcmFormat.encode(reverseOS, true);
				
				codeLength += directModSymbolRate.encode(reverseOS);
				
				codeLength += symbolStreamDirectModulationIndex.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					symbolStreamDirectModulationIndex = new BerInteger();
					subCodeLength += symbolStreamDirectModulationIndex.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				directModSymbolRate = new DirectModSymbolRate();
				subCodeLength += directModSymbolRate.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(PcmFormat.tag)) {
					tcDirectPcmFormat = new PcmFormat();
					subCodeLength += tcDirectPcmFormat.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (symbolStreamDirectModulationIndex != null) {
					sb.append("symbolStreamDirectModulationIndex: ").append(symbolStreamDirectModulationIndex);
				}
				else {
					sb.append("symbolStreamDirectModulationIndex: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (directModSymbolRate != null) {
					sb.append("directModSymbolRate: ");
					directModSymbolRate.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("directModSymbolRate: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (tcDirectPcmFormat != null) {
					sb.append("tcDirectPcmFormat: ").append(tcDirectPcmFormat);
				}
				else {
					sb.append("tcDirectPcmFormat: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Subcarrier implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SubcarrierNominalFrequency implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class CcsdsNominalSubcarrierFrequencyAndSymbolRate implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public byte[] code = null;
					public static class Subcarrier8Khz implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

						public byte[] code = null;
						private BerInteger subcarrierNominalFrequency = null;
						private BerInteger nominalSymbolRate = null;
						
						public Subcarrier8Khz() {
						}

						public Subcarrier8Khz(byte[] code) {
							this.code = code;
						}

						public void setSubcarrierNominalFrequency(BerInteger subcarrierNominalFrequency) {
							this.subcarrierNominalFrequency = subcarrierNominalFrequency;
						}

						public BerInteger getSubcarrierNominalFrequency() {
							return subcarrierNominalFrequency;
						}

						public void setNominalSymbolRate(BerInteger nominalSymbolRate) {
							this.nominalSymbolRate = nominalSymbolRate;
						}

						public BerInteger getNominalSymbolRate() {
							return nominalSymbolRate;
						}

						public int encode(OutputStream reverseOS) throws IOException {
							return encode(reverseOS, true);
						}

						public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								if (withTag) {
									return tag.encode(reverseOS) + code.length;
								}
								return code.length;
							}

							int codeLength = 0;
							codeLength += nominalSymbolRate.encode(reverseOS, true);
							
							codeLength += subcarrierNominalFrequency.encode(reverseOS, true);
							
							codeLength += BerLength.encodeLength(reverseOS, codeLength);

							if (withTag) {
								codeLength += tag.encode(reverseOS);
							}

							return codeLength;

						}

						public int decode(InputStream is) throws IOException {
							return decode(is, true);
						}

						public int decode(InputStream is, boolean withTag) throws IOException {
							int codeLength = 0;
							int subCodeLength = 0;
							BerTag berTag = new BerTag();

							if (withTag) {
								codeLength += tag.decodeAndCheck(is);
							}

							BerLength length = new BerLength();
							codeLength += length.decode(is);

							int totalLength = length.val;
							codeLength += totalLength;

							subCodeLength += berTag.decode(is);
							if (berTag.equals(BerInteger.tag)) {
								subcarrierNominalFrequency = new BerInteger();
								subCodeLength += subcarrierNominalFrequency.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerInteger.tag)) {
								nominalSymbolRate = new BerInteger();
								subCodeLength += nominalSymbolRate.decode(is, false);
								if (subCodeLength == totalLength) {
									return codeLength;
								}
							}
							throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

							
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS, false);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							sb.append("{");
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (subcarrierNominalFrequency != null) {
								sb.append("subcarrierNominalFrequency: ").append(subcarrierNominalFrequency);
							}
							else {
								sb.append("subcarrierNominalFrequency: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (nominalSymbolRate != null) {
								sb.append("nominalSymbolRate: ").append(nominalSymbolRate);
							}
							else {
								sb.append("nominalSymbolRate: <empty-required-field>");
							}
							
							sb.append("\n");
							for (int i = 0; i < indentLevel; i++) {
								sb.append("\t");
							}
							sb.append("}");
						}

					}

					public static class Subcarrier16Khz implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

						public byte[] code = null;
						private BerInteger subcarrierNominalFrequency = null;
						private BerInteger nominalSymbolRate = null;
						
						public Subcarrier16Khz() {
						}

						public Subcarrier16Khz(byte[] code) {
							this.code = code;
						}

						public void setSubcarrierNominalFrequency(BerInteger subcarrierNominalFrequency) {
							this.subcarrierNominalFrequency = subcarrierNominalFrequency;
						}

						public BerInteger getSubcarrierNominalFrequency() {
							return subcarrierNominalFrequency;
						}

						public void setNominalSymbolRate(BerInteger nominalSymbolRate) {
							this.nominalSymbolRate = nominalSymbolRate;
						}

						public BerInteger getNominalSymbolRate() {
							return nominalSymbolRate;
						}

						public int encode(OutputStream reverseOS) throws IOException {
							return encode(reverseOS, true);
						}

						public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								if (withTag) {
									return tag.encode(reverseOS) + code.length;
								}
								return code.length;
							}

							int codeLength = 0;
							codeLength += nominalSymbolRate.encode(reverseOS, true);
							
							codeLength += subcarrierNominalFrequency.encode(reverseOS, true);
							
							codeLength += BerLength.encodeLength(reverseOS, codeLength);

							if (withTag) {
								codeLength += tag.encode(reverseOS);
							}

							return codeLength;

						}

						public int decode(InputStream is) throws IOException {
							return decode(is, true);
						}

						public int decode(InputStream is, boolean withTag) throws IOException {
							int codeLength = 0;
							int subCodeLength = 0;
							BerTag berTag = new BerTag();

							if (withTag) {
								codeLength += tag.decodeAndCheck(is);
							}

							BerLength length = new BerLength();
							codeLength += length.decode(is);

							int totalLength = length.val;
							codeLength += totalLength;

							subCodeLength += berTag.decode(is);
							if (berTag.equals(BerInteger.tag)) {
								subcarrierNominalFrequency = new BerInteger();
								subCodeLength += subcarrierNominalFrequency.decode(is, false);
								subCodeLength += berTag.decode(is);
							}
							else {
								throw new IOException("Tag does not match the mandatory sequence element tag.");
							}
							
							if (berTag.equals(BerInteger.tag)) {
								nominalSymbolRate = new BerInteger();
								subCodeLength += nominalSymbolRate.decode(is, false);
								if (subCodeLength == totalLength) {
									return codeLength;
								}
							}
							throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

							
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS, false);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							sb.append("{");
							sb.append("\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (subcarrierNominalFrequency != null) {
								sb.append("subcarrierNominalFrequency: ").append(subcarrierNominalFrequency);
							}
							else {
								sb.append("subcarrierNominalFrequency: <empty-required-field>");
							}
							
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							if (nominalSymbolRate != null) {
								sb.append("nominalSymbolRate: ").append(nominalSymbolRate);
							}
							else {
								sb.append("nominalSymbolRate: <empty-required-field>");
							}
							
							sb.append("\n");
							for (int i = 0; i < indentLevel; i++) {
								sb.append("\t");
							}
							sb.append("}");
						}

					}

					private Subcarrier8Khz subcarrier8Khz = null;
					private Subcarrier16Khz subcarrier16Khz = null;
					
					public CcsdsNominalSubcarrierFrequencyAndSymbolRate() {
					}

					public CcsdsNominalSubcarrierFrequencyAndSymbolRate(byte[] code) {
						this.code = code;
					}

					public void setSubcarrier8Khz(Subcarrier8Khz subcarrier8Khz) {
						this.subcarrier8Khz = subcarrier8Khz;
					}

					public Subcarrier8Khz getSubcarrier8Khz() {
						return subcarrier8Khz;
					}

					public void setSubcarrier16Khz(Subcarrier16Khz subcarrier16Khz) {
						this.subcarrier16Khz = subcarrier16Khz;
					}

					public Subcarrier16Khz getSubcarrier16Khz() {
						return subcarrier16Khz;
					}

					public int encode(OutputStream reverseOS) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							return code.length;
						}

						int codeLength = 0;
						if (subcarrier16Khz != null) {
							codeLength += subcarrier16Khz.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
							reverseOS.write(0xA1);
							codeLength += 1;
							return codeLength;
						}
						
						if (subcarrier8Khz != null) {
							codeLength += subcarrier8Khz.encode(reverseOS, false);
							// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
							reverseOS.write(0xA0);
							codeLength += 1;
							return codeLength;
						}
						
						throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
					}

					public int decode(InputStream is) throws IOException {
						return decode(is, null);
					}

					public int decode(InputStream is, BerTag berTag) throws IOException {

						int codeLength = 0;
						BerTag passedTag = berTag;

						if (berTag == null) {
							berTag = new BerTag();
							codeLength += berTag.decode(is);
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
							subcarrier8Khz = new Subcarrier8Khz();
							codeLength += subcarrier8Khz.decode(is, false);
							return codeLength;
						}

						if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
							subcarrier16Khz = new Subcarrier16Khz();
							codeLength += subcarrier16Khz.decode(is, false);
							return codeLength;
						}

						if (passedTag != null) {
							return 0;
						}

						throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						if (subcarrier8Khz != null) {
							sb.append("subcarrier8Khz: ");
							subcarrier8Khz.appendAsString(sb, indentLevel + 1);
							return;
						}

						if (subcarrier16Khz != null) {
							sb.append("subcarrier16Khz: ");
							subcarrier16Khz.appendAsString(sb, indentLevel + 1);
							return;
						}

						sb.append("<none>");
					}

				}

				public static class NonCcsdsSubcarrierFrequencyAndSymbolRate implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger nominalSubcarrierFrequency = null;
					private BerInteger nominalSymbolRate = null;
					
					public NonCcsdsSubcarrierFrequencyAndSymbolRate() {
					}

					public NonCcsdsSubcarrierFrequencyAndSymbolRate(byte[] code) {
						this.code = code;
					}

					public void setNominalSubcarrierFrequency(BerInteger nominalSubcarrierFrequency) {
						this.nominalSubcarrierFrequency = nominalSubcarrierFrequency;
					}

					public BerInteger getNominalSubcarrierFrequency() {
						return nominalSubcarrierFrequency;
					}

					public void setNominalSymbolRate(BerInteger nominalSymbolRate) {
						this.nominalSymbolRate = nominalSymbolRate;
					}

					public BerInteger getNominalSymbolRate() {
						return nominalSymbolRate;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += nominalSymbolRate.encode(reverseOS, true);
						
						codeLength += nominalSubcarrierFrequency.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							nominalSubcarrierFrequency = new BerInteger();
							subCodeLength += nominalSubcarrierFrequency.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							nominalSymbolRate = new BerInteger();
							subCodeLength += nominalSymbolRate.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (nominalSubcarrierFrequency != null) {
							sb.append("nominalSubcarrierFrequency: ").append(nominalSubcarrierFrequency);
						}
						else {
							sb.append("nominalSubcarrierFrequency: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (nominalSymbolRate != null) {
							sb.append("nominalSymbolRate: ").append(nominalSymbolRate);
						}
						else {
							sb.append("nominalSymbolRate: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private CcsdsNominalSubcarrierFrequencyAndSymbolRate ccsdsNominalSubcarrierFrequencyAndSymbolRate = null;
				private NonCcsdsSubcarrierFrequencyAndSymbolRate nonCcsdsSubcarrierFrequencyAndSymbolRate = null;
				
				public SubcarrierNominalFrequency() {
				}

				public SubcarrierNominalFrequency(byte[] code) {
					this.code = code;
				}

				public void setCcsdsNominalSubcarrierFrequencyAndSymbolRate(CcsdsNominalSubcarrierFrequencyAndSymbolRate ccsdsNominalSubcarrierFrequencyAndSymbolRate) {
					this.ccsdsNominalSubcarrierFrequencyAndSymbolRate = ccsdsNominalSubcarrierFrequencyAndSymbolRate;
				}

				public CcsdsNominalSubcarrierFrequencyAndSymbolRate getCcsdsNominalSubcarrierFrequencyAndSymbolRate() {
					return ccsdsNominalSubcarrierFrequencyAndSymbolRate;
				}

				public void setNonCcsdsSubcarrierFrequencyAndSymbolRate(NonCcsdsSubcarrierFrequencyAndSymbolRate nonCcsdsSubcarrierFrequencyAndSymbolRate) {
					this.nonCcsdsSubcarrierFrequencyAndSymbolRate = nonCcsdsSubcarrierFrequencyAndSymbolRate;
				}

				public NonCcsdsSubcarrierFrequencyAndSymbolRate getNonCcsdsSubcarrierFrequencyAndSymbolRate() {
					return nonCcsdsSubcarrierFrequencyAndSymbolRate;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					int sublength;

					if (nonCcsdsSubcarrierFrequencyAndSymbolRate != null) {
						codeLength += nonCcsdsSubcarrierFrequencyAndSymbolRate.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsdsNominalSubcarrierFrequencyAndSymbolRate != null) {
						sublength = ccsdsNominalSubcarrierFrequencyAndSymbolRate.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						codeLength += BerLength.skip(is);
						ccsdsNominalSubcarrierFrequencyAndSymbolRate = new CcsdsNominalSubcarrierFrequencyAndSymbolRate();
						codeLength += ccsdsNominalSubcarrierFrequencyAndSymbolRate.decode(is, null);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						nonCcsdsSubcarrierFrequencyAndSymbolRate = new NonCcsdsSubcarrierFrequencyAndSymbolRate();
						codeLength += nonCcsdsSubcarrierFrequencyAndSymbolRate.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsdsNominalSubcarrierFrequencyAndSymbolRate != null) {
						sb.append("ccsdsNominalSubcarrierFrequencyAndSymbolRate: ");
						ccsdsNominalSubcarrierFrequencyAndSymbolRate.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (nonCcsdsSubcarrierFrequencyAndSymbolRate != null) {
						sb.append("nonCcsdsSubcarrierFrequencyAndSymbolRate: ");
						nonCcsdsSubcarrierFrequencyAndSymbolRate.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private SubcarrierNominalFrequency subcarrierNominalFrequency = null;
			private BerInteger subcarrierModIndex = null;
			private PcmFormat tcSubcarrierPcmFormat = null;
			
			public Subcarrier() {
			}

			public Subcarrier(byte[] code) {
				this.code = code;
			}

			public void setSubcarrierNominalFrequency(SubcarrierNominalFrequency subcarrierNominalFrequency) {
				this.subcarrierNominalFrequency = subcarrierNominalFrequency;
			}

			public SubcarrierNominalFrequency getSubcarrierNominalFrequency() {
				return subcarrierNominalFrequency;
			}

			public void setSubcarrierModIndex(BerInteger subcarrierModIndex) {
				this.subcarrierModIndex = subcarrierModIndex;
			}

			public BerInteger getSubcarrierModIndex() {
				return subcarrierModIndex;
			}

			public void setTcSubcarrierPcmFormat(PcmFormat tcSubcarrierPcmFormat) {
				this.tcSubcarrierPcmFormat = tcSubcarrierPcmFormat;
			}

			public PcmFormat getTcSubcarrierPcmFormat() {
				return tcSubcarrierPcmFormat;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += tcSubcarrierPcmFormat.encode(reverseOS, true);
				
				codeLength += subcarrierModIndex.encode(reverseOS, true);
				
				codeLength += subcarrierNominalFrequency.encode(reverseOS);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				subcarrierNominalFrequency = new SubcarrierNominalFrequency();
				subCodeLength += subcarrierNominalFrequency.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(BerInteger.tag)) {
					subcarrierModIndex = new BerInteger();
					subCodeLength += subcarrierModIndex.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(PcmFormat.tag)) {
					tcSubcarrierPcmFormat = new PcmFormat();
					subCodeLength += tcSubcarrierPcmFormat.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierNominalFrequency != null) {
					sb.append("subcarrierNominalFrequency: ");
					subcarrierNominalFrequency.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("subcarrierNominalFrequency: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierModIndex != null) {
					sb.append("subcarrierModIndex: ").append(subcarrierModIndex);
				}
				else {
					sb.append("subcarrierModIndex: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (tcSubcarrierPcmFormat != null) {
					sb.append("tcSubcarrierPcmFormat: ").append(tcSubcarrierPcmFormat);
				}
				else {
					sb.append("tcSubcarrierPcmFormat: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Bpsk bpsk = null;
		private Direct direct = null;
		private Subcarrier subcarrier = null;
		
		public ModType() {
		}

		public ModType(byte[] code) {
			this.code = code;
		}

		public void setBpsk(Bpsk bpsk) {
			this.bpsk = bpsk;
		}

		public Bpsk getBpsk() {
			return bpsk;
		}

		public void setDirect(Direct direct) {
			this.direct = direct;
		}

		public Direct getDirect() {
			return direct;
		}

		public void setSubcarrier(Subcarrier subcarrier) {
			this.subcarrier = subcarrier;
		}

		public Subcarrier getSubcarrier() {
			return subcarrier;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (subcarrier != null) {
				codeLength += subcarrier.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (direct != null) {
				codeLength += direct.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (bpsk != null) {
				codeLength += bpsk.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				bpsk = new Bpsk();
				codeLength += bpsk.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				direct = new Direct();
				codeLength += direct.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				subcarrier = new Subcarrier();
				codeLength += subcarrier.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (bpsk != null) {
				sb.append("bpsk: ");
				bpsk.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (direct != null) {
				sb.append("direct: ");
				direct.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (subcarrier != null) {
				sb.append("subcarrier: ");
				subcarrier.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SymbolRateDopplerCompensation symbolRateDopplerCompensation = null;
	private ModType modType = null;
	
	public Fwd401CarrierXmitSymbolStreamModType() {
	}

	public Fwd401CarrierXmitSymbolStreamModType(byte[] code) {
		this.code = code;
	}

	public void setSymbolRateDopplerCompensation(SymbolRateDopplerCompensation symbolRateDopplerCompensation) {
		this.symbolRateDopplerCompensation = symbolRateDopplerCompensation;
	}

	public SymbolRateDopplerCompensation getSymbolRateDopplerCompensation() {
		return symbolRateDopplerCompensation;
	}

	public void setModType(ModType modType) {
		this.modType = modType;
	}

	public ModType getModType() {
		return modType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += modType.encode(reverseOS);
		
		codeLength += symbolRateDopplerCompensation.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		symbolRateDopplerCompensation = new SymbolRateDopplerCompensation();
		subCodeLength += symbolRateDopplerCompensation.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		modType = new ModType();
		subCodeLength += modType.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (symbolRateDopplerCompensation != null) {
			sb.append("symbolRateDopplerCompensation: ");
			symbolRateDopplerCompensation.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("symbolRateDopplerCompensation: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (modType != null) {
			sb.append("modType: ");
			modType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("modType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

