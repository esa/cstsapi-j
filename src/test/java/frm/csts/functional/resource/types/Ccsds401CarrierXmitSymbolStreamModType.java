/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class Ccsds401CarrierXmitSymbolStreamModType implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class SymbolRateDopplerCompensation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerNull noCompensation = null;
		private BerInteger staticOffset = null;
		private BerNull ramping = null;
		
		public SymbolRateDopplerCompensation() {
		}

		public SymbolRateDopplerCompensation(byte[] code) {
			this.code = code;
		}

		public void setNoCompensation(BerNull noCompensation) {
			this.noCompensation = noCompensation;
		}

		public BerNull getNoCompensation() {
			return noCompensation;
		}

		public void setStaticOffset(BerInteger staticOffset) {
			this.staticOffset = staticOffset;
		}

		public BerInteger getStaticOffset() {
			return staticOffset;
		}

		public void setRamping(BerNull ramping) {
			this.ramping = ramping;
		}

		public BerNull getRamping() {
			return ramping;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (ramping != null) {
				codeLength += ramping.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 2
				reverseOS.write(0x82);
				codeLength += 1;
				return codeLength;
			}
			
			if (staticOffset != null) {
				codeLength += staticOffset.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (noCompensation != null) {
				codeLength += noCompensation.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				noCompensation = new BerNull();
				codeLength += noCompensation.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				staticOffset = new BerInteger();
				codeLength += staticOffset.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				ramping = new BerNull();
				codeLength += ramping.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noCompensation != null) {
				sb.append("noCompensation: ").append(noCompensation);
				return;
			}

			if (staticOffset != null) {
				sb.append("staticOffset: ").append(staticOffset);
				return;
			}

			if (ramping != null) {
				sb.append("ramping: ").append(ramping);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ModType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class Bpsk implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class BpskSymbolRateAndPcmFormat implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class Ccsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public Ccsds() {
					}

					public Ccsds(byte[] code) {
						this.code = code;
					}

					public void setSymbolRate(BerInteger symbolRate) {
						this.symbolRate = symbolRate;
					}

					public BerInteger getSymbolRate() {
						return symbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += symbolRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolRate = new BerInteger();
							subCodeLength += symbolRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolRate != null) {
							sb.append("symbolRate: ").append(symbolRate);
						}
						else {
							sb.append("symbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class NonCcsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public NonCcsds() {
					}

					public NonCcsds(byte[] code) {
						this.code = code;
					}

					public void setSymbolRate(BerInteger symbolRate) {
						this.symbolRate = symbolRate;
					}

					public BerInteger getSymbolRate() {
						return symbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += symbolRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolRate = new BerInteger();
							subCodeLength += symbolRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolRate != null) {
							sb.append("symbolRate: ").append(symbolRate);
						}
						else {
							sb.append("symbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private Ccsds ccsds = null;
				private NonCcsds nonCcsds = null;
				
				public BpskSymbolRateAndPcmFormat() {
				}

				public BpskSymbolRateAndPcmFormat(byte[] code) {
					this.code = code;
				}

				public void setCcsds(Ccsds ccsds) {
					this.ccsds = ccsds;
				}

				public Ccsds getCcsds() {
					return ccsds;
				}

				public void setNonCcsds(NonCcsds nonCcsds) {
					this.nonCcsds = nonCcsds;
				}

				public NonCcsds getNonCcsds() {
					return nonCcsds;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsds != null) {
						codeLength += nonCcsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsds != null) {
						codeLength += ccsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						ccsds = new Ccsds();
						codeLength += ccsds.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						nonCcsds = new NonCcsds();
						codeLength += nonCcsds.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsds != null) {
						sb.append("ccsds: ");
						ccsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (nonCcsds != null) {
						sb.append("nonCcsds: ");
						nonCcsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerEnum bandpassFilter = null;
			private BpskSymbolRateAndPcmFormat bpskSymbolRateAndPcmFormat = null;
			
			public Bpsk() {
			}

			public Bpsk(byte[] code) {
				this.code = code;
			}

			public void setBandpassFilter(BerEnum bandpassFilter) {
				this.bandpassFilter = bandpassFilter;
			}

			public BerEnum getBandpassFilter() {
				return bandpassFilter;
			}

			public void setBpskSymbolRateAndPcmFormat(BpskSymbolRateAndPcmFormat bpskSymbolRateAndPcmFormat) {
				this.bpskSymbolRateAndPcmFormat = bpskSymbolRateAndPcmFormat;
			}

			public BpskSymbolRateAndPcmFormat getBpskSymbolRateAndPcmFormat() {
				return bpskSymbolRateAndPcmFormat;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += bpskSymbolRateAndPcmFormat.encode(reverseOS);
				
				codeLength += bandpassFilter.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerEnum.tag)) {
					bandpassFilter = new BerEnum();
					subCodeLength += bandpassFilter.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				bpskSymbolRateAndPcmFormat = new BpskSymbolRateAndPcmFormat();
				subCodeLength += bpskSymbolRateAndPcmFormat.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (bandpassFilter != null) {
					sb.append("bandpassFilter: ").append(bandpassFilter);
				}
				else {
					sb.append("bandpassFilter: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (bpskSymbolRateAndPcmFormat != null) {
					sb.append("bpskSymbolRateAndPcmFormat: ");
					bpskSymbolRateAndPcmFormat.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("bpskSymbolRateAndPcmFormat: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Direct implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class DirectSymbolRateAndPcmFormat implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class Ccsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public Ccsds() {
					}

					public Ccsds(byte[] code) {
						this.code = code;
					}

					public void setSymbolRate(BerInteger symbolRate) {
						this.symbolRate = symbolRate;
					}

					public BerInteger getSymbolRate() {
						return symbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += symbolRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolRate = new BerInteger();
							subCodeLength += symbolRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolRate != null) {
							sb.append("symbolRate: ").append(symbolRate);
						}
						else {
							sb.append("symbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class NonCcsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger symbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public NonCcsds() {
					}

					public NonCcsds(byte[] code) {
						this.code = code;
					}

					public void setSymbolRate(BerInteger symbolRate) {
						this.symbolRate = symbolRate;
					}

					public BerInteger getSymbolRate() {
						return symbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += symbolRate.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							symbolRate = new BerInteger();
							subCodeLength += symbolRate.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (symbolRate != null) {
							sb.append("symbolRate: ").append(symbolRate);
						}
						else {
							sb.append("symbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private Ccsds ccsds = null;
				private NonCcsds nonCcsds = null;
				
				public DirectSymbolRateAndPcmFormat() {
				}

				public DirectSymbolRateAndPcmFormat(byte[] code) {
					this.code = code;
				}

				public void setCcsds(Ccsds ccsds) {
					this.ccsds = ccsds;
				}

				public Ccsds getCcsds() {
					return ccsds;
				}

				public void setNonCcsds(NonCcsds nonCcsds) {
					this.nonCcsds = nonCcsds;
				}

				public NonCcsds getNonCcsds() {
					return nonCcsds;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsds != null) {
						codeLength += nonCcsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsds != null) {
						codeLength += ccsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						ccsds = new Ccsds();
						codeLength += ccsds.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						nonCcsds = new NonCcsds();
						codeLength += nonCcsds.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsds != null) {
						sb.append("ccsds: ");
						ccsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (nonCcsds != null) {
						sb.append("nonCcsds: ");
						nonCcsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger symbolStreamDirectModulationIndex = null;
			private DirectSymbolRateAndPcmFormat directSymbolRateAndPcmFormat = null;
			
			public Direct() {
			}

			public Direct(byte[] code) {
				this.code = code;
			}

			public void setSymbolStreamDirectModulationIndex(BerInteger symbolStreamDirectModulationIndex) {
				this.symbolStreamDirectModulationIndex = symbolStreamDirectModulationIndex;
			}

			public BerInteger getSymbolStreamDirectModulationIndex() {
				return symbolStreamDirectModulationIndex;
			}

			public void setDirectSymbolRateAndPcmFormat(DirectSymbolRateAndPcmFormat directSymbolRateAndPcmFormat) {
				this.directSymbolRateAndPcmFormat = directSymbolRateAndPcmFormat;
			}

			public DirectSymbolRateAndPcmFormat getDirectSymbolRateAndPcmFormat() {
				return directSymbolRateAndPcmFormat;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += directSymbolRateAndPcmFormat.encode(reverseOS);
				
				codeLength += symbolStreamDirectModulationIndex.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					symbolStreamDirectModulationIndex = new BerInteger();
					subCodeLength += symbolStreamDirectModulationIndex.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				directSymbolRateAndPcmFormat = new DirectSymbolRateAndPcmFormat();
				subCodeLength += directSymbolRateAndPcmFormat.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (symbolStreamDirectModulationIndex != null) {
					sb.append("symbolStreamDirectModulationIndex: ").append(symbolStreamDirectModulationIndex);
				}
				else {
					sb.append("symbolStreamDirectModulationIndex: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (directSymbolRateAndPcmFormat != null) {
					sb.append("directSymbolRateAndPcmFormat: ");
					directSymbolRateAndPcmFormat.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("directSymbolRateAndPcmFormat: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class Subcarrier implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class SubcarrierFreqSymbolRateAndPcmFormat implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class Ccsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class SubcarrierFreqAndSymbolRate implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						public static class Subcarrier8Khz implements BerType, Serializable {

							private static final long serialVersionUID = 1L;

							public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

							public byte[] code = null;
							private BerInteger subcarrierNominalFrequency = null;
							private BerInteger nominalSymbolRate = null;
							
							public Subcarrier8Khz() {
							}

							public Subcarrier8Khz(byte[] code) {
								this.code = code;
							}

							public void setSubcarrierNominalFrequency(BerInteger subcarrierNominalFrequency) {
								this.subcarrierNominalFrequency = subcarrierNominalFrequency;
							}

							public BerInteger getSubcarrierNominalFrequency() {
								return subcarrierNominalFrequency;
							}

							public void setNominalSymbolRate(BerInteger nominalSymbolRate) {
								this.nominalSymbolRate = nominalSymbolRate;
							}

							public BerInteger getNominalSymbolRate() {
								return nominalSymbolRate;
							}

							public int encode(OutputStream reverseOS) throws IOException {
								return encode(reverseOS, true);
							}

							public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

								if (code != null) {
									for (int i = code.length - 1; i >= 0; i--) {
										reverseOS.write(code[i]);
									}
									if (withTag) {
										return tag.encode(reverseOS) + code.length;
									}
									return code.length;
								}

								int codeLength = 0;
								codeLength += nominalSymbolRate.encode(reverseOS, true);
								
								codeLength += subcarrierNominalFrequency.encode(reverseOS, true);
								
								codeLength += BerLength.encodeLength(reverseOS, codeLength);

								if (withTag) {
									codeLength += tag.encode(reverseOS);
								}

								return codeLength;

							}

							public int decode(InputStream is) throws IOException {
								return decode(is, true);
							}

							public int decode(InputStream is, boolean withTag) throws IOException {
								int codeLength = 0;
								int subCodeLength = 0;
								BerTag berTag = new BerTag();

								if (withTag) {
									codeLength += tag.decodeAndCheck(is);
								}

								BerLength length = new BerLength();
								codeLength += length.decode(is);

								int totalLength = length.val;
								codeLength += totalLength;

								subCodeLength += berTag.decode(is);
								if (berTag.equals(BerInteger.tag)) {
									subcarrierNominalFrequency = new BerInteger();
									subCodeLength += subcarrierNominalFrequency.decode(is, false);
									subCodeLength += berTag.decode(is);
								}
								else {
									throw new IOException("Tag does not match the mandatory sequence element tag.");
								}
								
								if (berTag.equals(BerInteger.tag)) {
									nominalSymbolRate = new BerInteger();
									subCodeLength += nominalSymbolRate.decode(is, false);
									if (subCodeLength == totalLength) {
										return codeLength;
									}
								}
								throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

								
							}

							public void encodeAndSave(int encodingSizeGuess) throws IOException {
								ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
								encode(reverseOS, false);
								code = reverseOS.getArray();
							}

							public String toString() {
								StringBuilder sb = new StringBuilder();
								appendAsString(sb, 0);
								return sb.toString();
							}

							public void appendAsString(StringBuilder sb, int indentLevel) {

								sb.append("{");
								sb.append("\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (subcarrierNominalFrequency != null) {
									sb.append("subcarrierNominalFrequency: ").append(subcarrierNominalFrequency);
								}
								else {
									sb.append("subcarrierNominalFrequency: <empty-required-field>");
								}
								
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (nominalSymbolRate != null) {
									sb.append("nominalSymbolRate: ").append(nominalSymbolRate);
								}
								else {
									sb.append("nominalSymbolRate: <empty-required-field>");
								}
								
								sb.append("\n");
								for (int i = 0; i < indentLevel; i++) {
									sb.append("\t");
								}
								sb.append("}");
							}

						}

						public static class Subcarrier16Khz implements BerType, Serializable {

							private static final long serialVersionUID = 1L;

							public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

							public byte[] code = null;
							private BerInteger subcarrierNominalFrequency = null;
							private BerInteger nominalSymbolRate = null;
							
							public Subcarrier16Khz() {
							}

							public Subcarrier16Khz(byte[] code) {
								this.code = code;
							}

							public void setSubcarrierNominalFrequency(BerInteger subcarrierNominalFrequency) {
								this.subcarrierNominalFrequency = subcarrierNominalFrequency;
							}

							public BerInteger getSubcarrierNominalFrequency() {
								return subcarrierNominalFrequency;
							}

							public void setNominalSymbolRate(BerInteger nominalSymbolRate) {
								this.nominalSymbolRate = nominalSymbolRate;
							}

							public BerInteger getNominalSymbolRate() {
								return nominalSymbolRate;
							}

							public int encode(OutputStream reverseOS) throws IOException {
								return encode(reverseOS, true);
							}

							public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

								if (code != null) {
									for (int i = code.length - 1; i >= 0; i--) {
										reverseOS.write(code[i]);
									}
									if (withTag) {
										return tag.encode(reverseOS) + code.length;
									}
									return code.length;
								}

								int codeLength = 0;
								codeLength += nominalSymbolRate.encode(reverseOS, true);
								
								codeLength += subcarrierNominalFrequency.encode(reverseOS, true);
								
								codeLength += BerLength.encodeLength(reverseOS, codeLength);

								if (withTag) {
									codeLength += tag.encode(reverseOS);
								}

								return codeLength;

							}

							public int decode(InputStream is) throws IOException {
								return decode(is, true);
							}

							public int decode(InputStream is, boolean withTag) throws IOException {
								int codeLength = 0;
								int subCodeLength = 0;
								BerTag berTag = new BerTag();

								if (withTag) {
									codeLength += tag.decodeAndCheck(is);
								}

								BerLength length = new BerLength();
								codeLength += length.decode(is);

								int totalLength = length.val;
								codeLength += totalLength;

								subCodeLength += berTag.decode(is);
								if (berTag.equals(BerInteger.tag)) {
									subcarrierNominalFrequency = new BerInteger();
									subCodeLength += subcarrierNominalFrequency.decode(is, false);
									subCodeLength += berTag.decode(is);
								}
								else {
									throw new IOException("Tag does not match the mandatory sequence element tag.");
								}
								
								if (berTag.equals(BerInteger.tag)) {
									nominalSymbolRate = new BerInteger();
									subCodeLength += nominalSymbolRate.decode(is, false);
									if (subCodeLength == totalLength) {
										return codeLength;
									}
								}
								throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

								
							}

							public void encodeAndSave(int encodingSizeGuess) throws IOException {
								ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
								encode(reverseOS, false);
								code = reverseOS.getArray();
							}

							public String toString() {
								StringBuilder sb = new StringBuilder();
								appendAsString(sb, 0);
								return sb.toString();
							}

							public void appendAsString(StringBuilder sb, int indentLevel) {

								sb.append("{");
								sb.append("\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (subcarrierNominalFrequency != null) {
									sb.append("subcarrierNominalFrequency: ").append(subcarrierNominalFrequency);
								}
								else {
									sb.append("subcarrierNominalFrequency: <empty-required-field>");
								}
								
								sb.append(",\n");
								for (int i = 0; i < indentLevel + 1; i++) {
									sb.append("\t");
								}
								if (nominalSymbolRate != null) {
									sb.append("nominalSymbolRate: ").append(nominalSymbolRate);
								}
								else {
									sb.append("nominalSymbolRate: <empty-required-field>");
								}
								
								sb.append("\n");
								for (int i = 0; i < indentLevel; i++) {
									sb.append("\t");
								}
								sb.append("}");
							}

						}

						private Subcarrier8Khz subcarrier8Khz = null;
						private Subcarrier16Khz subcarrier16Khz = null;
						
						public SubcarrierFreqAndSymbolRate() {
						}

						public SubcarrierFreqAndSymbolRate(byte[] code) {
							this.code = code;
						}

						public void setSubcarrier8Khz(Subcarrier8Khz subcarrier8Khz) {
							this.subcarrier8Khz = subcarrier8Khz;
						}

						public Subcarrier8Khz getSubcarrier8Khz() {
							return subcarrier8Khz;
						}

						public void setSubcarrier16Khz(Subcarrier16Khz subcarrier16Khz) {
							this.subcarrier16Khz = subcarrier16Khz;
						}

						public Subcarrier16Khz getSubcarrier16Khz() {
							return subcarrier16Khz;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (subcarrier16Khz != null) {
								codeLength += subcarrier16Khz.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
								reverseOS.write(0xA1);
								codeLength += 1;
								return codeLength;
							}
							
							if (subcarrier8Khz != null) {
								codeLength += subcarrier8Khz.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
								reverseOS.write(0xA0);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
								subcarrier8Khz = new Subcarrier8Khz();
								codeLength += subcarrier8Khz.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
								subcarrier16Khz = new Subcarrier16Khz();
								codeLength += subcarrier16Khz.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (subcarrier8Khz != null) {
								sb.append("subcarrier8Khz: ");
								subcarrier8Khz.appendAsString(sb, indentLevel + 1);
								return;
							}

							if (subcarrier16Khz != null) {
								sb.append("subcarrier16Khz: ");
								subcarrier16Khz.appendAsString(sb, indentLevel + 1);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private SubcarrierFreqAndSymbolRate subcarrierFreqAndSymbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public Ccsds() {
					}

					public Ccsds(byte[] code) {
						this.code = code;
					}

					public void setSubcarrierFreqAndSymbolRate(SubcarrierFreqAndSymbolRate subcarrierFreqAndSymbolRate) {
						this.subcarrierFreqAndSymbolRate = subcarrierFreqAndSymbolRate;
					}

					public SubcarrierFreqAndSymbolRate getSubcarrierFreqAndSymbolRate() {
						return subcarrierFreqAndSymbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += subcarrierFreqAndSymbolRate.encode(reverseOS);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						subcarrierFreqAndSymbolRate = new SubcarrierFreqAndSymbolRate();
						subCodeLength += subcarrierFreqAndSymbolRate.decode(is, berTag);
						subCodeLength += berTag.decode(is);
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (subcarrierFreqAndSymbolRate != null) {
							sb.append("subcarrierFreqAndSymbolRate: ");
							subcarrierFreqAndSymbolRate.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("subcarrierFreqAndSymbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class NonCcsds implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static class NominalSymbolRate implements BerType, Serializable {

						private static final long serialVersionUID = 1L;

						public byte[] code = null;
						private BerInteger nonCoherent = null;
						private BerInteger coherent = null;
						
						public NominalSymbolRate() {
						}

						public NominalSymbolRate(byte[] code) {
							this.code = code;
						}

						public void setNonCoherent(BerInteger nonCoherent) {
							this.nonCoherent = nonCoherent;
						}

						public BerInteger getNonCoherent() {
							return nonCoherent;
						}

						public void setCoherent(BerInteger coherent) {
							this.coherent = coherent;
						}

						public BerInteger getCoherent() {
							return coherent;
						}

						public int encode(OutputStream reverseOS) throws IOException {

							if (code != null) {
								for (int i = code.length - 1; i >= 0; i--) {
									reverseOS.write(code[i]);
								}
								return code.length;
							}

							int codeLength = 0;
							if (coherent != null) {
								codeLength += coherent.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 1
								reverseOS.write(0x81);
								codeLength += 1;
								return codeLength;
							}
							
							if (nonCoherent != null) {
								codeLength += nonCoherent.encode(reverseOS, false);
								// write tag: CONTEXT_CLASS, PRIMITIVE, 0
								reverseOS.write(0x80);
								codeLength += 1;
								return codeLength;
							}
							
							throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
						}

						public int decode(InputStream is) throws IOException {
							return decode(is, null);
						}

						public int decode(InputStream is, BerTag berTag) throws IOException {

							int codeLength = 0;
							BerTag passedTag = berTag;

							if (berTag == null) {
								berTag = new BerTag();
								codeLength += berTag.decode(is);
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
								nonCoherent = new BerInteger();
								codeLength += nonCoherent.decode(is, false);
								return codeLength;
							}

							if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
								coherent = new BerInteger();
								codeLength += coherent.decode(is, false);
								return codeLength;
							}

							if (passedTag != null) {
								return 0;
							}

							throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
						}

						public void encodeAndSave(int encodingSizeGuess) throws IOException {
							ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
							encode(reverseOS);
							code = reverseOS.getArray();
						}

						public String toString() {
							StringBuilder sb = new StringBuilder();
							appendAsString(sb, 0);
							return sb.toString();
						}

						public void appendAsString(StringBuilder sb, int indentLevel) {

							if (nonCoherent != null) {
								sb.append("nonCoherent: ").append(nonCoherent);
								return;
							}

							if (coherent != null) {
								sb.append("coherent: ").append(coherent);
								return;
							}

							sb.append("<none>");
						}

					}

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger nominalSubcarrierFrequency = null;
					private NominalSymbolRate nominalSymbolRate = null;
					private PcmFormat pcmFormat = null;
					
					public NonCcsds() {
					}

					public NonCcsds(byte[] code) {
						this.code = code;
					}

					public void setNominalSubcarrierFrequency(BerInteger nominalSubcarrierFrequency) {
						this.nominalSubcarrierFrequency = nominalSubcarrierFrequency;
					}

					public BerInteger getNominalSubcarrierFrequency() {
						return nominalSubcarrierFrequency;
					}

					public void setNominalSymbolRate(NominalSymbolRate nominalSymbolRate) {
						this.nominalSymbolRate = nominalSymbolRate;
					}

					public NominalSymbolRate getNominalSymbolRate() {
						return nominalSymbolRate;
					}

					public void setPcmFormat(PcmFormat pcmFormat) {
						this.pcmFormat = pcmFormat;
					}

					public PcmFormat getPcmFormat() {
						return pcmFormat;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += pcmFormat.encode(reverseOS, true);
						
						codeLength += nominalSymbolRate.encode(reverseOS);
						
						codeLength += nominalSubcarrierFrequency.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							nominalSubcarrierFrequency = new BerInteger();
							subCodeLength += nominalSubcarrierFrequency.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						nominalSymbolRate = new NominalSymbolRate();
						subCodeLength += nominalSymbolRate.decode(is, berTag);
						subCodeLength += berTag.decode(is);
						
						if (berTag.equals(PcmFormat.tag)) {
							pcmFormat = new PcmFormat();
							subCodeLength += pcmFormat.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (nominalSubcarrierFrequency != null) {
							sb.append("nominalSubcarrierFrequency: ").append(nominalSubcarrierFrequency);
						}
						else {
							sb.append("nominalSubcarrierFrequency: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (nominalSymbolRate != null) {
							sb.append("nominalSymbolRate: ");
							nominalSymbolRate.appendAsString(sb, indentLevel + 1);
						}
						else {
							sb.append("nominalSymbolRate: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (pcmFormat != null) {
							sb.append("pcmFormat: ").append(pcmFormat);
						}
						else {
							sb.append("pcmFormat: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private Ccsds ccsds = null;
				private NonCcsds nonCcsds = null;
				
				public SubcarrierFreqSymbolRateAndPcmFormat() {
				}

				public SubcarrierFreqSymbolRateAndPcmFormat(byte[] code) {
					this.code = code;
				}

				public void setCcsds(Ccsds ccsds) {
					this.ccsds = ccsds;
				}

				public Ccsds getCcsds() {
					return ccsds;
				}

				public void setNonCcsds(NonCcsds nonCcsds) {
					this.nonCcsds = nonCcsds;
				}

				public NonCcsds getNonCcsds() {
					return nonCcsds;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (nonCcsds != null) {
						codeLength += nonCcsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (ccsds != null) {
						codeLength += ccsds.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						ccsds = new Ccsds();
						codeLength += ccsds.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						nonCcsds = new NonCcsds();
						codeLength += nonCcsds.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (ccsds != null) {
						sb.append("ccsds: ");
						ccsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (nonCcsds != null) {
						sb.append("nonCcsds: ");
						nonCcsds.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private SubcarrierFreqSymbolRateAndPcmFormat subcarrierFreqSymbolRateAndPcmFormat = null;
			private BerInteger subcarrierModIndex = null;
			
			public Subcarrier() {
			}

			public Subcarrier(byte[] code) {
				this.code = code;
			}

			public void setSubcarrierFreqSymbolRateAndPcmFormat(SubcarrierFreqSymbolRateAndPcmFormat subcarrierFreqSymbolRateAndPcmFormat) {
				this.subcarrierFreqSymbolRateAndPcmFormat = subcarrierFreqSymbolRateAndPcmFormat;
			}

			public SubcarrierFreqSymbolRateAndPcmFormat getSubcarrierFreqSymbolRateAndPcmFormat() {
				return subcarrierFreqSymbolRateAndPcmFormat;
			}

			public void setSubcarrierModIndex(BerInteger subcarrierModIndex) {
				this.subcarrierModIndex = subcarrierModIndex;
			}

			public BerInteger getSubcarrierModIndex() {
				return subcarrierModIndex;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += subcarrierModIndex.encode(reverseOS, true);
				
				codeLength += subcarrierFreqSymbolRateAndPcmFormat.encode(reverseOS);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				subcarrierFreqSymbolRateAndPcmFormat = new SubcarrierFreqSymbolRateAndPcmFormat();
				subCodeLength += subcarrierFreqSymbolRateAndPcmFormat.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(BerInteger.tag)) {
					subcarrierModIndex = new BerInteger();
					subCodeLength += subcarrierModIndex.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierFreqSymbolRateAndPcmFormat != null) {
					sb.append("subcarrierFreqSymbolRateAndPcmFormat: ");
					subcarrierFreqSymbolRateAndPcmFormat.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("subcarrierFreqSymbolRateAndPcmFormat: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (subcarrierModIndex != null) {
					sb.append("subcarrierModIndex: ").append(subcarrierModIndex);
				}
				else {
					sb.append("subcarrierModIndex: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private Bpsk bpsk = null;
		private Direct direct = null;
		private Subcarrier subcarrier = null;
		
		public ModType() {
		}

		public ModType(byte[] code) {
			this.code = code;
		}

		public void setBpsk(Bpsk bpsk) {
			this.bpsk = bpsk;
		}

		public Bpsk getBpsk() {
			return bpsk;
		}

		public void setDirect(Direct direct) {
			this.direct = direct;
		}

		public Direct getDirect() {
			return direct;
		}

		public void setSubcarrier(Subcarrier subcarrier) {
			this.subcarrier = subcarrier;
		}

		public Subcarrier getSubcarrier() {
			return subcarrier;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (subcarrier != null) {
				codeLength += subcarrier.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
				reverseOS.write(0xA2);
				codeLength += 1;
				return codeLength;
			}
			
			if (direct != null) {
				codeLength += direct.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (bpsk != null) {
				codeLength += bpsk.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				bpsk = new Bpsk();
				codeLength += bpsk.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				direct = new Direct();
				codeLength += direct.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
				subcarrier = new Subcarrier();
				codeLength += subcarrier.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (bpsk != null) {
				sb.append("bpsk: ");
				bpsk.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (direct != null) {
				sb.append("direct: ");
				direct.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (subcarrier != null) {
				sb.append("subcarrier: ");
				subcarrier.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SymbolRateDopplerCompensation symbolRateDopplerCompensation = null;
	private ModType modType = null;
	
	public Ccsds401CarrierXmitSymbolStreamModType() {
	}

	public Ccsds401CarrierXmitSymbolStreamModType(byte[] code) {
		this.code = code;
	}

	public void setSymbolRateDopplerCompensation(SymbolRateDopplerCompensation symbolRateDopplerCompensation) {
		this.symbolRateDopplerCompensation = symbolRateDopplerCompensation;
	}

	public SymbolRateDopplerCompensation getSymbolRateDopplerCompensation() {
		return symbolRateDopplerCompensation;
	}

	public void setModType(ModType modType) {
		this.modType = modType;
	}

	public ModType getModType() {
		return modType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += modType.encode(reverseOS);
		
		codeLength += symbolRateDopplerCompensation.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		symbolRateDopplerCompensation = new SymbolRateDopplerCompensation();
		subCodeLength += symbolRateDopplerCompensation.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		modType = new ModType();
		subCodeLength += modType.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (symbolRateDopplerCompensation != null) {
			sb.append("symbolRateDopplerCompensation: ");
			symbolRateDopplerCompensation.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("symbolRateDopplerCompensation: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (modType != null) {
			sb.append("modType: ");
			modType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("modType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

