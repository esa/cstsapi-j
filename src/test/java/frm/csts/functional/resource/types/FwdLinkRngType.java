/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class FwdLinkRngType implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class RngType implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class ToneCode implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private BerInteger toneFreq = null;
			private BerInteger rngCodeLength = null;
			private BerEnum toneWaveForm = null;
			private BerEnum dopplerCompensation = null;
			private BerInteger codeComponentXmitDuration = null;
			
			public ToneCode() {
			}

			public ToneCode(byte[] code) {
				this.code = code;
			}

			public void setToneFreq(BerInteger toneFreq) {
				this.toneFreq = toneFreq;
			}

			public BerInteger getToneFreq() {
				return toneFreq;
			}

			public void setRngCodeLength(BerInteger rngCodeLength) {
				this.rngCodeLength = rngCodeLength;
			}

			public BerInteger getRngCodeLength() {
				return rngCodeLength;
			}

			public void setToneWaveForm(BerEnum toneWaveForm) {
				this.toneWaveForm = toneWaveForm;
			}

			public BerEnum getToneWaveForm() {
				return toneWaveForm;
			}

			public void setDopplerCompensation(BerEnum dopplerCompensation) {
				this.dopplerCompensation = dopplerCompensation;
			}

			public BerEnum getDopplerCompensation() {
				return dopplerCompensation;
			}

			public void setCodeComponentXmitDuration(BerInteger codeComponentXmitDuration) {
				this.codeComponentXmitDuration = codeComponentXmitDuration;
			}

			public BerInteger getCodeComponentXmitDuration() {
				return codeComponentXmitDuration;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += codeComponentXmitDuration.encode(reverseOS, true);
				
				codeLength += dopplerCompensation.encode(reverseOS, true);
				
				codeLength += toneWaveForm.encode(reverseOS, true);
				
				codeLength += rngCodeLength.encode(reverseOS, true);
				
				codeLength += toneFreq.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(BerInteger.tag)) {
					toneFreq = new BerInteger();
					subCodeLength += toneFreq.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerInteger.tag)) {
					rngCodeLength = new BerInteger();
					subCodeLength += rngCodeLength.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerEnum.tag)) {
					toneWaveForm = new BerEnum();
					subCodeLength += toneWaveForm.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerEnum.tag)) {
					dopplerCompensation = new BerEnum();
					subCodeLength += dopplerCompensation.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				if (berTag.equals(BerInteger.tag)) {
					codeComponentXmitDuration = new BerInteger();
					subCodeLength += codeComponentXmitDuration.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (toneFreq != null) {
					sb.append("toneFreq: ").append(toneFreq);
				}
				else {
					sb.append("toneFreq: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (rngCodeLength != null) {
					sb.append("rngCodeLength: ").append(rngCodeLength);
				}
				else {
					sb.append("rngCodeLength: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (toneWaveForm != null) {
					sb.append("toneWaveForm: ").append(toneWaveForm);
				}
				else {
					sb.append("toneWaveForm: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (dopplerCompensation != null) {
					sb.append("dopplerCompensation: ").append(dopplerCompensation);
				}
				else {
					sb.append("dopplerCompensation: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeComponentXmitDuration != null) {
					sb.append("codeComponentXmitDuration: ").append(codeComponentXmitDuration);
				}
				else {
					sb.append("codeComponentXmitDuration: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static class PseudoNoise implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class ChipRate implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				public static class Iis2 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger i = null;
					private BerInteger k = null;
					
					public Iis2() {
					}

					public Iis2(byte[] code) {
						this.code = code;
					}

					public void setI(BerInteger i) {
						this.i = i;
					}

					public BerInteger getI() {
						return i;
					}

					public void setK(BerInteger k) {
						this.k = k;
					}

					public BerInteger getK() {
						return k;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += k.encode(reverseOS, true);
						
						codeLength += i.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							i = new BerInteger();
							subCodeLength += i.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							k = new BerInteger();
							subCodeLength += k.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (i != null) {
							sb.append("i: ").append(i);
						}
						else {
							sb.append("i: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (k != null) {
							sb.append("k: ").append(k);
						}
						else {
							sb.append("k: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				public static class Kis6 implements BerType, Serializable {

					private static final long serialVersionUID = 1L;

					public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

					public byte[] code = null;
					private BerInteger i = null;
					private BerInteger k = null;
					
					public Kis6() {
					}

					public Kis6(byte[] code) {
						this.code = code;
					}

					public void setI(BerInteger i) {
						this.i = i;
					}

					public BerInteger getI() {
						return i;
					}

					public void setK(BerInteger k) {
						this.k = k;
					}

					public BerInteger getK() {
						return k;
					}

					public int encode(OutputStream reverseOS) throws IOException {
						return encode(reverseOS, true);
					}

					public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

						if (code != null) {
							for (int i = code.length - 1; i >= 0; i--) {
								reverseOS.write(code[i]);
							}
							if (withTag) {
								return tag.encode(reverseOS) + code.length;
							}
							return code.length;
						}

						int codeLength = 0;
						codeLength += k.encode(reverseOS, true);
						
						codeLength += i.encode(reverseOS, true);
						
						codeLength += BerLength.encodeLength(reverseOS, codeLength);

						if (withTag) {
							codeLength += tag.encode(reverseOS);
						}

						return codeLength;

					}

					public int decode(InputStream is) throws IOException {
						return decode(is, true);
					}

					public int decode(InputStream is, boolean withTag) throws IOException {
						int codeLength = 0;
						int subCodeLength = 0;
						BerTag berTag = new BerTag();

						if (withTag) {
							codeLength += tag.decodeAndCheck(is);
						}

						BerLength length = new BerLength();
						codeLength += length.decode(is);

						int totalLength = length.val;
						codeLength += totalLength;

						subCodeLength += berTag.decode(is);
						if (berTag.equals(BerInteger.tag)) {
							i = new BerInteger();
							subCodeLength += i.decode(is, false);
							subCodeLength += berTag.decode(is);
						}
						else {
							throw new IOException("Tag does not match the mandatory sequence element tag.");
						}
						
						if (berTag.equals(BerInteger.tag)) {
							k = new BerInteger();
							subCodeLength += k.decode(is, false);
							if (subCodeLength == totalLength) {
								return codeLength;
							}
						}
						throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

						
					}

					public void encodeAndSave(int encodingSizeGuess) throws IOException {
						ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
						encode(reverseOS, false);
						code = reverseOS.getArray();
					}

					public String toString() {
						StringBuilder sb = new StringBuilder();
						appendAsString(sb, 0);
						return sb.toString();
					}

					public void appendAsString(StringBuilder sb, int indentLevel) {

						sb.append("{");
						sb.append("\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (i != null) {
							sb.append("i: ").append(i);
						}
						else {
							sb.append("i: <empty-required-field>");
						}
						
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						if (k != null) {
							sb.append("k: ").append(k);
						}
						else {
							sb.append("k: <empty-required-field>");
						}
						
						sb.append("\n");
						for (int i = 0; i < indentLevel; i++) {
							sb.append("\t");
						}
						sb.append("}");
					}

				}

				private Iis2 iis2 = null;
				private Kis6 kis6 = null;
				
				public ChipRate() {
				}

				public ChipRate(byte[] code) {
					this.code = code;
				}

				public void setIis2(Iis2 iis2) {
					this.iis2 = iis2;
				}

				public Iis2 getIis2() {
					return iis2;
				}

				public void setKis6(Kis6 kis6) {
					this.kis6 = kis6;
				}

				public Kis6 getKis6() {
					return kis6;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					if (kis6 != null) {
						codeLength += kis6.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (iis2 != null) {
						codeLength += iis2.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						iis2 = new Iis2();
						codeLength += iis2.decode(is, false);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						kis6 = new Kis6();
						codeLength += kis6.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (iis2 != null) {
						sb.append("iis2: ");
						iis2.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (kis6 != null) {
						sb.append("kis6: ");
						kis6.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private ChipRate chipRate = null;
			private BerEnum codeType = null;
			
			public PseudoNoise() {
			}

			public PseudoNoise(byte[] code) {
				this.code = code;
			}

			public void setChipRate(ChipRate chipRate) {
				this.chipRate = chipRate;
			}

			public ChipRate getChipRate() {
				return chipRate;
			}

			public void setCodeType(BerEnum codeType) {
				this.codeType = codeType;
			}

			public BerEnum getCodeType() {
				return codeType;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += codeType.encode(reverseOS, true);
				
				codeLength += chipRate.encode(reverseOS);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				chipRate = new ChipRate();
				subCodeLength += chipRate.decode(is, berTag);
				subCodeLength += berTag.decode(is);
				
				if (berTag.equals(BerEnum.tag)) {
					codeType = new BerEnum();
					subCodeLength += codeType.decode(is, false);
					if (subCodeLength == totalLength) {
						return codeLength;
					}
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (chipRate != null) {
					sb.append("chipRate: ");
					chipRate.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("chipRate: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (codeType != null) {
					sb.append("codeType: ").append(codeType);
				}
				else {
					sb.append("codeType: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private ToneCode toneCode = null;
		private PseudoNoise pseudoNoise = null;
		
		public RngType() {
		}

		public RngType(byte[] code) {
			this.code = code;
		}

		public void setToneCode(ToneCode toneCode) {
			this.toneCode = toneCode;
		}

		public ToneCode getToneCode() {
			return toneCode;
		}

		public void setPseudoNoise(PseudoNoise pseudoNoise) {
			this.pseudoNoise = pseudoNoise;
		}

		public PseudoNoise getPseudoNoise() {
			return pseudoNoise;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (pseudoNoise != null) {
				codeLength += pseudoNoise.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (toneCode != null) {
				codeLength += toneCode.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
				reverseOS.write(0xA0);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
				toneCode = new ToneCode();
				codeLength += toneCode.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				pseudoNoise = new PseudoNoise();
				codeLength += pseudoNoise.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (toneCode != null) {
				sb.append("toneCode: ");
				toneCode.appendAsString(sb, indentLevel + 1);
				return;
			}

			if (pseudoNoise != null) {
				sb.append("pseudoNoise: ");
				pseudoNoise.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private BerEnum dopplerCompensation = null;
	private RngType rngType = null;
	
	public FwdLinkRngType() {
	}

	public FwdLinkRngType(byte[] code) {
		this.code = code;
	}

	public void setDopplerCompensation(BerEnum dopplerCompensation) {
		this.dopplerCompensation = dopplerCompensation;
	}

	public BerEnum getDopplerCompensation() {
		return dopplerCompensation;
	}

	public void setRngType(RngType rngType) {
		this.rngType = rngType;
	}

	public RngType getRngType() {
		return rngType;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += rngType.encode(reverseOS);
		
		codeLength += dopplerCompensation.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerEnum.tag)) {
			dopplerCompensation = new BerEnum();
			subCodeLength += dopplerCompensation.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		rngType = new RngType();
		subCodeLength += rngType.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dopplerCompensation != null) {
			sb.append("dopplerCompensation: ").append(dopplerCompensation);
		}
		else {
			sb.append("dopplerCompensation: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (rngType != null) {
			sb.append("rngType: ");
			rngType.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("rngType: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

