/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class CfdpLocalEntityConfiguration implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class CfdpLocalRoutingInformation implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<BerInteger> seqOf = null;

		public CfdpLocalRoutingInformation() {
			seqOf = new ArrayList<BerInteger>();
		}

		public CfdpLocalRoutingInformation(byte[] code) {
			this.code = code;
		}

		public List<BerInteger> getBerInteger() {
			if (seqOf == null) {
				seqOf = new ArrayList<BerInteger>();
			}
			return seqOf;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(reverseOS, true);
			}

			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				BerInteger element = new BerInteger();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BerInteger> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private TcLinkStat cfdpLocalEofSentIndicationRequired = null;
	private TcLinkStat cfdpLocalRecvIndicationRequired = null;
	private TcLinkStat cfdpLocalFileSegmentRecvdIndicationRequired = null;
	private TcLinkStat cfdpLocalTransactionFinishedIndicationRequired = null;
	private TcLinkStat cfdpLocalSuspendedIndicationRequired = null;
	private TcLinkStat cfdpLocalResumedIndicationRequired = null;
	private CfdpFaultHandler cfdpLocalPositiveAckLimitReachedFaultHandler = null;
	private CfdpFaultHandler cfdpLocalKeepAliveLimitFaultHandler = null;
	private CfdpFaultHandler cfdpLocalInvalidTransmissionModeFaultHandler = null;
	private CfdpFaultHandler cfdpLocalFilestoreRejectionFaultHandler = null;
	private CfdpFaultHandler cfdpLocalFileChecksumFailureFaultHandler = null;
	private CfdpFaultHandler cfdpLocalFileSizeErrorFaultHandler = null;
	private CfdpFaultHandler cfdpLocalNakLimitReachedFaultHandler = null;
	private CfdpFaultHandler cfdpLocalInactivityDetectedFaultHandler = null;
	private CfdpFaultHandler cfdpLocalInvalidFileStructureFaultHandler = null;
	private CfdpFaultHandler cfdpLocalCheckLimitReachedFaultHandler = null;
	private CfdpLocalRoutingInformation cfdpLocalRoutingInformation = null;
	
	public CfdpLocalEntityConfiguration() {
	}

	public CfdpLocalEntityConfiguration(byte[] code) {
		this.code = code;
	}

	public void setCfdpLocalEofSentIndicationRequired(TcLinkStat cfdpLocalEofSentIndicationRequired) {
		this.cfdpLocalEofSentIndicationRequired = cfdpLocalEofSentIndicationRequired;
	}

	public TcLinkStat getCfdpLocalEofSentIndicationRequired() {
		return cfdpLocalEofSentIndicationRequired;
	}

	public void setCfdpLocalRecvIndicationRequired(TcLinkStat cfdpLocalRecvIndicationRequired) {
		this.cfdpLocalRecvIndicationRequired = cfdpLocalRecvIndicationRequired;
	}

	public TcLinkStat getCfdpLocalRecvIndicationRequired() {
		return cfdpLocalRecvIndicationRequired;
	}

	public void setCfdpLocalFileSegmentRecvdIndicationRequired(TcLinkStat cfdpLocalFileSegmentRecvdIndicationRequired) {
		this.cfdpLocalFileSegmentRecvdIndicationRequired = cfdpLocalFileSegmentRecvdIndicationRequired;
	}

	public TcLinkStat getCfdpLocalFileSegmentRecvdIndicationRequired() {
		return cfdpLocalFileSegmentRecvdIndicationRequired;
	}

	public void setCfdpLocalTransactionFinishedIndicationRequired(TcLinkStat cfdpLocalTransactionFinishedIndicationRequired) {
		this.cfdpLocalTransactionFinishedIndicationRequired = cfdpLocalTransactionFinishedIndicationRequired;
	}

	public TcLinkStat getCfdpLocalTransactionFinishedIndicationRequired() {
		return cfdpLocalTransactionFinishedIndicationRequired;
	}

	public void setCfdpLocalSuspendedIndicationRequired(TcLinkStat cfdpLocalSuspendedIndicationRequired) {
		this.cfdpLocalSuspendedIndicationRequired = cfdpLocalSuspendedIndicationRequired;
	}

	public TcLinkStat getCfdpLocalSuspendedIndicationRequired() {
		return cfdpLocalSuspendedIndicationRequired;
	}

	public void setCfdpLocalResumedIndicationRequired(TcLinkStat cfdpLocalResumedIndicationRequired) {
		this.cfdpLocalResumedIndicationRequired = cfdpLocalResumedIndicationRequired;
	}

	public TcLinkStat getCfdpLocalResumedIndicationRequired() {
		return cfdpLocalResumedIndicationRequired;
	}

	public void setCfdpLocalPositiveAckLimitReachedFaultHandler(CfdpFaultHandler cfdpLocalPositiveAckLimitReachedFaultHandler) {
		this.cfdpLocalPositiveAckLimitReachedFaultHandler = cfdpLocalPositiveAckLimitReachedFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalPositiveAckLimitReachedFaultHandler() {
		return cfdpLocalPositiveAckLimitReachedFaultHandler;
	}

	public void setCfdpLocalKeepAliveLimitFaultHandler(CfdpFaultHandler cfdpLocalKeepAliveLimitFaultHandler) {
		this.cfdpLocalKeepAliveLimitFaultHandler = cfdpLocalKeepAliveLimitFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalKeepAliveLimitFaultHandler() {
		return cfdpLocalKeepAliveLimitFaultHandler;
	}

	public void setCfdpLocalInvalidTransmissionModeFaultHandler(CfdpFaultHandler cfdpLocalInvalidTransmissionModeFaultHandler) {
		this.cfdpLocalInvalidTransmissionModeFaultHandler = cfdpLocalInvalidTransmissionModeFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalInvalidTransmissionModeFaultHandler() {
		return cfdpLocalInvalidTransmissionModeFaultHandler;
	}

	public void setCfdpLocalFilestoreRejectionFaultHandler(CfdpFaultHandler cfdpLocalFilestoreRejectionFaultHandler) {
		this.cfdpLocalFilestoreRejectionFaultHandler = cfdpLocalFilestoreRejectionFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalFilestoreRejectionFaultHandler() {
		return cfdpLocalFilestoreRejectionFaultHandler;
	}

	public void setCfdpLocalFileChecksumFailureFaultHandler(CfdpFaultHandler cfdpLocalFileChecksumFailureFaultHandler) {
		this.cfdpLocalFileChecksumFailureFaultHandler = cfdpLocalFileChecksumFailureFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalFileChecksumFailureFaultHandler() {
		return cfdpLocalFileChecksumFailureFaultHandler;
	}

	public void setCfdpLocalFileSizeErrorFaultHandler(CfdpFaultHandler cfdpLocalFileSizeErrorFaultHandler) {
		this.cfdpLocalFileSizeErrorFaultHandler = cfdpLocalFileSizeErrorFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalFileSizeErrorFaultHandler() {
		return cfdpLocalFileSizeErrorFaultHandler;
	}

	public void setCfdpLocalNakLimitReachedFaultHandler(CfdpFaultHandler cfdpLocalNakLimitReachedFaultHandler) {
		this.cfdpLocalNakLimitReachedFaultHandler = cfdpLocalNakLimitReachedFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalNakLimitReachedFaultHandler() {
		return cfdpLocalNakLimitReachedFaultHandler;
	}

	public void setCfdpLocalInactivityDetectedFaultHandler(CfdpFaultHandler cfdpLocalInactivityDetectedFaultHandler) {
		this.cfdpLocalInactivityDetectedFaultHandler = cfdpLocalInactivityDetectedFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalInactivityDetectedFaultHandler() {
		return cfdpLocalInactivityDetectedFaultHandler;
	}

	public void setCfdpLocalInvalidFileStructureFaultHandler(CfdpFaultHandler cfdpLocalInvalidFileStructureFaultHandler) {
		this.cfdpLocalInvalidFileStructureFaultHandler = cfdpLocalInvalidFileStructureFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalInvalidFileStructureFaultHandler() {
		return cfdpLocalInvalidFileStructureFaultHandler;
	}

	public void setCfdpLocalCheckLimitReachedFaultHandler(CfdpFaultHandler cfdpLocalCheckLimitReachedFaultHandler) {
		this.cfdpLocalCheckLimitReachedFaultHandler = cfdpLocalCheckLimitReachedFaultHandler;
	}

	public CfdpFaultHandler getCfdpLocalCheckLimitReachedFaultHandler() {
		return cfdpLocalCheckLimitReachedFaultHandler;
	}

	public void setCfdpLocalRoutingInformation(CfdpLocalRoutingInformation cfdpLocalRoutingInformation) {
		this.cfdpLocalRoutingInformation = cfdpLocalRoutingInformation;
	}

	public CfdpLocalRoutingInformation getCfdpLocalRoutingInformation() {
		return cfdpLocalRoutingInformation;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += cfdpLocalRoutingInformation.encode(reverseOS, true);
		
		codeLength += cfdpLocalCheckLimitReachedFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalInvalidFileStructureFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalInactivityDetectedFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalNakLimitReachedFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalFileSizeErrorFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalFileChecksumFailureFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalFilestoreRejectionFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalInvalidTransmissionModeFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalKeepAliveLimitFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalPositiveAckLimitReachedFaultHandler.encode(reverseOS, true);
		
		codeLength += cfdpLocalResumedIndicationRequired.encode(reverseOS, true);
		
		codeLength += cfdpLocalSuspendedIndicationRequired.encode(reverseOS, true);
		
		codeLength += cfdpLocalTransactionFinishedIndicationRequired.encode(reverseOS, true);
		
		codeLength += cfdpLocalFileSegmentRecvdIndicationRequired.encode(reverseOS, true);
		
		codeLength += cfdpLocalRecvIndicationRequired.encode(reverseOS, true);
		
		codeLength += cfdpLocalEofSentIndicationRequired.encode(reverseOS, true);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalEofSentIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalEofSentIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalRecvIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalRecvIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalFileSegmentRecvdIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalFileSegmentRecvdIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalTransactionFinishedIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalTransactionFinishedIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalSuspendedIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalSuspendedIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(TcLinkStat.tag)) {
			cfdpLocalResumedIndicationRequired = new TcLinkStat();
			subCodeLength += cfdpLocalResumedIndicationRequired.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalPositiveAckLimitReachedFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalPositiveAckLimitReachedFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalKeepAliveLimitFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalKeepAliveLimitFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalInvalidTransmissionModeFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalInvalidTransmissionModeFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalFilestoreRejectionFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalFilestoreRejectionFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalFileChecksumFailureFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalFileChecksumFailureFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalFileSizeErrorFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalFileSizeErrorFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalNakLimitReachedFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalNakLimitReachedFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalInactivityDetectedFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalInactivityDetectedFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalInvalidFileStructureFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalInvalidFileStructureFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpFaultHandler.tag)) {
			cfdpLocalCheckLimitReachedFaultHandler = new CfdpFaultHandler();
			subCodeLength += cfdpLocalCheckLimitReachedFaultHandler.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(CfdpLocalRoutingInformation.tag)) {
			cfdpLocalRoutingInformation = new CfdpLocalRoutingInformation();
			subCodeLength += cfdpLocalRoutingInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalEofSentIndicationRequired != null) {
			sb.append("cfdpLocalEofSentIndicationRequired: ").append(cfdpLocalEofSentIndicationRequired);
		}
		else {
			sb.append("cfdpLocalEofSentIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalRecvIndicationRequired != null) {
			sb.append("cfdpLocalRecvIndicationRequired: ").append(cfdpLocalRecvIndicationRequired);
		}
		else {
			sb.append("cfdpLocalRecvIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalFileSegmentRecvdIndicationRequired != null) {
			sb.append("cfdpLocalFileSegmentRecvdIndicationRequired: ").append(cfdpLocalFileSegmentRecvdIndicationRequired);
		}
		else {
			sb.append("cfdpLocalFileSegmentRecvdIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalTransactionFinishedIndicationRequired != null) {
			sb.append("cfdpLocalTransactionFinishedIndicationRequired: ").append(cfdpLocalTransactionFinishedIndicationRequired);
		}
		else {
			sb.append("cfdpLocalTransactionFinishedIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalSuspendedIndicationRequired != null) {
			sb.append("cfdpLocalSuspendedIndicationRequired: ").append(cfdpLocalSuspendedIndicationRequired);
		}
		else {
			sb.append("cfdpLocalSuspendedIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalResumedIndicationRequired != null) {
			sb.append("cfdpLocalResumedIndicationRequired: ").append(cfdpLocalResumedIndicationRequired);
		}
		else {
			sb.append("cfdpLocalResumedIndicationRequired: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalPositiveAckLimitReachedFaultHandler != null) {
			sb.append("cfdpLocalPositiveAckLimitReachedFaultHandler: ").append(cfdpLocalPositiveAckLimitReachedFaultHandler);
		}
		else {
			sb.append("cfdpLocalPositiveAckLimitReachedFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalKeepAliveLimitFaultHandler != null) {
			sb.append("cfdpLocalKeepAliveLimitFaultHandler: ").append(cfdpLocalKeepAliveLimitFaultHandler);
		}
		else {
			sb.append("cfdpLocalKeepAliveLimitFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalInvalidTransmissionModeFaultHandler != null) {
			sb.append("cfdpLocalInvalidTransmissionModeFaultHandler: ").append(cfdpLocalInvalidTransmissionModeFaultHandler);
		}
		else {
			sb.append("cfdpLocalInvalidTransmissionModeFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalFilestoreRejectionFaultHandler != null) {
			sb.append("cfdpLocalFilestoreRejectionFaultHandler: ").append(cfdpLocalFilestoreRejectionFaultHandler);
		}
		else {
			sb.append("cfdpLocalFilestoreRejectionFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalFileChecksumFailureFaultHandler != null) {
			sb.append("cfdpLocalFileChecksumFailureFaultHandler: ").append(cfdpLocalFileChecksumFailureFaultHandler);
		}
		else {
			sb.append("cfdpLocalFileChecksumFailureFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalFileSizeErrorFaultHandler != null) {
			sb.append("cfdpLocalFileSizeErrorFaultHandler: ").append(cfdpLocalFileSizeErrorFaultHandler);
		}
		else {
			sb.append("cfdpLocalFileSizeErrorFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalNakLimitReachedFaultHandler != null) {
			sb.append("cfdpLocalNakLimitReachedFaultHandler: ").append(cfdpLocalNakLimitReachedFaultHandler);
		}
		else {
			sb.append("cfdpLocalNakLimitReachedFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalInactivityDetectedFaultHandler != null) {
			sb.append("cfdpLocalInactivityDetectedFaultHandler: ").append(cfdpLocalInactivityDetectedFaultHandler);
		}
		else {
			sb.append("cfdpLocalInactivityDetectedFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalInvalidFileStructureFaultHandler != null) {
			sb.append("cfdpLocalInvalidFileStructureFaultHandler: ").append(cfdpLocalInvalidFileStructureFaultHandler);
		}
		else {
			sb.append("cfdpLocalInvalidFileStructureFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalCheckLimitReachedFaultHandler != null) {
			sb.append("cfdpLocalCheckLimitReachedFaultHandler: ").append(cfdpLocalCheckLimitReachedFaultHandler);
		}
		else {
			sb.append("cfdpLocalCheckLimitReachedFaultHandler: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cfdpLocalRoutingInformation != null) {
			sb.append("cfdpLocalRoutingInformation: ");
			cfdpLocalRoutingInformation.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cfdpLocalRoutingInformation: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

