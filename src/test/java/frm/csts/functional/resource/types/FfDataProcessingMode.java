/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class FfDataProcessingMode implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static class BufferedData implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum dataTransferMode = null;
		private LongIntPos maxFwdBufferSize = null;
		private LongIntPos processingLatencyLimit = null;
		
		public BufferedData() {
		}

		public BufferedData(byte[] code) {
			this.code = code;
		}

		public void setDataTransferMode(BerEnum dataTransferMode) {
			this.dataTransferMode = dataTransferMode;
		}

		public BerEnum getDataTransferMode() {
			return dataTransferMode;
		}

		public void setMaxFwdBufferSize(LongIntPos maxFwdBufferSize) {
			this.maxFwdBufferSize = maxFwdBufferSize;
		}

		public LongIntPos getMaxFwdBufferSize() {
			return maxFwdBufferSize;
		}

		public void setProcessingLatencyLimit(LongIntPos processingLatencyLimit) {
			this.processingLatencyLimit = processingLatencyLimit;
		}

		public LongIntPos getProcessingLatencyLimit() {
			return processingLatencyLimit;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += processingLatencyLimit.encode(reverseOS, true);
			
			codeLength += maxFwdBufferSize.encode(reverseOS, true);
			
			codeLength += dataTransferMode.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerEnum.tag)) {
				dataTransferMode = new BerEnum();
				subCodeLength += dataTransferMode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(LongIntPos.tag)) {
				maxFwdBufferSize = new LongIntPos();
				subCodeLength += maxFwdBufferSize.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(LongIntPos.tag)) {
				processingLatencyLimit = new LongIntPos();
				subCodeLength += processingLatencyLimit.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (dataTransferMode != null) {
				sb.append("dataTransferMode: ").append(dataTransferMode);
			}
			else {
				sb.append("dataTransferMode: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (maxFwdBufferSize != null) {
				sb.append("maxFwdBufferSize: ").append(maxFwdBufferSize);
			}
			else {
				sb.append("maxFwdBufferSize: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (processingLatencyLimit != null) {
				sb.append("processingLatencyLimit: ").append(processingLatencyLimit);
			}
			else {
				sb.append("processingLatencyLimit: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	private BerNull sequenceControlled = null;
	private BufferedData bufferedData = null;
	
	public FfDataProcessingMode() {
	}

	public FfDataProcessingMode(byte[] code) {
		this.code = code;
	}

	public void setSequenceControlled(BerNull sequenceControlled) {
		this.sequenceControlled = sequenceControlled;
	}

	public BerNull getSequenceControlled() {
		return sequenceControlled;
	}

	public void setBufferedData(BufferedData bufferedData) {
		this.bufferedData = bufferedData;
	}

	public BufferedData getBufferedData() {
		return bufferedData;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (bufferedData != null) {
			codeLength += bufferedData.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (sequenceControlled != null) {
			codeLength += sequenceControlled.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			sequenceControlled = new BerNull();
			codeLength += sequenceControlled.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			bufferedData = new BufferedData();
			codeLength += bufferedData.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (sequenceControlled != null) {
			sb.append("sequenceControlled: ").append(sequenceControlled);
			return;
		}

		if (bufferedData != null) {
			sb.append("bufferedData: ");
			bufferedData.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

