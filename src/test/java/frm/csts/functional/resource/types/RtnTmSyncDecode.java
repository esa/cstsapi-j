/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class RtnTmSyncDecode implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static class ReedSolomon implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum rsCorrectionCapabilty = null;
		private BerEnum rsInterleavingDepth = null;
		
		public ReedSolomon() {
		}

		public ReedSolomon(byte[] code) {
			this.code = code;
		}

		public void setRsCorrectionCapabilty(BerEnum rsCorrectionCapabilty) {
			this.rsCorrectionCapabilty = rsCorrectionCapabilty;
		}

		public BerEnum getRsCorrectionCapabilty() {
			return rsCorrectionCapabilty;
		}

		public void setRsInterleavingDepth(BerEnum rsInterleavingDepth) {
			this.rsInterleavingDepth = rsInterleavingDepth;
		}

		public BerEnum getRsInterleavingDepth() {
			return rsInterleavingDepth;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += rsInterleavingDepth.encode(reverseOS, true);
			
			codeLength += rsCorrectionCapabilty.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerEnum.tag)) {
				rsCorrectionCapabilty = new BerEnum();
				subCodeLength += rsCorrectionCapabilty.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerEnum.tag)) {
				rsInterleavingDepth = new BerEnum();
				subCodeLength += rsInterleavingDepth.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (rsCorrectionCapabilty != null) {
				sb.append("rsCorrectionCapabilty: ").append(rsCorrectionCapabilty);
			}
			else {
				sb.append("rsCorrectionCapabilty: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (rsInterleavingDepth != null) {
				sb.append("rsInterleavingDepth: ").append(rsInterleavingDepth);
			}
			else {
				sb.append("rsInterleavingDepth: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class Concatenated implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private BerEnum convolutional = null;
		private BerEnum rsCorrectionCapabilty = null;
		private BerEnum rsInterleavingDepth = null;
		
		public Concatenated() {
		}

		public Concatenated(byte[] code) {
			this.code = code;
		}

		public void setConvolutional(BerEnum convolutional) {
			this.convolutional = convolutional;
		}

		public BerEnum getConvolutional() {
			return convolutional;
		}

		public void setRsCorrectionCapabilty(BerEnum rsCorrectionCapabilty) {
			this.rsCorrectionCapabilty = rsCorrectionCapabilty;
		}

		public BerEnum getRsCorrectionCapabilty() {
			return rsCorrectionCapabilty;
		}

		public void setRsInterleavingDepth(BerEnum rsInterleavingDepth) {
			this.rsInterleavingDepth = rsInterleavingDepth;
		}

		public BerEnum getRsInterleavingDepth() {
			return rsInterleavingDepth;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += rsInterleavingDepth.encode(reverseOS, true);
			
			codeLength += rsCorrectionCapabilty.encode(reverseOS, true);
			
			codeLength += convolutional.encode(reverseOS, true);
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerEnum.tag)) {
				convolutional = new BerEnum();
				subCodeLength += convolutional.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerEnum.tag)) {
				rsCorrectionCapabilty = new BerEnum();
				subCodeLength += rsCorrectionCapabilty.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerEnum.tag)) {
				rsInterleavingDepth = new BerEnum();
				subCodeLength += rsInterleavingDepth.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (convolutional != null) {
				sb.append("convolutional: ").append(convolutional);
			}
			else {
				sb.append("convolutional: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (rsCorrectionCapabilty != null) {
				sb.append("rsCorrectionCapabilty: ").append(rsCorrectionCapabilty);
			}
			else {
				sb.append("rsCorrectionCapabilty: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (rsInterleavingDepth != null) {
				sb.append("rsInterleavingDepth: ").append(rsInterleavingDepth);
			}
			else {
				sb.append("rsInterleavingDepth: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	private BerNull noDecoding = null;
	private BerEnum convolutional = null;
	private ReedSolomon reedSolomon = null;
	private Concatenated concatenated = null;
	private BerEnum turbo = null;
	private BerEnum ldpc = null;
	
	public RtnTmSyncDecode() {
	}

	public RtnTmSyncDecode(byte[] code) {
		this.code = code;
	}

	public void setNoDecoding(BerNull noDecoding) {
		this.noDecoding = noDecoding;
	}

	public BerNull getNoDecoding() {
		return noDecoding;
	}

	public void setConvolutional(BerEnum convolutional) {
		this.convolutional = convolutional;
	}

	public BerEnum getConvolutional() {
		return convolutional;
	}

	public void setReedSolomon(ReedSolomon reedSolomon) {
		this.reedSolomon = reedSolomon;
	}

	public ReedSolomon getReedSolomon() {
		return reedSolomon;
	}

	public void setConcatenated(Concatenated concatenated) {
		this.concatenated = concatenated;
	}

	public Concatenated getConcatenated() {
		return concatenated;
	}

	public void setTurbo(BerEnum turbo) {
		this.turbo = turbo;
	}

	public BerEnum getTurbo() {
		return turbo;
	}

	public void setLdpc(BerEnum ldpc) {
		this.ldpc = ldpc;
	}

	public BerEnum getLdpc() {
		return ldpc;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (ldpc != null) {
			codeLength += ldpc.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			reverseOS.write(0x85);
			codeLength += 1;
			return codeLength;
		}
		
		if (turbo != null) {
			codeLength += turbo.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			reverseOS.write(0x84);
			codeLength += 1;
			return codeLength;
		}
		
		if (concatenated != null) {
			codeLength += concatenated.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
			return codeLength;
		}
		
		if (reedSolomon != null) {
			codeLength += reedSolomon.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (convolutional != null) {
			codeLength += convolutional.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (noDecoding != null) {
			codeLength += noDecoding.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			noDecoding = new BerNull();
			codeLength += noDecoding.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			convolutional = new BerEnum();
			codeLength += convolutional.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			reedSolomon = new ReedSolomon();
			codeLength += reedSolomon.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			concatenated = new Concatenated();
			codeLength += concatenated.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			turbo = new BerEnum();
			codeLength += turbo.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			ldpc = new BerEnum();
			codeLength += ldpc.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (noDecoding != null) {
			sb.append("noDecoding: ").append(noDecoding);
			return;
		}

		if (convolutional != null) {
			sb.append("convolutional: ").append(convolutional);
			return;
		}

		if (reedSolomon != null) {
			sb.append("reedSolomon: ");
			reedSolomon.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (concatenated != null) {
			sb.append("concatenated: ");
			concatenated.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (turbo != null) {
			sb.append("turbo: ").append(turbo);
			return;
		}

		if (ldpc != null) {
			sb.append("ldpc: ").append(ldpc);
			return;
		}

		sb.append("<none>");
	}

}

