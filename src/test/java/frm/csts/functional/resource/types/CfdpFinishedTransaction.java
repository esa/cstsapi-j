/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package frm.csts.functional.resource.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;


public class CfdpFinishedTransaction implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class FileStoreResponses implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private CfdpActionCode actionCode = null;
		private CfdpActionCode statusCode = null;
		private BerVisibleString firstFileName = null;
		private BerVisibleString secondFileName = null;
		private BerVisibleString fileStoreMessage = null;
		
		public FileStoreResponses() {
		}

		public FileStoreResponses(byte[] code) {
			this.code = code;
		}

		public void setActionCode(CfdpActionCode actionCode) {
			this.actionCode = actionCode;
		}

		public CfdpActionCode getActionCode() {
			return actionCode;
		}

		public void setStatusCode(CfdpActionCode statusCode) {
			this.statusCode = statusCode;
		}

		public CfdpActionCode getStatusCode() {
			return statusCode;
		}

		public void setFirstFileName(BerVisibleString firstFileName) {
			this.firstFileName = firstFileName;
		}

		public BerVisibleString getFirstFileName() {
			return firstFileName;
		}

		public void setSecondFileName(BerVisibleString secondFileName) {
			this.secondFileName = secondFileName;
		}

		public BerVisibleString getSecondFileName() {
			return secondFileName;
		}

		public void setFileStoreMessage(BerVisibleString fileStoreMessage) {
			this.fileStoreMessage = fileStoreMessage;
		}

		public BerVisibleString getFileStoreMessage() {
			return fileStoreMessage;
		}

		public int encode(OutputStream reverseOS) throws IOException {
			return encode(reverseOS, true);
		}

		public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				if (withTag) {
					return tag.encode(reverseOS) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			if (fileStoreMessage != null) {
				codeLength += fileStoreMessage.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 4
				reverseOS.write(0x84);
				codeLength += 1;
			}
			
			if (secondFileName != null) {
				codeLength += secondFileName.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 3
				reverseOS.write(0x83);
				codeLength += 1;
			}
			
			codeLength += firstFileName.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
			
			codeLength += statusCode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			
			codeLength += actionCode.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			reverseOS.write(0x80);
			codeLength += 1;
			
			codeLength += BerLength.encodeLength(reverseOS, codeLength);

			if (withTag) {
				codeLength += tag.encode(reverseOS);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				actionCode = new CfdpActionCode();
				subCodeLength += actionCode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				statusCode = new CfdpActionCode();
				subCodeLength += statusCode.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
				firstFileName = new BerVisibleString();
				subCodeLength += firstFileName.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
				secondFileName = new BerVisibleString();
				subCodeLength += secondFileName.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				subCodeLength += berTag.decode(is);
			}
			
			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
				fileStoreMessage = new BerVisibleString();
				subCodeLength += fileStoreMessage.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS, false);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (actionCode != null) {
				sb.append("actionCode: ").append(actionCode);
			}
			else {
				sb.append("actionCode: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (statusCode != null) {
				sb.append("statusCode: ").append(statusCode);
			}
			else {
				sb.append("statusCode: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (firstFileName != null) {
				sb.append("firstFileName: ").append(firstFileName);
			}
			else {
				sb.append("firstFileName: <empty-required-field>");
			}
			
			if (secondFileName != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("secondFileName: ").append(secondFileName);
			}
			
			if (fileStoreMessage != null) {
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				sb.append("fileStoreMessage: ").append(fileStoreMessage);
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CfdpTransactionIdType transactionId = null;
	private FileStoreResponses fileStoreResponses = null;
	private BerVisibleString statusReport = null;
	private CfdpConditionCodeType conditionCode = null;
	private BerEnum fileStatus = null;
	private BerEnum deliveryCode = null;
	
	public CfdpFinishedTransaction() {
	}

	public CfdpFinishedTransaction(byte[] code) {
		this.code = code;
	}

	public void setTransactionId(CfdpTransactionIdType transactionId) {
		this.transactionId = transactionId;
	}

	public CfdpTransactionIdType getTransactionId() {
		return transactionId;
	}

	public void setFileStoreResponses(FileStoreResponses fileStoreResponses) {
		this.fileStoreResponses = fileStoreResponses;
	}

	public FileStoreResponses getFileStoreResponses() {
		return fileStoreResponses;
	}

	public void setStatusReport(BerVisibleString statusReport) {
		this.statusReport = statusReport;
	}

	public BerVisibleString getStatusReport() {
		return statusReport;
	}

	public void setConditionCode(CfdpConditionCodeType conditionCode) {
		this.conditionCode = conditionCode;
	}

	public CfdpConditionCodeType getConditionCode() {
		return conditionCode;
	}

	public void setFileStatus(BerEnum fileStatus) {
		this.fileStatus = fileStatus;
	}

	public BerEnum getFileStatus() {
		return fileStatus;
	}

	public void setDeliveryCode(BerEnum deliveryCode) {
		this.deliveryCode = deliveryCode;
	}

	public BerEnum getDeliveryCode() {
		return deliveryCode;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += deliveryCode.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		reverseOS.write(0x85);
		codeLength += 1;
		
		codeLength += fileStatus.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		reverseOS.write(0x84);
		codeLength += 1;
		
		codeLength += conditionCode.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		reverseOS.write(0x83);
		codeLength += 1;
		
		if (statusReport != null) {
			codeLength += statusReport.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			reverseOS.write(0x82);
			codeLength += 1;
		}
		
		if (fileStoreResponses != null) {
			codeLength += fileStoreResponses.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
		}
		
		codeLength += transactionId.encode(reverseOS, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		reverseOS.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			transactionId = new CfdpTransactionIdType();
			subCodeLength += transactionId.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			fileStoreResponses = new FileStoreResponses();
			subCodeLength += fileStoreResponses.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			statusReport = new BerVisibleString();
			subCodeLength += statusReport.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			conditionCode = new CfdpConditionCodeType();
			subCodeLength += conditionCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			fileStatus = new BerEnum();
			subCodeLength += fileStatus.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			deliveryCode = new BerEnum();
			subCodeLength += deliveryCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (transactionId != null) {
			sb.append("transactionId: ").append(transactionId);
		}
		else {
			sb.append("transactionId: <empty-required-field>");
		}
		
		if (fileStoreResponses != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("fileStoreResponses: ");
			fileStoreResponses.appendAsString(sb, indentLevel + 1);
		}
		
		if (statusReport != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("statusReport: ").append(statusReport);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (conditionCode != null) {
			sb.append("conditionCode: ").append(conditionCode);
		}
		else {
			sb.append("conditionCode: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (fileStatus != null) {
			sb.append("fileStatus: ").append(fileStatus);
		}
		else {
			sb.append("fileStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (deliveryCode != null) {
			sb.append("deliveryCode: ").append(deliveryCode);
		}
		else {
			sb.append("deliveryCode: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

