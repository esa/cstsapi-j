CSTS-FUNCTIONAL-RESOURCE-TYPES
{ iso(1) identified-organization(3) standards-producing-organization(112)
	ccsds(4) css(4) crossSuppportResources(2)
}

DEFINITIONS
IMPLICIT TAGS
::= BEGIN

EXPORTS
	 	 antennaType
,	 	 AntResourceStat
,	 	 antResourceStatType
,	 	 AntId
,	 	 antIdType
,	 	 AntActualAzimuth
,	 	 antActualAzimuthType
,	 	 AntActualElevation
,	 	 antActualElevationType
,	 	 AntCommandedAzimuth
,	 	 antCommandedAzimuthType
,	 	 AntCommandedElevation
,	 	 antCommandedElevationType
,	 	 AntContrAzimuth
,	 	 antContrAzimuthType
,	 	 AntContrElevation
,	 	 antContrElevationType
,	 	 AntContrAzimuthRate
,	 	 antContrAzimuthRateType
,	 	 AntContrElevationRate
,	 	 antContrElevationRateType
,	 	 AntAzimuthResidual
,	 	 antAzimuthResidualType
,	 	 AntElevationResidual
,	 	 antElevationResidualType
,	 	 AntAzimuthAberration
,	 	 antAzimuthAberrationType
,	 	 AntElevationAberration
,	 	 antElevationAberrationType
,	 	 AntPointingMode
,	 	 antPointingModeType
,	 	 AntClosedLoopConfiguration
,	 	 antClosedLoopConfigurationType
,	 	 AntTrackingRxMode
,	 	 antTrackingRxModeType
,	 	 AntTrackingSignalPolarization
,	 	 antTrackingSignalPolarizationType
,	 	 AntTrackingRxInpLevel
,	 	 antTrackingRxInpLevelType
,	 	 AntTrackingRxNominalFreq
,	 	 antTrackingRxNominalFreqType
,	 	 AntTrackingRxFreqSearchRange
,	 	 antTrackingRxFreqSearchRangeType
,	 	 AntTrackingRxPredictMode
,	 	 antTrackingRxPredictModeType
,	 	 AntTrackingRxLoopBwdth
,	 	 antTrackingRxLoopBwdthType
,	 	 AntTrackingRxOrderOfLoop
,	 	 antTrackingRxOrderOfLoopType
,	 	 AntTrackingRxLockStat
,	 	 antTrackingRxLockStatType
,	 	 AntWindIntegrationTime
,	 	 antWindIntegrationTimeType
,	 	 AntMeanWindSpeed
,	 	 antMeanWindSpeedType
,	 	 AntPeakWindSpeed
,	 	 antPeakWindSpeedType
,	 	 AntWindDirection
,	 	 antWindDirectionType
,	 	 AntAccumulatedPrecipitation
,	 	 antAccumulatedPrecipitationType
,	 	 AntPrecipitationRate
,	 	 antPrecipitationRateType
,	 	 AntRelativeHumidity
,	 	 antRelativeHumidityType
,	 	 AntAtmoshericPressure
,	 	 antAtmosphericPressureType
,	 	 AntAmbientTemperature
,	 	 antAmbientTemperatureType
,	 	 AntEventResourceStatValue
,	 	 antEventResourceStatValueType
,	 	 AntEventTrackingRxLockStat
,	 	 antEventTrackingRxLockStatType
,	 	 AntWindSpeedCriticality
,	 	 antWindSpeedCriticalityType
,	 	 AntContrParamIdsAndValues
,	 	 antContrParamIdsAndValuesType
,	 	 antArrayType
,	 	 ccsds401SpaceLinkCarrierXmitType
,	 	 Ccsds401CarrierXmitResourceStat
,	 	 ccsds401CarrierXmitResourceStatType
,	 	 Ccsds401CarrierXmitPhysChnlName
,	 	 ccsds401CarrierXmitPhysChnlNameType
,	 	 Ccsds401CarrierXmitStat
,	 	 ccsds401CarrierXmitStatType
,	 	 Ccsds401CarrierXmitEirp
,	 	 ccsds401CarrierXmitEirpType
,	 	 Ccsds401CarrierXmitPolarization
,	 	 ccsds401CarrierXmitPolarizationType
,	 	 Ccsds401CarrierXmitActualCarrierFreq
,	 	 ccsds401CarrierXmitActualCarrierFreqType
,	 	 Ccsds401CarrierXmitNominalCarrierFreq
,	 	 ccsds401CarrierXmitNominalCarrierFreqType
,	 	 Ccsds401CarrierXmitReferenceFreqLock
,	 	 ccsds401CarrierXmitReferenceFreqLockType
,	 	 Ccsds401CarrierXmitSweepProcStat
,	 	 ccsds401CarrierXmitSweepProcStatType
,	 	 Ccsds401CarrierXmitSweepProfile
,	 	 ccsds401CarrierXmitSweepProfileType
,	 	 Ccsds401CarrierXmitMod
,	 	 ccsds401CarrierXmitModType
,	 	 Ccsds401CarrierXmitModInputStat
,	 	 ccsds401CarrierXmitModInputStatType
,	 	 Ccsds401CarrierXmitTcPriority
,	 	 ccsds401CarrierXmitTcPriorityType
,	 	 Ccsds401CarrierXmitSymbolStreamModType
,	 	 ccsds401CarrierXmitSymbolStreamModTypeType
,	 	 Ccsds401CarrierXmitRngModIndex
,	 	 ccsds401CarrierXmitRngModIndexType
,	 	 Ccsds401CarrierXmitSubcarrierFreq
,	 	 ccsds401CarrierXmitSubcarrierFreqType
,	 	 Ccsds401CarrierXmitSubcarrierMod
,	 	 ccsds401CarrierXmitSubcarrierModType
,	 	 Ccsds401CarrierXmitSymbolRate
,	 	 ccsds401CarrierXmitSymbolRateType
,	 	 Ccsds401CarrierXmitEventResourceStatValue
,	 	 ccsds401CarrierXmitEventResourceStatValueType
,	 	 Ccsds401CarrierXmitContrParamIdsAndValues
,	 	 ccsds401CarrierXmitContrParamIdsAndValuesType
,	 	 rngXmitType
,	 	 RngXmitResourceStat
,	 	 rngXmitResourceStatType
,	 	 RngXmitMod
,	 	 rngXmitModType
,	 	 RngXmitRngType
,	 	 rngXmitRngTypeType
,	 	 RngXmitPnChipRate
,	 	 rngXmitPnChipRateType
,	 	 RngXmitEventResourceStatValue
,	 	 rngXmitEventResourceStatValueType
,	 	 RngXmitContrParamIdsAndValues
,	 	 rngXmitContrParamIdsAndValuesType
,	 	 ccsds401SpaceLinkCarrierRcptType
,	 	 Ccsds401CarrierRcptResourceStat
,	 	 ccsds401CarrierRcptResourceStatType
,	 	 Ccsds401CarrierRcptPhysChnlName
,	 	 ccsds401CarrierRcptPhysChnlNameType
,	 	 Ccsds401CarrierRcptModulationType
,	 	 ccsds401CarrierRcptModulationTypeType
,	 	 Rtn401CarrierRcptPolarization
,	 	 ccsds401CarrierRcptPolarizationType
,	 	 Ccsds401CarrierRcptPolarizationAngle
,	 	 ccsds401CarrierRcptPolarizationAngleType
,	 	 Ccsds401CarrierRcptExpectedSignalLevel
,	 	 ccsds401CarrierRcptExpectedSignalLevelType
,	 	 Ccsds401CarrierRcptSignalLevelResidual
,	 	 ccsds401CarrierRcptSignalLevelResidualType
,	 	 Ccsds401CarrierRcptSystemNoiseTemperature
,	 	 ccsds401CarrierRcptSystemNoiseTemperatureType
,	 	 Ccsds401CarrierRcptNominalFreq
,	 	 ccsds401CarrierRcptNominalFreqType
,	 	 Ccsds401CarrierRcptFreqSearchRange
,	 	 ccsds401CarrierRcptFreqSearchRangeType
,	 	 Ccsds401CarrierRcptPredictMode
,	 	 ccsds401CarrierRcptPredictModeType
,	 	 Ccsds401CarrierRcptTrackingLoopBwdth
,	 	 ccsds401CarrierRcptTrackingLoopBwdthType
,	 	 Ccsds401CarrierRcptOrderOfLoop
,	 	 ccsds401CarrierRcptOrderOfLoopType
,	 	 Ccsds401CarrierRcptLockStat
,	 	 ccsds401CarrierRcptLockStatType
,	 	 Ccsds401CarrierRcptCarrierLoopSnr
,	 	 ccsds401CarrierRcptCarrierLoopSnrType
,	 	 Ccsds401CarrierRcptCarrierLoopMeanPhaseError
,	 	 ccsds401CarrierRcptCarrierLoopMeanPhaseErrorType
,	 	 Ccsds401CarrierRcptActualFreq
,	 	 ccsds401CarrierRcptActualFreqType
,	 	 Ccsds401CarrierRcptFreqOffset
,	 	 ccsds401CarrierRcptFreqOffsetType
,	 	 Ccsds401CarrierRcptDopplerStdDeviation
,	 	 ccsds401CarrierRcptDopplerStdDeviationType
,	 	 Ccsds401CarrierRcptBestLockFreq
,	 	 ccsds401CarrierRcptBestLockFreqType
,	 	 Ccsds401CarrierRcptNominalSubcarrierFreq
,	 	 ccsds401CarrierRcptNominallSubcarrierFreqType
,	 	 Ccsds401CarrierRcptActualSubcarrierFreq
,	 	 ccsds401CarrierRcptActualSubcarrierFreqType
,	 	 Ccsds401CarrierRcptSubcarrierDemodLoopBwdth
,	 	 ccsds401CarrierRcptSubcarrierDemodLoopBwdthType
,	 	 Ccsds401CarrierRcptSubcarrierLoopMeanPhaseError
,	 	 ccsds401CarrierRcptSubcarrierLoopMeanPhaseErrorType
,	 	 Ccsds401CarrierRcptSubcarrierLevelEstimate
,	 	 ccsds401CarrierRcptSubcarrierLevelEstimateType
,	 	 Ccsds401CarrierRcptNominalSymbolRate
,	 	 ccsds401CarrierRcptNominalSymbolRateType
,	 	 Ccsds401CarrierRcptActualSymbolRate
,	 	 ccsds401CarrierRcptActualSymbolRateType
,	 	 Ccsds401CarrierRcptSymbolSynchronizerLoopBwdth
,	 	 ccsds401CarrierRcptSymbolSynchronizerLoopBwdthType
,	 	 Ccsds401CarrierRcptSymbolLoopMeanPhaseError
,	 	 ccsds401CarrierRcptSymbolLoopMeanPhaseErrorType
,	 	 Ccsds401CarrierRcptExpectedEsOverNo
,	 	 ccsds401CarrierRcptExpectedEsOverNoType
,	 	 Ccsds401CarrierRcptObservedEsOverNoAndSoftSymbolDistribution
,	 	 ccsds401CarrierRcptEsOverNoResidualAndSoftSymbolDistributionType
,	 	 Ccsds401CarrierRcptEventResourceStatValue
,	 	 ccsds401CarrierRcptEventResourceStatValueType
,	 	 Ccsds401CarrierRcptEventLockStat
,	 	 ccsds401CarrierRcptEventLockStatType
,	 	 Ccsds401SpaceLinkCarrierRcptContrParamIdsAndValues
,	 	 ccsds401SpaceLinkCarrierRcptContrParamIdsAndValuesType
,	 	 rngAndDopplerExtractionType
,	 	 RngAndDopplerExtractionResourceStat
,	 	 rngAndDopplerExtractionResourceStatType
,	 	 RngAndDopplerExtractionPresteering
,	 	 rngAndDopplerExtractionPresteeringType
,	 	 RngAndDopplerExtractionRngPowerOverNoResidual
,	 	 rngAndDopplerExtractionRngPowerOverNoResidualType
,	 	 RngAndDopplerExtractionRngLoopBwdth
,	 	 rngAndDopplerExtractionRngLoopBwdthType
,	 	 RngAndDopplerExtractionPredictedToneLoopSnr
,	 	 rngAndDopplerExtractionPredictedRngLoopSnrType
,	 	 RngAndDopplerExtractionRngSignalAcquisitionProbability
,	 	 rngAndDopplerExtractionRngSignalAcquisitionProbabilityType
,	 	 RngAndDopplerExtractionOpenLoopTime
,	 	 rngAndDopplerExtractionOpenLoopTimeType
,	 	 RngAndDopplerExtractionLoopSettlingTime
,	 	 rngAndDopplerExtractionLoopSettlingTimeType
,	 	 RngAndDopplerExtractionLoopLockStat
,	 	 rngAndDopplerExtractionLoopLockStatType
,	 	 RngAndDopplerExtractionRnglToCarrierPowerRatio
,	 	 rngAndDopplerExtractionRngToCarrierPowerRatioType
,	 	 RngAndDopplerExtractionExpectedRngModIndex
,	 	 rngAndDopplerExtractionExpectedRngModIndexType
,	 	 RngAndDopplerExtractionToneIntegrationTime
,	 	 rngAndDopplerExtractionToneIntegrationTimeType
,	 	 RngAndDopplerExtractionPnCodeIntegrationTime
,	 	 rngAndDopplerExtractionPnCodeIntegrationTimeType
,	 	 RngAndDopplerExtractionCodeNumberCorrelated
,	 	 rngAndDopplerExtractionCodeNumberCorrelatedType
,	 	 RngAndDopplerExtractionAmbiguityResolved
,	 	 rngAndDopplerExtractionAmbiguityResolvedType
,	 	 RngAndDopplerExtractionSpacecraftTransponderMode
,	 	 rngAndDopplerExtractionSpacecraftTransponderModeType
,	 	 RngAndDopplerExtractionExpectedSpacecraftPnAcqDuration
,	 	 rngAndDopplerExtractionExpectedSpacecraftPnAcqDurationType
,	 	 RngAndDopplerExtractionRngMeasurementSamplingRate
,	 	 rngAndDopplerExtractionRngMeasurementSamplingRateType
,	 	 RngAndDopplerExtractionDopplerMeasurementSamplingRate
,	 	 rngAndDopplerExtractionDopplerMeasurementSamplingRateType
,	 	 RngAndDopplerExtractionDataCollection
,	 	 rngAndDopplerExtractionDataCollectionType
,	 	 RngAndDopplerExtractionObservableAndResidual
,	 	 rngAndDopplerExtractionObservableAndResidualType
,	 	 RngAndDopplerExtractionObservablesCount
,	 	 rngAndDopplerExtractionObservablesCountType
,	 	 RngAndDopplerExtractionEventResourceStatValue
,	 	 rngAndDopplerExtractionEventResourceStatValueType
,	 	 RngAndDopplerExtractionStatChangeValue
,	 	 rngAndDopplerExtractionStatChangeValueType
,	 	 RngAndDopplerExtractionContrParamIdsAndValues
,	 	 rngAndDopplerExtractionContrParamIdsAndValuesType
,	 	 tcPlopSyncAndChnlEncodeType
,	 	 TcPlopSyncResourceStat
,	 	 tcPlopSyncResourceStatType
,	 	 TcPlopSyncMaxCltuLength
,	 	 tcPlopSyncMaxCltuLengthType
,	 	 TcPlopSyncMaxNumberOfFramesPerCltu
,	 	 tcPlopSyncMaxNumberOfFramesPerCltuType
,	 	 TcPlopSyncEncodeType
,	 	 tcPlopSyncEncodeTypeType
,	 	 TcPlopSyncMaxCltuRepetitions
,	 	 tcPlopSyncMaxCltuRepetitionsType
,	 	 TcPlopSyncPlop
,	 	 tcPlopSyncPlopType
,	 	 TcPlopSyncAcqAndIdlePattern
,	 	 tcPlopSyncAcqAndIdlePatternType
,	 	 TcPlopSyncMinDelayTime
,	 	 tcPlopSyncMinDelayTimeType
,	 	 TcPlopSyncTcLinkStat
,	 	 tcPlopSyncTcLinkStatType
,	 	 FwdTcPlopSyncClcwEvaluation
,	 	 tcPlopSyncClcwEvaluationType
,	 	 TcPlopSyncEventResourceStatValue
,	 	 tcPlopSyncEventResourceStatValueType
,	 	 TcPlopSyncEventTcLinkStatValue
,	 	 tcPlopSyncEventTcLinkStatValueType
,	 	 TcPlopSyncDataUnitIdAndSourceValue
,	 	 tcPlopSyncDataUnitIdAndSourceValueType
,	 	 TcPlopSyncContrParamIdsAndValues
,	 	 fwdTcPlopSyncContrParamIdsAndValuesType
,	 	 TcPlopSyncFrAndServiceInstanceId
,	 	 tcPlopSyncFrAndServiceInstanceIdType
,	 	 flfFrameSyncChnEncodeAndOidGenType
,	 	 FwdAosSyncResourceStat
,	 	 fwdFlfSyncResourceStatType
,	 	 FwdAosSyncPhysicalChnlName
,	 	 fwdAosSyncPhysicalChnlNameType
,	 	 FwdAosSyncCaduLength
,	 	 fwdAosSyncCaduLengthType
,	 	 FwdAosFrameRandomization
,	 	 fwdAosFrameRandomizationType
,	 	 FwdAosSyncFrameEncoding
,	 	 fwdAosSyncFrameEncodingType
,	 	 FwdAosSyncFrameConvolCodeRate
,	 	 fwdAosSyncFrameConvolCodeRateType
,	 	 FwdAosSyncFrameRsErrorCorrectionCapability
,	 	 fwdAosSyncFrameRsErrorCorrectionCapabilityType
,	 	 FwdAosSyncFrameRsInterleavingDepth
,	 	 fwdAosSyncFrameRsInterleavingDepthType
,	 	 FwdAosSyncFrameTurboCodeRate
,	 	 fwdAosSyncFrameTurboCodeRateType
,	 	 FwdAosSyncFrameLdpcCodeRate
,	 	 fwdAosSyncFrameLdpcCodeRateType
,	 	 FwdAosSyncResourceStatValue
,	 	 fwdAosSyncResourceStatValueType
,	 	 FwdAosSyncParamIdsAndValues
,	 	 fwdAosSyncParamIdsAndValuesType
,	 	 flfSyncAndChnlDecodeType
,	 	 FlfSyncResourceStat
,	 	 flfSyncResourceStatType
,	 	 FlfSyncAsmConfig
,	 	 flfSyncAsmConfigType
,	 	 FlfSyncAsmCorrelationError
,	 	 flfSyncAsmCorrelationErrorType
,	 	 FlfSyncFrameSyncLockStat
,	 	 flfSyncFrameSyncLockStatType
,	 	 FlfSyncSymbolInversion
,	 	 flfSyncSymbolInversionType
,	 	 FlfSyncFrameErrorRate
,	 	 flfSyncFrameErrorRateType
,	 	 FlfSyncNumberOfRsErrorsCorrected
,	 	 flfSyncNumberOfRsErrorsCorrectedType
,	 	 FlfSyncErtAnnotationLockedToReference
,	 	 flfSyncErtAnnotationLockedToReferenceType
,	 	 FlfSyncCaduLength
,	 	 flfSyncCaduLengthType
,	 	 FlfSyncDerandomization
,	 	 flfSyncDerandomizationType
,	 	 FlfSyncDecode
,	 	 flfSyncDecodeType
,	 	 FlfSyncFecfPresent
,	 	 flfSyncFecfPresentType
,	 	 FlfSyncDecodeQualityIndications
,	 	 flfSyncDecodeQualityIndicationsType
,	 	 FlfSyncEventResourceStatValue
,	 	 flfSyncEventResourceStatValueType
,	 	 FlfSyncFrameSyncLockStatValue
,	 	 flfSyncFrameSyncLockStatValueType
,	 	 FlfSyncContrParamIdsAndValues
,	 	 flfSyncContrParamIdsAndValuesType
,	 	 tcMcMuxType
,	 	 TcMcMuxResourceStat
,	 	 tcMcMuxResourceStatType
,	 	 TcMcMuxMaxNumberOfFramesPerCltu
,	 	 tcMcMuxMaxNumberOfFramesPerCltuType
,	 	 TcMcMuxMaxFrameLength
,	 	 tcMcMuxMaxFrameLengthType
,	 	 TcMcMuxContr
,	 	 tcMcMuxContrType
,	 	 TcMcMuxPresenceOfFec
,	 	 tcMcMuxPresenceOfFecType
,	 	 TcMcMuxEventResourceStatValue
,	 	 tcMcMuxEventResourceStatValueType
,	 	 TcMcMuxContrParamIdsAndValues
,	 	 tcMcMuxContrParamIdsAndValuesType
,	 	 TcMcMuxDiscardDataUnitsQualifier
,	 	 tcMcMuxDiscardDataUnitsQualifierType
,	 	 tcVcMuxType
,	 	 TcVcMuxResourceStat
,	 	 tcVcMuxResourceStatType
,	 	 TcVcMaxFrameLength
,	 	 tcVcMaxFrameLengthType
,	 	 TcVcMuxAdFrameRepetitions
,	 	 tcVcMuxAdFrameRepetitionsType
,	 	 TcVcMuxBcFrameRepetitions
,	 	 tcVcMuxBcFrameRepetitionsType
,	 	 TcVcMuxMc
,	 	 tcVcMuxMcType
,	 	 TcVcMuxContr
,	 	 tcVcMuxContrType
,	 	 TcVcMuxEventResourceStatValue
,	 	 tcVcMuxEventResourceStatValueType
,	 	 TcVcMuxContrParamIdsAndValues
,	 	 tcVcMuxContrParamIdsAndValuesType
,	 	 TcVcMuxDiscardDataUnitsQualifier
,	 	 tcVcMuxDiscardDataUnitsQualifierType
,	 	 fwdTcEncapVcPktProcVcGenType
,	 	 fwdMapMuxType
,	 	 fwdEncapMapPktProcType
,	 	 fwdAosMcMuxType
,	 	 fwdAosVcMuxType
,	 	 fwdAosEncapPktProcAndVcGenType
,	 	 fwdUslpMcMuxType
,	 	 fwdUslpVcMuxType
,	 	 fwdUslpVcGenType
,	 	 fwdUslpEncapAndMapPktProcType
,	 	 tmAosMcDemuxType
,	 	 TmAosMcDemuxResourceStat
,	 	 tmAosMcDemuxResourceStatType
,	 	 TmAosMcDemuxMcIds
,	 	 tmAosMcDemuxMcIdsType
,	 	 TmAosMcDemuxClcwExtraction
,	 	 tmAosMcDemuxClcwExtractionType
,	 	 TmAosMcDemuxEventResourceStatValue
,	 	 tmAosMcDemuxEventResourceStatValueType
,	 	 TmAosMcDemuxContrParamIdsAndValues
,	 	 tmAosMcDemuxContrParamIdsAndValuesType
,	 	 tmAosVcDemuxType
,	 	 TmAosVcDemuxResourceStat
,	 	 tmAosVcDemuxResourceStatType
,	 	 TmAosVcDemuxVcId
,	 	 tmAosVcDemuxVcIdType
,	 	 TmAosVcDemuxClcwExtraction
,	 	 tmAosVcDemuxClcwExtractionType
,	 	 TmAosVcDemuxGvcid
,	 	 tmAosVcDemuxGvcidType
,	 	 TmAosVcDemuxEventResourceStatValue
,	 	 tmAosVcDemuxEventResourceStatValueType
,	 	 TmAosVcDemuxContrParamIdsAndValues
,	 	 tmAosVcDemuxContrParamIdsAndValuesType
,	 	 rtnPktExtAndDeencapType
,	 	 RfspApidSet
,	 	 rfspApidSetType
,	 	 frameDataSinkType
,	 	 ServicePackageId
,	 	 servicePackageIdType
,	 	 cfdpSendEntityType
,	 	 fwdFileSvcProdType
,	 	 cfdpRcvEntityType
,	 	 rtnFileSvcProdType
,	 	 tdmSegmentGenType
,	 	 nonValRmDataCollectionType
,	 	 ddorRawDataCollectionType
,	 	 openLoopRxFormatterType
,	 	 offlineFrameBufferType
,	 	 tdmRcrdBufferType
,	 	 nonValRmDataStoreType
,	 	 valRmDataStoreType
,	 	 ddorRawDataStoreType
,	 	 openLoopDataStoreType
,	 	 rtnFileDataStoreType
,	 	 fwdFileDataStoreType
,	 	 fspTsProviderType
,	 	 FwdTcMcMuxValidScids
,	 	 fspTcMcMuxValidScidsType
,	 	 FwdTcVcMuxValidTcVcIds
,	 	 fspTcVcMuxValidTcVcIdsType
,	 	 fwdCltuTsProviderType
,	 	 FwdCltuProductionStat
,	 	 fwdCltuProductionStatType
,	 	 FwdCltuServiceInstanceId
,	 	 fwdCltuServiceInstanceIdType
,	 	 FwdCltuInitiatorId
,	 	 fwdCltuInitiatorIdType
,	 	 FwdCltuResponderId
,	 	 fwdCltuResponderIdType
,	 	 FwdCltuResponderPortId
,	 	 fwdCltuResponderPortIdType
,	 	 FwdCltuRtnTimeoutPeriod
,	 	 fwdCltuRtnTimeoutPeriodType
,	 	 FwdCltuDeliveryMode
,	 	 fwdCltuDeliveryModeType
,	 	 FwdCltuNotificationMode
,	 	 fwdCltuNotificationModeType
,	 	 FwdCltuProtocolAbortMode
,	 	 fwdCltuProtocolAbortModeType
,	 	 FwdCltuSiState
,	 	 fwdCltuSiStateType
,	 	 FwdCltuReportingCycle
,	 	 fwdCltuReportingCycleType
,	 	 FwdCltuExpectedCltuIdentification
,	 	 fwdCltuExpectedCltuIdentificationType
,	 	 FwdCltuExpectedEventInvocationId
,	 	 fwdCltuExpectedEventInvocationIdType
,	 	 FwdCltuNumberOfCltusReceived
,	 	 fwdCltuNumberOfCltusReceivedType
,	 	 FwdCltuNumberOfCltusProcessed
,	 	 fwdCltuNumberOfCltusProcessedType
,	 	 FwdCltuNumberOfCltusRadiated
,	 	 fwdCltuNumberOfCltusRadiatedType
,	 	 FwdCltuEventProductionStatValue
,	 	 FwdCltuContrParamIdsAndValues
,	 	 fwdCltuContrParamIdsAndValuesType
,	 	 tgftHostType
,	 	 rafTsProviderType
,	 	 RafProductionStatus
,	 	 rafProductionStatType
,	 	 RafServiceInstanceIdentifier
,	 	 rafServiceInstanceIdentifierType
,	 	 RafInitiatorId
,	 	 rafInitiatorIdType
,	 	 RafResponderId
,	 	 rafResponderIdType
,	 	 RafResponderPortId
,	 	 rafResponderPortIdType
,	 	 RafRtnTimeoutPeriod
,	 	 rafRtnTimeoutPeriodType
,	 	 RafDeliveryMode
,	 	 rafDeliveryModeType
,	 	 RafLatencyLimit
,	 	 rafLatencyLimitType
,	 	 RafTransferBufferSize
,	 	 rafTransferBufferSizeType
,	 	 RafPermittedFrameQuality
,	 	 rafPermittedFrameQualityType
,	 	 RafRequestedFrameQuality
,	 	 rafRequestedFrameQualityType
,	 	 RafSiState
,	 	 rafSiStateType
,	 	 RafReportingCycle
,	 	 rafReportingCycleType
,	 	 RafNumberOfErrorFreeFramesDelivered
,	 	 rafNumberOfErrorFreeFramesDeliveredType
,	 	 RafNumberOfFramesDelivered
,	 	 rafNumberOfFramesDeliveredType
,	 	 RafEventProductionStatusValue
,	 	 rafEventProductionStatValueType
,	 	 RafContrParamIdsAndValues
,	 	 rafContrParamIdsAndValuesType
,	 	 rcfTsProviderType
,	 	 RcfProductionStat
,	 	 rcfProductionStatType
,	 	 RcfServiceInstanceId
,	 	 rcfServiceInstanceIdType
,	 	 RcfInitiatorId
,	 	 rcfInitiatorIdType
,	 	 RcfResponderId
,	 	 rcfResponderIdType
,	 	 RcfResponderPortId
,	 	 rcfResponderPortIdType
,	 	 RcfRtnTimeoutPeriod
,	 	 rcfRtnTimeoutPeriodType
,	 	 RcfDeliveryMode
,	 	 rcfDeliveryModeType
,	 	 RcfLatencyLimit
,	 	 rcfLatencyLimitType
,	 	 RcfTransferBufferSize
,	 	 rcfTransferBufferSizeType
,	 	 RcfPermittedGlobalVcidSet
,	 	 rcfPermittedGlobalVcidSetType
,	 	 RcfRequestedGlobalVcid
,	 	 rcfRequestedGlobalVcidType
,	 	 RcfSiState
,	 	 rcfSiStateType
,	 	 RcfReportingCycle
,	 	 rcfReportingCycleType
,	 	 RcfNumberOfFramesDelivered
,	 	 rcfNumberOfFramesDeliveredType
,	 	 RcfEventProductionStatValue
,	 	 rcfEventProductionStatValueType
,	 	 RcfContrParamIdsAndValues
,	 	 rcfContrParamIdsAndValuesType
,	 	 rocfTsProviderType
,	 	 RocfProductionStat
,	 	 rocfProductionStatType
,	 	 RocfServiceInstanceId
,	 	 rocfServiceInstanceIdType
,	 	 RocfInitiatorId
,	 	 rocfInitiatorIdType
,	 	 RocfResponderId
,	 	 rocfResponderIdType
,	 	 RocfResponderPortId
,	 	 rocfResponderPortIdType
,	 	 RocfRtnTimeoutPeriod
,	 	 rocfRtnTimeoutPeriodType
,	 	 RocfDeliveryMode
,	 	 rocfDeliveryModeType
,	 	 RocfLatencyLimit
,	 	 rocfLatencyLimitType
,	 	 RocfTransferBufferSize
,	 	 rocfTransferBufferSizeType
,	 	 RocfPermittedGlobalVcidSet
,	 	 rocfPermittedGlobalVcidSetType
,	 	 RocfRequestedGlobalVcid
,	 	 rocfRequestedGlobalVcidType
,	 	 RocfPermittedContrWordTypeSet
,	 	 rocfPermittedContrWordTypeSetType
,	 	 RocfRequestedContrWordType
,	 	 rocfRequestedContrWordTypeType
,	 	 RocfPermittedTcVcidSet
,	 	 rocfPermittedTcVcidSetType
,	 	 RocfRequestedTcVcid
,	 	 rocfRequestedTcVcidType
,	 	 RocfPermittedUpdateMode
,	 	 rocfPermittedUpdateModeType
,	 	 RocfRequestedUpdateMode
,	 	 rocfRequestedUpdateModeType
,	 	 RocfSiState
,	 	 rocfSiStateType
,	 	 RocfReportingCycle
,	 	 rocfReportingCycleType
,	 	 RocfNumberOfOcfsDelivered
,	 	 rocfNumberOfOcfsDeliveredType
,	 	 RocfEventProductionStatValue
,	 	 rocfEventProductionStatValueType
,	 	 RocfContrParamIdsAndValues
,	 	 rocfContrParamIdsAndValuesType
,	 	 tdCstsProviderType
,	 	 mdCstsProviderType
,	 	 mdCollectionType
,	 	 svcContrCstsProviderType
,	 	 svcContrProdType
;

ResourceStat        	 ::= ENUMERATED
{
	 configured          	 	 (0)
,	 operational         	 	 (1)
,	 interrupted         	 	 (2)
,	 halted              	 	 (3)
}

AuthorityIdentifier 	 ::= VisibleString (SIZE( 3 .. 16))  ((ALL EXCEPT " "))
LdpcCodeRate        	 ::= ENUMERATED
{
	 rate1Over2          	 	 (0)
,	 rate2Over3          	 	 (1)
,	 rate4Over5          	 	 (2)
,	 rate223Over255      	 	 (3)
}

SleRtnDeliveryMode  	 ::= ENUMERATED
{
	 onlineTimely        	 	 (0)
,	 onlineComplete      	 	 (1)
,	 offline             	 	 (2)
}

SleServiceInstanceId	 ::= OCTET STRING (SIZE( 30 .. 256)) 
PcmFormat           	 ::= ENUMERATED
{
	 nrzL                	 	 (0)
,	 nrzM                	 	 (1)
,	 nrzS                	 	 (2)
,	 biPhaseL            	 	 (3)
,	 biPhaseM            	 	 (4)
,	 biPhaseS            	 	 (5)
}

LockStat            	 ::= SEQUENCE
{
	 carrierLock         	 ENUMERATED
	 {
	 	 notLocked           	 	 (0)
	 ,	 locked              	 	 (1)
	 }

,	 subcarrierLock      	 ENUMERATED
	 {
	 	 notLocked           	 	 (0)
	 ,	 locked              	 	 (1)
	 ,	 notApplicable       	 	 (2)
	 }

,	 symbolStreamLock    	 ENUMERATED
	 {
	 	 notLocked           	 	 (0)
	 ,	 locked              	 	 (1)
	 }

}

SleSiState          	 ::= ENUMERATED
{
	 unbound             	 	 (0)
,	 ready               	 	 (1)
,	 active              	 	 (2)
}

-- The engineering unit of this parameter is second.
SleRtnTimeout       	 ::= INTEGER  (1 .. 600)
ProductionStat      	 ::= ENUMERATED
{
	 configured          	 	 (0)
,	 operational         	 	 (1)
,	 interrupted         	 	 (2)
,	 halted              	 	 (3)
}

SleRtnProductionStat	 ::= ENUMERATED
{
	 running             	 	 (0)
,	 interrupted         	 	 (1)
,	 halted              	 	 (2)
}

DirectiveQualifier  	 ::= SEQUENCE
{
	 functResourceInstanceNumber	 INTEGER 
,	 directiveQualifierValues	 SEQUENCE  OF	 SEQUENCE
	 	 {
	 	 	 paramId             	 OBJECT IDENTIFIER
,	 	 	 parameterValue      	 SEQUENCE
	 	 	 {
	 	 	 	 paramTypeOid        	 OBJECT IDENTIFIER
,	 	 	 	 paramValue          	 OCTET STRING
	 	 	 }

	 	 }

}

TcLinkStat          	 ::= ENUMERATED
{
	 fwdLinkStatNotAvailable	 	 (0)
,	 noBitLock           	 	 (1)
,	 noRfAvailable       	 	 (2)
,	 nominal             	 	 (3)
}

Randomization       	 ::= ENUMERATED
{
	 off                 	 	 (0)
,	 on                  	 	 (1)
}

ServiceInstanceId   	 ::= CHOICE
{
	 sleServiceInstanceId	 [0]	 	 OCTET STRING (SIZE( 1 .. 64)) 
,	 cstsServiceInstanceId	 [1]	 	 SEQUENCE
	 {
	 	 spacecraftId        	 OBJECT IDENTIFIER
,	 	 facilityId          	 OBJECT IDENTIFIER
,	 	 serviceType         	 OBJECT IDENTIFIER
,	 	 serviceInstanceNumber	 INTEGER  (0 .. 4294967295)
	 }

}

SleReportingCycle   	 ::= CHOICE
{
	 reportingOff        	 [0]	 	 NULL
,	 -- The engineeringUnit of this parameter is second
	 reportingOn         	 [1]	 	 INTEGER  (2 .. 600)
}



-- The Antenna FR accepts as input the carrier signal that shall either be radiated
--  into space or into a water load, provided the given FR instance has the transmit
--  capability. 
-- It provides as output the carrier signal received from space to the
--  Rtn401SpaceLinkCarrierRcpt FR or the Rtn415SpaceLinkCarrierRcpt FR and the azimuth
--  and elevation pointing angles to the TdmSegmentGeneration FR and to the RawRadiometricDataCollection
--  FR, provided the given FR instance has the receive capability. The pointing angles
--  are provided only while the antenna is in some form of auto-track mode.
-- For the
--  correction of radiometric observables weather data are required which  should be
--  collected close to the antenna used to obtain the radiometric observables. Therefore
--  the Antenna FR is regarded as the source of the weather data provided to the TdmSegmentGeneration
--  FR and the NonValidatedRadiometricDataCollection FR. 
-- 
-- Note: An Antenna FR may
--  be limited to 'transmit-only' or 'receive-only'.
antennaType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 }




-- This enumerated parameter reports the overall status of the antenna and can take
--  on four values: 
-- - 'configured': the antenna system has been configured, but is
--  not yet tracking because it is still moving to the initial pointing or the spacecraft
--  is not yet or no longer in view; 
--  - 'operational': the antenna is tracking in
--  the reported pointing mode (cf. antennaPointingMode); 
--  - 'interrupted': a failure
--  has been detected that prevents the antenna from tracking nominally; 
--  - 'halted':
--  the antenna has been taken out of service, e.g. due to wind speed requiring the
--  antenna to be put into stow position.
antResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 1 1 1 }

AntResourceStat     	 ::= ResourceStat


-- This parameter identifies the antenna that is involved in providing a given support.
--  The antenna may either be identified by its name where typically this name is defined
--  by the operating agency so that no guarantee can be given that the identifier is
--  globally unique. Alternatively the antenna may be officially registered in SANA
--  in which case it has a globally unique Object Identifier. Knowledge of which antenna
--  is being used is needed for a number of aspects, e.g. to assess the observed signal
--  levels with respect to the antenna performance or to perform time correlation that
--  requires knowledge of the exact geographical location of the given antenna.
-- Note:
--  In case the antennas used for uplink and downlink are not identical, the Functional
--  Resource (FR) instance number shall be used to differentiate them. 
-- Antenna arrays
--  will be modeled by a dedicated FR type
antIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 2 1 1 }

AntId               	 ::= CHOICE
{
	 antennaName         	 [0]	 	 VisibleString (SIZE( 3 .. 16)) 
,	 antennaOid          	 [1]	 	 OBJECT IDENTIFIER
}



-- This parameter reports the current antenna azimuth pointing in 1/1000 degrees, where
--  0 degrees corresponds to pointing north and 90 degrees corresponds to pointing east.
--  Depending on the way the antenna is built, values above 360 degrees may be reported
--  in cases where the antenna enables such azimuth range as to mitigate the cable unwrap
--  issue. For antennas with a mount different from elevation over azimuth (e.g. x/y
--  mount), the antenna pointing shall be converted to the azimuth/elevation presentation.
--  This also applies to antennas having a tilt mode as to overcome the zenith track
--  singularity.
-- Note: Time-tagged antenna pointing is regarded a radiometric product
--  and therefore not part of monitoring provided by this FR type. 
antActualAzimuthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 3 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntActualAzimuth    	 ::= INTEGER  (0 .. 540000)


-- This parameter reports the current antenna elevation pointing in 1/1000 degrees,
--  where 0 degrees corresponds to pointing to the horizon and 90 degrees corresponds
--  to zenith pointing. Depending on the way the antenna is built, values above 90 degrees
--  may be reported in cases where the antenna enables such elevation range as to mitigate
--  the azimuth singularity at zenith. For antennas with a mount different from elevation
--  over azimuth (e.g. x/y mount), the antenna pointing shall be converted to the azimuth/elevation
--  presentation. This also applies to antennas having a tilt mode as to overcome the
--  zenith track singularity.
-- Note: Time-tagged antenna pointing is regarded a radiometric
--  product and therefore not part of monitoring provided by this FR type. 
antActualElevationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 4 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntActualElevation  	 ::= INTEGER  (0 .. 180000)


-- This parameter reports the azimuth pointing in 1/1000 degrees commanded to the servo
--  system while the antPointingMode is either 'programTrack' or 'autoTrack', where
--  0 degrees corresponds to pointing north and 90 degrees corresponds to pointing east.
--  Depending on the way the antenna is built, values above 360 degrees may be reported
--  in cases where the antenna enables such azimuth range as to mitigate the cable unwrap
--  issue. For antennas with a mount different from elevation over azimuth (e.g. x/y
--  mount), the antenna pointing shall be converted to the azimuth/elevation presentation.
--  This also applies to antennas having a tilt mode as to overcome the zenith track
--  singularity.
antCommandedAzimuthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 5 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntCommandedAzimuth 	 ::= INTEGER  (0 .. 540000)


-- This parameter reports the antenna elevation pointing in 1/1000 degrees commanded
--  to the servo system while the antPointingMode is either 'programTrack' or 'autoTrack',
--  where 0 degrees corresponds to pointing to the horizon and 90 degrees corresponds
--  to zenith pointing. Depending on the way the antenna is built, values above 90 degrees
--  may be reported in cases where the antenna enables such elevation range as to mitigate
--  the azimuth singularity at zenith. For antennas with a mount different from elevation
--  over azimuth (e.g. x/y mount), the antenna pointing shall be converted to the azimuth/elevation
--  presentation. This also applies to antennas having a tilt mode as to overcome the
--  zenith track singularity.
antCommandedElevationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 6 1 1 }

-- The engineering unit of the parameter is 1/1000 degree.
AntCommandedElevation	 ::= INTEGER  (0 .. 180000)


-- This parameter configures and reports the azimuth in 1/1000 degrees the antenna shall
--  point to when the pointing-mode is set to 'fixedPosition',  where 0 degrees corresponds
--  to pointing north and 90 degrees corresponds to pointing east. Depending on the
--  way the antenna is built, values above 360 degrees may be supported in cases where
--  the antenna enables such azimuth range as to mitigate the cable unwrap issue. For
--  antennas with a mount different from elevation over azimuth (e.g. x/y mount), the
--  antenna pointing shall be converted to the azimuth/elevation presentation. This
--  also applies to antennas having a tilt mode as to overcome the zenith track singularity.
antContrAzimuthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 7 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntContrAzimuth     	 ::= INTEGER  (0 .. 540000)


-- This parameter configures and reports the elevation in 1/1000 degrees the antenna
--  shall point to when the pointing-mode is set to 'fixedPosition',  where 0 degrees
--  corresponds to pointing to the local horizon and 90 degrees corresponds to zenith
--  pointing. Depending on the way the antenna is built, values above 90 degrees may
--  be reported in cases where the antenna enables such elevation range as to mitigate
--  the azimuth singularity at zenith. For antennas with a mount different from elevation
--  over azimuth (e.g. x/y mount), the antenna pointing shall be converted to the azimuth/elevation
--  presentation. This also applies to antennas having a tilt mode as to overcome the
--  zenith track singularity. 
antContrElevationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 8 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntContrElevation   	 ::= INTEGER  (0 .. 180000)


-- The parameter configures and reports the azimuth angular rate in 1/1000 degrees per
--  second at which the antenna shall move when  antPointingMode is set to 'slew'. 
antContrAzimuthRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 9 1 1 }

-- The engineering unit of this parameter is 1/1000 degree per second.
AntContrAzimuthRate 	 ::= INTEGER  (-5000 .. 5000)


-- The parameter configures and reports the elevation angular rate in 1/1000 degrees
--  per second at which the antenna shall move when the antPointingMode is set to 'slew'.
--  
antContrElevationRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 10 1 1 }

-- The engineering unit of this parameter is 1/000 degree per second.
AntContrElevationRate	 ::= INTEGER  (-5000 .. 5000)


-- This parameter reports the azimuth residual (actual azimuth in closed-loop tracking
--  minus the azimuth calculated for antPointingMode = 'programTrack') in 1/1000 degrees.
--  Consequently this parameter will only be valid if antPointingMode = 'closedLoop'.
--  Antennas not having or not being operated in any closed-loop tracking mode cannot
--  provide this parameter and in this case the parameter shall be flagged as unavailable.
--  
-- Note: Time-tagged antenna pointing is regarded a radiometric product and therefore
--  not part of monitoring.  
antAzimuthResidualType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 11 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntAzimuthResidual  	 ::= INTEGER  (-540000 .. 540000)


-- This parameter reports the elevation residual (actual elevation in closed-loop tracking
--  minus the elevation calculated for antPointingMode = 'programTrack') in 1/1000 degrees.
--  Consequently this parameter will only be valid if antPointingMode = 'closedLoop'.
--  Antennas not having or not being operated in any closed-loop tracking mode cannot
--  provide this parameter and in this case the parameter shall be flagged as unavailable.
--  
-- Note: Time-tagged antenna pointing is regarded a radiometric product and therefore
--  not part of monitoring.  
antElevationResidualType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 12 1 1 }

-- The engineering unit of this parameter is 1/1000 degree.
AntElevationResidual	 ::= INTEGER  (-180000 .. 180000)


-- This parameter reports the azimuth aberration relative to the forward beam and the
--  return beam in 1/1000 degree. In case the provider applies aberration correction,
--  the effect of this correction shall be factured into the aberration values reported.
--  
-- A valid parameter can only be reported if antPointingMode is 'closedLoop' or 'programTrack'.
-- 
antAzimuthAberrationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 13 1 1 }

AntAzimuthAberration	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/1000 degree.
	 fwdBeamAberration   	 INTEGER  (-1000 .. 1000)
,	 -- The engineering unit of this element is 1/1000 degree.
	 rtnBeamAberration   	 INTEGER  (-1000 .. 1000)
}



-- This parameter reports the elevation aberration relative to the forward beam and
--  the return beam in 1/1000 degree. In case the provider applies aberration correction,
--  the effect of this correction shall be factured into the aberration values reported.
--  
-- A valid parameter can only be reported if antPointingMode is 'closedLoop' or 'programTrack'.
-- 
antElevationAberrationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 14 1 1 }

AntElevationAberration	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/1000 degree.
	 fwdBeamAberration   	 INTEGER  (-1000 .. 1000)
,	 -- The engineering unit of this element is 1/1000 degree.
	 rtnBeamAberration   	 INTEGER  (-1000 .. 1000)
}



-- This enumerated parameter configures and reports the pointing mode of the antenna
--  servo system. The values this parameter can take on are:
-- - 'stow': the antenna
--  is in or is moving to its stow position;
-- - 'halt': the antenna has been stopped
--  in its current position;
-- - 'fixedPosition': the antenna is moving to or has moved
--  to the specified azimuth and elevation;
-- - 'slew': the antenna is moving at commanded
--  angular rates;
-- - 'programTrack': the antenna is pointed in accordance with spacecraft
--  trajectory predicts;
-- - 'closedLoop': the antenna is pointing in closed-loop mode.
-- Antenna
--  implementations will typically support only a subset of the above listed pointing
--  modes.
antPointingModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 15 1 1 }

AntPointingMode     	 ::= ENUMERATED
{
	 stow                	 	 (0)
,	 halt                	 	 (1)
,	 fixedPosition       	 	 (2)
,	 slew                	 	 (3)
,	 programTrack        	 	 (4)
,	 closedLoop          	 	 (5)
}



-- This parameter configures and reports the settings applied to closedLoop antenna
--  steering, either to monopulse tracking or to conical scann tracking. 
antClosedLoopConfigurationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 16 1 1 }

AntClosedLoopConfiguration	 ::= CHOICE
{
	 -- For monopulse tracking no required configuration parameters have been identified.
	 monopulse           	 [0]	 	 NULL
,	 -- The engineering unit of this element is 1/1000 degrees
	 conicalScan         	 [1]	 	 INTEGER  (1 .. 5000)
}



-- This parameter reports the mode in which the return signal is tracked for antenna
--  steering provided the antPointingMode = 'closedLoop'. The mode is chosen depending
--  on the modulation scheme. 
-- The values the parameter may have are:
-- - 'carrierTrackingMode':
--  the receiver tracks the remnant carrier by means of a carrier tracking PLL when
--  rtn401CarrierRcptModulationType is either 'subcarrier' or 'direct';
-- - 'crossCorrelationMode':
--  the receiver tracks the return link signal by means of checking for the spectral
--  symmetry when rtn401CarrierRcptModulationType is neither 'subcarrier' nor 'direct'.
-- 
antTrackingRxModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 17 1 1 }

AntTrackingRxMode   	 ::= ENUMERATED
{
	 carrierTrackingMode 	 	 (0)
,	 crossCorrelationMode	 	 (1)
}



-- This enumerated parameter configures and reports the polarization of the channel
--  that shall be used for tracking purposes. If automatic selection is chosen, the
--  parameter specifies how much larger in 1/10 dB the power observed for the unselected
--  polarization must be before a switch-over to the polarization with the stronger
--  signal is performed.
-- 
-- If the same receiver is used for telemetry reception and
--  antenna steering, setting of this parameter is not possible and the value reported
--  by this is a copy of the rtn401CarrierRcptPolarization parameter or a TBD parameter
--  of the CCSDS 415 Return Channel Reception FR Set.
antTrackingSignalPolarizationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 18 1 1 }

AntTrackingSignalPolarization	 ::= CHOICE
{
	 lhc                 	 [0]	 	 NULL
,	 rhc                 	 [1]	 	 NULL
,	 -- The engineering unit of this element is 1/10 dB.
	 autoHysteresis      	 [2]	 	 INTEGER  (0 .. 100)
,	 -- The engineering unit of this element is Hertz.
	 combining           	 [3]	 	 INTEGER  (10 .. 100000)
}



-- This parameter reports the return link signal level in tenth of dBm as observed by
--  the tracking receiver, i.e., the signal level derived from the tracking receiver
--  AGC reading. As to have comparable, i.e., station level plan independent values,
--  the level reading should be calibrated to the LNA input. Due to the levels to be
--  expected, the numbers will always be negative.
-- 
-- If the same receiver is used for
--  telemetry reception and antenna steering, the value reported by this is a copy of
--  the rtn401CarrierRcptSignalLevel parameter or a TBD parameter of the CCSDS 415 Return
--  Channel Reception FR Set. 
-- If a tracking receiver is not available or not used,
--  this parameter shall be flagged as undefined.
-- In some implementations one receiver
--  may be used both for antenna tracking and reception of telemetry and ranging. If
--  so, the parameters of that receiver will be represented in both the Antenna FR type
--  and the Rtn401SpaceLinkCarrierRcpt FR type.
antTrackingRxInpLevelType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 19 1 1 }

-- The engineering unit of this 1/10 dBm
AntTrackingRxInpLevel	 ::= INTEGER  (-2000 .. -30)


-- This parameter configures and reports the nominal return carrier frequency disregarding
--  any Doppler shift. 
-- 
-- If the same receiver is used for telemetry reception and
--  antenna steering, setting of this parameter is not possible and the value reported
--  by this is a copy of the rtn401CarrierRcptNominalFreq parameter or a TBD parameter
--  of the CCSDS 415 Return Channel Reception FR Set.  
-- 
antTrackingRxNominalFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 20 1 1 }

-- The engineering unit of this parameter is Hertz.
AntTrackingRxNominalFreq	 ::= INTEGER  (2200000000 .. 32300000000)


-- This parameter configures and reports the band in Hz centered around the antTrackingRxNominalFreq,
--  possibly corrected for the expected Doppler offset (as configured by the antTrackingRxPredictMode
--  parameter) in which the receiver shall search for the carrier signal. This parameter
--  is also valid in case of a suppressed carrier modulation scheme.
-- 
-- If the same
--  receiver is used for telemetry reception and antenna steering, setting of this parameter
--  is not possible and the value reported by this is a copy of the rtn401CarrierRcptFreqSearchRange
--  parameter or a TBD parameter of the CCSDS 415 Return Channel Reception FR Set. 
--  
antTrackingRxFreqSearchRangeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 21 1 1 }

-- The engineering unit of this parameter is Hertz.
AntTrackingRxFreqSearchRange	 ::= INTEGER  (0 .. 1500000)


-- This enumerated parameter configures and reports for which condition the Doppler
--  predicts have been calculated. It can take on three values:
-- - none: no information
--  regarding the expected Doppler shift is available and therefore the nominal frequency
--  is used;
-- - oneWay: this mode will be used when the spacecraft is not locked to
--  a forward link signal or while the spacecraft transponder is commanded to non-coherent
--  mode or when the spacecraft receiver is in 'coherency enabled' mode and the forward
--  link carrier frequency is ramped such that the Doppler on the forward link is compensated,
--  i.e., the spacecraft always 'sees' the nominal forward link frequency; in this case
--  it does not matter if the forward link is radiated by the same station as the one
--  that is receiving the return link or a different station; 
-- - twoWay: this mode
--  is applied when the spacecraft receiver is commanded to 'coherency enabled' mode
--  and the station that is receiving the return link also radiates the forward link,
--  the latter at a constant frequency;
-- - threeWay: this mode is applied when the spacecraft
--  receiver is in 'coherency enabled' mode and a station different from the one receiving
--  the return link is radiating the forward link signal at a known constant frequency.
-- 
-- If
--  the same receiver is used for telemetry reception and antenna steering, setting
--  of this parameter is not possible and the value reported by this is a copy of the
--  rtn401CarrierRcptPredictMode parameter or a TBD parameter of the CCSDS 415 Return
--  Channel Reception FR Set.  
-- 
antTrackingRxPredictModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 22 1 1 }

AntTrackingRxPredictMode	 ::= ENUMERATED
{
	 none                	 	 (0)
,	 oneWay              	 	 (1)
,	 twoWay              	 	 (2)
,	 threeWay            	 	 (3)
}



-- This parameter configures and reports the tracking receiver's dual-sided tracking
--  loop bandwidth in tenth Hz. Depending on the mode the tracking receiver operates
--  in, this is either the bandwidth of the PLL tracking the remnant carrier or the
--  frequency range observed for checking spectral symmetry.
-- 
-- This parameter configures
--  and reports the dual-sided tracking loop bandwidth in tenth Hz of the receiver.
--  Depending on the mode the tracking receiver operates in, this is either the bandwidth
--  of the PLL tracking the remnant carrier or the frequency range observed for checking
--  spectral symmetry. This parameter also configures and reports the duration in seconds
--  within which the bandwidth reduction to the newly commanded loop bandwidth shall
--  reached. This gradual change of the loop bandwidth is intended to avoid loss of
--  lock. The duration for the gradual bandwidth change can be set to 'auto' or set
--  to a specific duration. If the duration is set to 0, the newly commanded bandwidth
--  is applied immediately. 
-- 
-- If the same receiver is used for telemetry reception
--  and antenna steering, setting of this parameter is not possible and the value reported
--  by this is a copy of the rtn401CarrierRcptTrackingLoopBwdth parameter or a TBD parameter
--  of the CCSDS 415 Return Channel Reception FR Set. 
antTrackingRxLoopBwdthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 23 1 1 }

AntTrackingRxLoopBwdth	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/10 Hertz
	 trackingLoopBwdth   	 INTEGER  (1 .. 30000)
,	 loopBwdthChangeDuration	 CHOICE
	 {
	 	 -- The time during which the bandwidth is gradually changed to the newly set value is chosen automatically.
	 	 auto                	 [0]	 	 NULL
,	 	 -- The engineering unit of this element is second.
	 	 bwdthChangeDuration 	 [1]	 	 INTEGER  (0 .. 100)
	 }

}



-- This enumerated parameter configures and reports the order of the carrier tracking
--  loop. It can take on the following values:
-- - 'first order': such loop is hardly
--  ever used because it has a static phase error even in case of a constant return
--  link carrier frequency;
-- - 'second order': this is the most commonly used loop as
--  it has no static phase error for a constant return link carrier frequency;
-- - 'third
--  order': such configuration may have to be used in case of high Doppler rates, as
--  such loop has no static phase error even when the return link carrier frequency
--  is sweeping, but initial acquisition is more difficult with such loop. 
-- 
-- If the
--  same receiver is used for telemetry reception and antenna steering, setting of this
--  parameter is not possible and the value reported by this is a copy of the rtn401CarrierRcptOrderOfLoop
--  parameter or a TBD parameter of the CCSDS 415 Return Channel Reception FR Set. 
antTrackingRxOrderOfLoopType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 24 1 1 }

AntTrackingRxOrderOfLoop	 ::= ENUMERATED
{
	 firstOrder          	 	 (0)
,	 secondOrder         	 	 (1)
,	 thirdOrder          	 	 (2)
}



-- This enumerated parameter reports the lock status of the receiver and as such is
--  only supported by antennas that are configured to operate in antPointingMode = 'closedLoop'
--  mode. The values the parameter may have are:
-- - 'notLocked': the tracking receiver
--  is not locked on the return link signal and therefore cannot drive the antenna pointing;
--  
-- - 'locked': the tracking receiver has locked on the return link signal and consequently
--  is driving the antenna pointing.
-- As a consequence, the antPointingMode will have
--  changed to 'programTrack' and won't return to 'closedLoop' until receiver lock is
--  (re-)acquired. 
-- 
-- If the same receiver is used for telemetry reception and antenna
--  steering, the value reported by this is a copy of the element carrierLock of the
--   rtn401CarrierRcptCarrierLockStat parameter or a TBD parameter of the CCSDS 415
--  Return Channel Reception FR Set. 
antTrackingRxLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 25 1 1 }

AntTrackingRxLockStat	 ::= ENUMERATED
{
	 notLocked           	 	 (0)
,	 locked              	 	 (1)
}



-- This parameter configures and reports the length in minutes of the period during
--  which the wind speed and peak wind speed are observed for the calculation of the
--  antMeanWindSpeed and antPeakWindSpeed parameters.
antWindIntegrationTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 26 1 1 }

-- The engineering unit of this parameter is minutes.
AntWindIntegrationTime	 ::= INTEGER  (1 .. 60)


-- This parameter reports the wind speed as observed close to the antenna. This parameter
--  is measured in tenth m/s and averaged over the most recent period where the length
--  of the period is specified by the antWindIntegrationTime parameter.
antMeanWindSpeedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 27 1 1 }

-- The engineering unit of this parameter is 1/10 meter per second.
AntMeanWindSpeed    	 ::= INTEGER  (0 .. 1000)


-- This parameter reports the highest wind speed observed close to the antenna during
--  the most recent period where the length of the period is specified by the antWindIntegrationTime
--  parameter. This parameter is measured in tenth m/s.
antPeakWindSpeedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 28 1 1 }

-- The engineering unit of this parameter is 1/10 meter per second.
AntPeakWindSpeed    	 ::= INTEGER  (0 .. 1000)


-- This parameter reports the current wind direction in degrees, where 0 degrees corresponds
--  to north and 90 degrees to east.
antWindDirectionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 29 1 1 }

-- The engineering unit of this parameter is degree.
AntWindDirection    	 ::= INTEGER  (0 .. 359)


-- This parameter reports the amount of precipitation in mm that accumulated since 0:00
--  UTC of the current day.
antAccumulatedPrecipitationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 30 1 1 }

-- The engineering unit of this parameter is millimeter.
AntAccumulatedPrecipitation	 ::= INTEGER  (0 .. 100)


-- This parameter reports the precipitation rate in mm/h as observed during the most
--  recent hour.
antPrecipitationRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 31 1 1 }

-- The engineering unit of this parameter is millimeter per hour.
AntPrecipitationRate	 ::= INTEGER  (0 .. 100)


-- This parameter reports the relative humidity in % as observed by an outdoor meteorological
--  sensor close to the antenna. This parameter shall be flagged as invalid if the value
--  from the meteo unit is invalid and it shall be flagged as unavailable if this parameter
--  is not available at this time.
-- Note: Time-tagged meteo data (relative humidity,
--  atmospheric pressure, temperature) is regarded a radiometric product and therefore
--  not part of the monitoring data.
antRelativeHumidityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 32 1 1 }

-- The engineering unit of this parameter is percent.
AntRelativeHumidity 	 ::= INTEGER  (0 .. 100)


-- This parameter reports the atmospheric pressure in hPa as observed by an outdoor
--  meteorological sensor at the station. This parameter shall be flagged as invalid
--  if the value from the meteo unit is invalid and it shall be flagged as unavailable
--  if this parameter is not available at this time.
antAtmosphericPressureType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 33 1 1 }

-- The engineering unit of this parameter is 100 Pascal (hPa).
AntAtmoshericPressure	 ::= INTEGER  (800 .. 1100)


-- This parameter reports the temperature in °C as observed by an outdoor meteorological
--  sensor at the station. This parameter shall be flagged as invalid if the value from
--  the meteo unit is invalid and it shall be flagged as unavailable if this parameter
--  is not available at this instant in time.
antAmbientTemperatureType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 1 34 1 1 }

-- The engineering unit of this parameter is degree Celsius.
AntAmbientTemperature	 ::= INTEGER  (-100 .. 100)


-- The event value reports the antResourceStatValue that applies since the notified
--  antResourceStatChange event occurred.
antEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 2 1 1 1 }

AntEventResourceStatValue	 ::= AntResourceStat


-- The event value reports the antTrackingRxLockStat that applies since the notified
--  antTrackingRxLockStatChange event occurred.
antEventTrackingRxLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 2 2 1 1 }

AntEventTrackingRxLockStat	 ::= AntTrackingRxLockStat


-- The event value reports if the wind condition are critical in the sense that stowing
--  of the antenna might become necessary ('warning') or that the wind speed necessitates
--  the immediate stowing of the antenna ('stowing').
antWindSpeedCriticalityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 2 3 1 1 }

AntWindSpeedCriticality	 ::= ENUMERATED
{
	 stowing             	 	 (0)
,	 warning             	 	 (1)
}



-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the antenna FR and
--  the parameter value must be of the same type as the parameter value that shall be
--  set.
antContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1000 3 1 1 1 }

AntContrParamIdsAndValues	 ::= DirectiveQualifier


-- This FR type is still TBD
antArrayType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 1001 }




-- The Ccsds401SpaceLinkCarrierXmit FR accepts as input for modulation of the carrier
--  the optionally convolutionally encoded physical channel symbol stream from the FlfFrameSyncChnEncodeAndOidGen
--  FR or from the TcPlopSyncAndChnlEncode FR. It also accepts from the RngXmit FR the
--  ranging signal for modulation of the carrier.
-- The Ccsds401SpaceLinkCarrierXmit
--  FR provides the to be radiated carrier signal to the antenna FR and the actual carrier
--  frequency and phase to the NonValRmDataCollection FR. 	
ccsds401SpaceLinkCarrierXmitType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 }




-- This enumerated parameter reports the ccsds401SpaceLinkCarrierXmit FR resource status
--  and can take on four values:
-- - 'configured': the transmit equipment has been configured,
--  but the carrier has not been brought up or has been stopped;
-- - 'operational': the
--  transmit link is active, i.e., the carrier is up;
-- - 'interrupted': a failure has
--  been detected, e.g. carrier still on outside the transmission mask, that resulted
--  in the carrier being shut down;
-- - 'halted': the transmit link has been taken out
--  of service, e.g. due to failed HPA cooling.
ccsds401CarrierXmitResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 1 1 1 }

Ccsds401CarrierXmitResourceStat	 ::= ResourceStat


-- This parameter configures and reports the name assigned to the physical transmission
--  channel. This name is a Visible String which has a length of 1 to 32 characters.
ccsds401CarrierXmitPhysChnlNameType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 2 1 1 }

Ccsds401CarrierXmitPhysChnlName	 ::= VisibleString (SIZE( 1 .. 32)) 


-- This enumerated parameter configures and reports the current state of the carrier
--  radiation and can take on three values:
-- - 'radiating into space': the carrier is
--  presently up and the signal is radiated via the antenna;
-- - 'radiating into test
--  load': the carrier is presently up and the signal is radiated into the water load;
-- -
--  'non-radiating': the carrier is presently down, i.e., no signal is being radiated.
ccsds401CarrierXmitStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 3 1 1 }

Ccsds401CarrierXmitStat	 ::= ENUMERATED
{
	 nonRadiating        	 	 (0)
,	 radiatingIntoSpace  	 	 (1)
,	 radiatingIntoTestLoad	 	 (2)
}



-- This parameter configures and reports the current transmit link signal level expressed
--  as Equivalent Isotropically Radiated Power (EIRP) in dBW.
ccsds401CarrierXmitEirpType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 4 1 1 }

-- The engineering unit of this parameter is dBW.
Ccsds401CarrierXmitEirp	 ::= INTEGER  (0 .. 150)


-- This enumerated parameter configures and reports the configured transmit link polarization
--  and can take on two values:
-- - 'lcp': the carrier is radiated with left hand circular
--  polarization;
-- - 'rcp': the carrier is radiated in right hand circular polarization.
-- Note:
--  Polarization is defined from the point of view of the source, i.e., in the direction
--  of the wave propagation.
ccsds401CarrierXmitPolarizationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 5 1 1 }

Ccsds401CarrierXmitPolarization	 ::= ENUMERATED
{
	 lhc                 	 	 (0)
,	 rhc                 	 	 (1)
}



-- This parameter reports the current transmit frequency in Hz. In general, the frequency
--  will be constant, except during the transmit link sweep and for Category B missions
--  in case the transmit link is being ramped to compensate the Doppler shift and rate
--  on the transmit link.
ccsds401CarrierXmitActualCarrierFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 6 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierXmitActualCarrierFreq	 ::= INTEGER  (2015000000 .. 40500000000)


-- This parameter configures and reports the nominal transmit link frequency in Hz and
--  if the transmit link frequency shall be ramped to compensate the 1-way Doppler offset.
ccsds401CarrierXmitNominalCarrierFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 7 1 1 }

-- The engineering unit of this parameter is Hertz / none.
Ccsds401CarrierXmitNominalCarrierFreq	 ::= SEQUENCE
{
	 -- The engineering unit of this element is Hertz.
	 nominalXmitFreq     	 INTEGER  (2025000000 .. 40500000000)
,	 xmitLinkRamping     	 ENUMERATED
	 {
	 	 rampingOff          	 	 (0)
	 ,	 rampingOn           	 	 (1)
	 }

}



-- This enumerated parameter reports if the frequency generation of the FR is locked
--  to a reference frequency or free running. It can take on the values
-- - 'lockedToRefFreq;
-- -
--  'noRefFreqAvailable'.
ccsds401CarrierXmitReferenceFreqLockType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 8 1 1 }

Ccsds401CarrierXmitReferenceFreqLock	 ::= ENUMERATED
{
	 noRefFreqAvailable  	 	 (0)
,	 lockedToRefFreq     	 	 (1)
}



-- This enumerated parameter configures and reports the current state of the carrier
--  sweep and can take on two values:
-- - 'active': the carrier is presently being swept;
-- -
--  'not active': the carrier is presently not being swept, i.e., the nominal frequency
--  possibly compensated for Doppler is being radiated. 
-- Modulation shall be forced
--  off, whenever the sweep is active. In case the transmit link frequency is being
--  ramped to compensater Doppler shift and rate on the transmit link (Category B missions
--  only), this is not regarded to be a sweep.
-- The sweep procedure is started by setting
--  the ccsds401CarrierXmitSweepProcStat parameter to 'active' by means of the ccsds401CarrierXmitSetContrParams
--  directive. Once the sweep procedure as specified by the parameter ccsds401CarrierXmitSweepProfile
--  is completed, the ccsds401CarrierXmitSweepProcStat parameter is set automatically
--  to 'notActive'. and modulation by TC and ranging is (re-)enabled. 
-- If necessary,
--  the sweep procedure while executing can be stopped by setting the ccsds401CarrierXmitSweepProcStat
--  parameter to 'notActive' using the ccsds401CarrierXmitSetContrParams directive.
--  In that case the transmit link carrier frequency jumps back to the frequency set
--  by the ccsds401CarrierXmitNominalCarrierFreq parameter, compensated for 1-way Doppler
--  if so configured.
ccsds401CarrierXmitSweepProcStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 9 1 1 }

Ccsds401CarrierXmitSweepProcStat	 ::= ENUMERATED
{
	 active              	 	 (0)
,	 notActive           	 	 (1)
}



-- This complex parameter configures and reports the start frequency in Hz of the first
--  leg of the sweep and for each leg it then specifies the stop frequency in Hz, the
--  sweep rate in Hz/s and the duration of the dwell period in seconds (i.e., the time
--  during which the carrier frequency is not changed) before the next leg is started.
--  The assumption is that there are no frequency discontinuities, i.e., the start frequency
--  of a sweep leg is always equal to the stop frequency of the previous leg.
-- 
-- If
--  parameter ccsds401CarrierXmitNominalCarrierFreq is configured such that by means
--  of ramping of the transmit link frequency the 1-way Doppler is compensated, then
--  the specified sweep profile frequencies will be modified automatically in accordance
--  with the Doppler offset applicable at the given time.
ccsds401CarrierXmitSweepProfileType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 10 1 1 }

Ccsds401CarrierXmitSweepProfile	 ::= SEQUENCE
{
	 -- The engineering unit of this parameter is Hertz.
	 startfreq           	 INTEGER  (2025000000 .. 40500000000)
,	 sweepLegs           	 SEQUENCE  (SIZE( 1 .. 5))  OF	 SEQUENCE
	 	 {
	 	 	 -- The engineering unit of this parameter is second
	 	 	 dwellTime           	 INTEGER  (0 .. 20)
,	 	 	 -- The engineering unit of this parameter is hertz per second.
	 	 	 sweepRate           	 INTEGER  (1 .. 32000)
,	 	 	 -- The engineering unit of this parameter is Hertz.
	 	 	 endFreq             	 INTEGER  (2025000000 .. 40500000000)
	 	 }

}



-- This enumerated parameter configures and reports the current state of the carrier
--  modulation and can take on two values:
-- - 'on': the carrier is presently being modulated;
-- -
--  'off': the carrier is presently not being modulated.
-- Note: This parameter reports
--  the modulation being off also when this is not explicitly commanded, e.g. when it
--  is forced to 'off' automatically because the transmit link sweep is active (ccsds401CarrierXmitSweepProcedure
--  = 'active').
ccsds401CarrierXmitModType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 11 1 1 }

Ccsds401CarrierXmitMod	 ::= ENUMERATED
{
	 off                 	 	 (0)
,	 on                  	 	 (1)
}



-- This parameter reports on the status of the two modulator inputs for TC and Rng.
--  Both will be disabled when ccsds401CarrierXmitMod = 'off' or ccsds401CarrierXmitSweepProcStat
--  = 'active'. The TC input will be enabled when ccsds401CarrierXmitMod = 'on' and
--  ccsds401CarrierXmitSweepProcStat = 'notActive'. The Rng input will be enabled under
--  the same conditions except if the TC input is being used and ccsds401CarrierXmitTcPriority
--  = 'yes'. 
ccsds401CarrierXmitModInputStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 12 1 1 }

Ccsds401CarrierXmitModInputStat	 ::= SEQUENCE
{
	 tcInput             	 ENUMERATED
	 {
	 	 disabled            	 	 (0)
	 ,	 enabled             	 	 (1)
	 }

,	 rngInput            	 ENUMERATED
	 {
	 	 disabled            	 	 (0)
	 ,	 enabled             	 	 (1)
	 }

}



-- This enumerated parameter configures and reports if the ranging signal shall be suppressed
--  in the presence of a to be radiated telecommand signal. It can take on the values
-- 'yes'
-- 'no'
ccsds401CarrierXmitTcPriorityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 13 1 1 }

Ccsds401CarrierXmitTcPriority	 ::= ENUMERATED
{
	 yes                 	 	 (0)
,	 no                  	 	 (1)
}



-- This parameter configures and reports whether the symbol stream directly bpsk modulates
--  the transmit carrier such that the carrier is suppressed or directly bi-phase-L
--  modulates the carrier such that there is a remnant carrier or modulates a subcarrier
--  that in turn modulates the carrier. It can take on the following values:
-- - 'bpsk':
--  the carrier is bpsk modulated by the input data symbol stream; 
-- - 'direct': the
--  carrier is directly bi-phase-L modulated by the input data symbol stream;
-- - 'subcarrier':
--  the carrier modulating signal is the subcarrier which in turn is PSK modulated by
--  the to be radiated symbol stream.
-- For all three modulation options the parameter
--  specifies if the Doppler shift of the symbol stream shall be compensated and if
--  so, if a fixed offset (in 1/10000 Hz) shall be applied or if the symbol rate shall
--  be continuously updated (ramped) such that the spacecraft does not "see" any Doppler
--  shift of the symbol rate. Given that CCSDS 401.0 prescribes that subcarrier and
--  symbol rate have to be coherent, the subcarrier if applicable is Doppler shift compensated
--  in the same way as the symbol rate.
-- As applicable, the nominal symbol rate (in
--  1/10000 Hz) and nominal subcarrier frequency (in 1/10000 Hz) and the associated
--  modulation index (in 1/100 rad) are specified.
ccsds401CarrierXmitSymbolStreamModTypeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 14 1 1 }

Ccsds401CarrierXmitSymbolStreamModType	 ::= SEQUENCE
{
	 symbolRateDopplerCompensation	 CHOICE
	 {
	 	 noCompensation      	 [0]	 	 NULL
,	 	 -- The engineering unit of this parameter is 1/1000 Hertz.
	 	 staticOffset        	 [1]	 	 INTEGER  (-30000000 .. 30000000)
,	 	 -- Given that CCSDS requires coherency of subcarrier and symbol clock, ramping of the symbol rate implies that also the subcarrier frequency is ramped, in case a subcarrier is used.
	 	 ramping             	 [2]	 	 NULL
	 }

,	 modType             	 CHOICE
	 {
	 	 bpsk                	 [0]	 	 SEQUENCE
	 	 {
	 	 	 -- The filter may be of the type Square Root Raised Cosine, 6-pole Butterworth, or equivalent provided that the spectral mask limits are respected.
	 	 	 bandpassFilter      	 ENUMERATED
	 	 	 {
	 	 	 	 notApplied          	 	 (0)
	 	 	 ,	 applied             	 	 (1)
	 	 	 }

,	 	 	 bpskSymbolRateAndPcmFormat	 CHOICE
	 	 	 {
	 	 	 	 ccsds               	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 symbolRate          	 INTEGER  (100000000 | 200000000 | 400000000 | 800000000 | 1600000000 | 3200000000 | 6400000000 | 12800000000 | 25600000000 | 51200000000 | 102400000000 | 204800000000)
,	 	 	 	 	 pcmFormat           	 PcmFormat (biPhaseL)
	 	 	 	 }

,	 	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 symbolRate          	 INTEGER  (100000000 .. 204800000000)
,	 	 	 	 	 pcmFormat           	 PcmFormat (biPhaseL | biPhaseM | biPhaseS)
	 	 	 	 }

	 	 	 }

	 	 }

,	 	 direct              	 [1]	 	 SEQUENCE
	 	 {
	 	 	 -- The engineering unit of this parameter is 1/100 radian
	 	 	 symbolStreamDirectModulationIndex	 INTEGER  (20 .. 140)
,	 	 	 directSymbolRateAndPcmFormat	 CHOICE
	 	 	 {
	 	 	 	 ccsds               	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 symbolRate          	 INTEGER  (400000000 | 800000000 | 1600000000 | 3200000000 | 6400000000 | 12800000000 | 25600000000)
,	 	 	 	 	 pcmFormat           	 PcmFormat (biPhaseL)
	 	 	 	 }

,	 	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 symbolRate          	 INTEGER  (400000000 .. 25600000000)
,	 	 	 	 	 pcmFormat           	 PcmFormat (biPhaseL | biPhaseM | biPhaseS)
	 	 	 	 }

	 	 	 }

	 	 }

,	 	 subcarrier          	 [2]	 	 SEQUENCE
	 	 {
	 	 	 subcarrierFreqSymbolRateAndPcmFormat	 CHOICE
	 	 	 {
	 	 	 	 ccsds               	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 subcarrierFreqAndSymbolRate	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 subcarrier8Khz      	 [0]	 	 SEQUENCE
	 	 	 	 	 	 {
	 	 	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz.
	 	 	 	 	 	 	 subcarrierNominalFrequency	 INTEGER  (800000000)
,	 	 	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz.
	 	 	 	 	 	 	 nominalSymbolRate   	 INTEGER  (781250 | 1562500 | 3125000 | 6250000 | 12500000 | 25000000 | 50000000 | 100000000 | 200000000)
	 	 	 	 	 	 }

,	 	 	 	 	 	 subcarrier16Khz     	 [1]	 	 SEQUENCE
	 	 	 	 	 	 {
	 	 	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz.
	 	 	 	 	 	 	 subcarrierNominalFrequency	 INTEGER  (1600000000)
,	 	 	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz
	 	 	 	 	 	 	 nominalSymbolRate   	 INTEGER  (781250 | 1562500 | 3125000 | 6250000 | 12500000 | 25000000 | 50000000 | 100000000 | 200000000 | 400000000)
	 	 	 	 	 	 }

	 	 	 	 	 }

,	 	 	 	 	 pcmFormat           	 PcmFormat (nrzL | nrzM)
	 	 	 	 }

,	 	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz.
	 	 	 	 	 nominalSubcarrierFrequency	 INTEGER  (800000000 .. 1600000000)
,	 	 	 	 	 -- The engineering unit of this parameter is 1/100000 Hertz.
	 	 	 	 	 nominalSymbolRate   	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 -- The engineering unit of this element is 1/10000 symbols per second.
	 	 	 	 	 	 nonCoherent         	 [0]	 	 INTEGER  (781250 .. 400000000)
,	 	 	 	 	 	 -- This element specifies the integer divisor of the subcarrier frequency for specifying the symbol rate in symbols per second.
	 	 	 	 	 	 coherent            	 [1]	 	 INTEGER  (4 .. 2048)
	 	 	 	 	 }

,	 	 	 	 	 pcmFormat           	 PcmFormat (nrzL | nrzM | nrzS)
	 	 	 	 }

	 	 	 }

,	 	 	 -- The engineering unit of this parameter is 1/100 radian.
	 	 	 subcarrierModIndex  	 INTEGER  (20 .. 140)
	 	 }

	 }

}



-- This parameter configures and reports the configured peak modulation index for the
--  ranging signal in 1/100 radians. If the ccsds401CarrierXmitSymbolStreamModType is
--  'bpsk', concurrent transmission of telecommands and ranging signals is not possible.
ccsds401CarrierXmitRngModIndexType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 15 1 1 }

-- The engineering unit of this parameter is 1/100 radian.
Ccsds401CarrierXmitRngModIndex	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/100 radian.
	 duringAmbiguityResolution	 INTEGER  (0 .. 140)
,	 -- The engineering unit of this element is 1/100 radian
	 afterAmbiguityResolution	 INTEGER  (0 .. 140)
}



-- This parameter reports the actual subcarrier frequency in 1/1000 Hz.  The fine resolution
--  is specified here as to enable reporting of the fine tuning of the subcarrier frequency
--  in cases where Doppler shift compensation is applied. In case that no subcarrier
--  is used (ccsds401CarrierXmitSymbolStreamModType ≠ 'subcarrier'), this parameter
--  shall report '0'.  
-- Note: The specified range is intended to also cover the case
--  of non-CCSDS missions. 
ccsds401CarrierXmitSubcarrierFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 16 1 1 }

-- The engineering unit of this parameter is 1/10000 Hertz
Ccsds401CarrierXmitSubcarrierFreq	 ::= INTEGER  (0 .. 320000000)


-- This enumerated parameter configures and reports if the subcarrier is currently being
--  modulated by the TC symbol streaam and can take on two values:
-- - 'on': the subcarrier
--  is currently being modulated;
-- - 'off': the subcarrier is currently not being modulated.
-- In
--  case no subcarrier is used (ccsds401CarrierXmitSymbolStreamModType ≠ subcarrier'),
--  this parameter shall be flagged as undefined.
ccsds401CarrierXmitSubcarrierModType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 17 1 1 }

Ccsds401CarrierXmitSubcarrierMod	 ::= ENUMERATED
{
	 off                 	 	 (0)
,	 on                  	 	 (1)
}



-- This parameter reports the actual transmit link symbol rate in 1/10000 Hz, 
ccsds401CarrierXmitSymbolRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 1 18 1 1 }

-- The engineering unit of this parameter is 1/10000 Hertz.
Ccsds401CarrierXmitSymbolRate	 ::= INTEGER  (78125 .. 205100000000)


-- The event value reports the ccsds401CarrierXmitResourceStat value that applies since
--  the notified ccsds401CarrierXmitStatChange event occurred.
ccsds401CarrierXmitEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 2 1 1 1 }

Ccsds401CarrierXmitEventResourceStatValue	 ::= Ccsds401CarrierXmitResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the Ccsds401SpaceLinkCarrierXmit
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
ccsds401CarrierXmitContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2000 3 1 1 1 }

Ccsds401CarrierXmitContrParamIdsAndValues	 ::= DirectiveQualifier


-- This FR does not take any input. 
-- It provides the ranging signal to be radiated
--  to the spacecraft to the Forward 401 Space Link Carrier Transmission FR for modulation
--  onto the forward carrier.
-- It provides the timing information needed by the Range
--  and Doppler Extraction FR.
-- 
rngXmitType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 }




-- This enumerated parameter reports the RngXmit FR resource status and can take on
--  four values:
-- - 'configured';
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
rngXmitResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 1 1 1 1 }

RngXmitResourceStat 	 ::= ResourceStat


-- This enumerated parameter configures and reports if the ranging system is active
--  and can take on two values:
-- - 'enabled': the ranging system is presently active,
--  i.e., the ranging system is generating the ranging signal and modulating it on the
--  transmit carrier;
-- - 'disabled': the ranging system is presently not active as far
--  as the transmit link is concerned, i.e., no ranging signal is modulated on the transmit
--  carrier.
rngXmitModType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 1 2 1 1 }

RngXmitMod          	 ::= CHOICE
{
	 disabled            	 [0]	 	 NULL
,	 enabled             	 [1]	 	 CHOICE
	 {
	 	 tracking            	 [0]	 	 NULL
,	 	 calibrating         	 [1]	 	 CHOICE
	 	 {
	 	 	 transponderRatio221To240	 [0]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (221)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (240)
	 	 	 }

,	 	 	 transponderRatio749To880	 [1]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (749)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (880)
	 	 	 }

,	 	 	 transponderRatio221To900	 [2]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (221)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (900)
	 	 	 }

,	 	 	 transponderRatio765To240	 [3]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (765)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (240)
	 	 	 }

,	 	 	 transponderRatio221To880	 [4]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (221)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (880)
	 	 	 }

,	 	 	 transponderRatio749To240	 [5]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (749)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (240)
	 	 	 }

,	 	 	 transponderRatio749To3344	 [6]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (749)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (3344)
	 	 	 }

,	 	 	 transponderRatio3599To3344	 [7]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (3599)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (3344)
	 	 	 }

,	 	 	 transponderRatio3599To3360	 [8]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (3599)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (3360)
	 	 	 }

,	 	 	 transponderRatio749ToSet2652To2800	 [9]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (749)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (2652 | 2662 | 2678 | 2688 | 2704 | 2720 | 2736 | 2754 | 2772 | 2784 | 2800)
	 	 	 }

,	 	 	 transponderRatio221To2772	 [10]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (221)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (2772)
	 	 	 }

,	 	 	 transponderRatio221To2850	 [11]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (221)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (2850)
	 	 	 }

,	 	 	 transponderRatio749ToSet836To864	 [12]	 	 SEQUENCE
	 	 	 {
	 	 	 	 transponderRatioNumerator	 INTEGER  (749)
,	 	 	 	 transponderRatioDenominator	 INTEGER  (836 | 840 | 846 | 850 | 854 | 858 | 864)
	 	 	 }

	 	 }

	 }

}



-- This enumerated parameter configures and reports reports the type of ranging that
--  is being used. It can take on the following values:
-- - 'toneCode': the system performs
--  range measurements in accordance with ECSS-E-50-02A or similar;
-- - 'pseudoNoise':
--  the system performs range measurements in accordance with CCSDS 414.1-B-2.
-- In addition
--  it permits to choose the Doppler compensation applied to the  ranging signal on
--  the transmit carrier. It may be
-- - 'noCompensation';
-- - 'oneWay': the spacecraft
--  "sees" the nominal ranging signal;
-- - 'twoWay': the ESLT "sees" the nominal ranging
--  signal.
rngXmitRngTypeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 1 3 1 1 }

RngXmitRngType      	 ::= SEQUENCE
{
	 dopplerCompensation 	 ENUMERATED
	 {
	 	 noCompensation      	 	 (0)
	 ,	 oneWay              	 	 (1)
	 ,	 twoWay              	 	 (2)
	 }

,	 rngType             	 CHOICE
	 {
	 	 toneCode            	 [0]	 	 SEQUENCE
	 	 {
	 	 	 -- The engineering unit of this parameter is Hertz.
	 	 	 toneFreq            	 INTEGER  (100000 .. 1500000)
,	 	 	 rngCodeLength       	 INTEGER  (1 .. 24)
,	 	 	 codeComponentAndToneXmitDuration	 SEQUENCE
	 	 	 {
	 	 	 	 -- The engineering unit of this element is second.
	 	 	 	 codeComponent       	 INTEGER  (1 .. 10000)
,	 	 	 	 toneOnly            	 CHOICE
	 	 	 	 {
	 	 	 	 	 -- The engineering unit of this element is second. The transmission of the code sequence is restarted when either the toneOnlyDuration has expired or the RngXmit FR is notified b y the RngAndDopplerExtraction FR that a range measurement has been completed. 
	 	 	 	 	 maxToneOnlyDuratiom 	 [0]	 	 INTEGER  (1 .. 100000)
,	 	 	 	 	 -- The ranging system remains in tone-only mode until either tone lock is lost or the ranging system is disabled.
	 	 	 	 	 unlimitedToneOnlyDuration	 [1]	 	 NULL
,	 	 	 	 	 -- On occurence of an ambiguity resolution failure notified by the RngAndDopplerExtraction FR the RngXmit FR can either be paused or the transmission of the code sequenmce can be restarted.
	 	 	 	 	 ambiguityResolutionFailure	 [2]	 	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 -- The parameter rngXmitMod is set to 'disabled'.
	 	 	 	 	 	 pauseRngXmit        	 [0]	 	 NULL
,	 	 	 	 	 	 -- The transmission of the code sequence is restarted.
	 	 	 	 	 	 restartCodeSequence 	 [1]	 	 NULL
	 	 	 	 	 }

	 	 	 	 }

	 	 	 }

	 	 }

,	 	 pseudoNoise         	 [1]	 	 SEQUENCE
	 	 {
	 	 	 chipRate            	 CHOICE
	 	 	 {
	 	 	 	 ccsds               	 [0]	 	 CHOICE
	 	 	 	 {
	 	 	 	 	 iis2                	 [0]	 	 SEQUENCE
	 	 	 	 	 {
	 	 	 	 	 	 i                   	 INTEGER  (2)
,	 	 	 	 	 	 k                   	 INTEGER  (8 .. 10)
	 	 	 	 	 }

,	 	 	 	 	 kis6                	 [1]	 	 SEQUENCE
	 	 	 	 	 {
	 	 	 	 	 	 i                   	 INTEGER  (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 16 | 32 | 64)
,	 	 	 	 	 	 k                   	 INTEGER  (6)
	 	 	 	 	 }

	 	 	 	 }

,	 	 	 	 -- The engineering unit of this element is chips per second.
	 	 	 	 nonCcsds            	 [1]	 	 INTEGER  (30000 .. 17000000)
	 	 	 }

,	 	 	 codeType            	 ENUMERATED
	 	 	 {
	 	 	 	 t2b                 	 	 (0)
	 	 	 ,	 t4b                 	 	 (1)
	 	 	 }

,	 	 	 -- Positive means that positive input data advance the carrier phase.
	 	 	 modulationSense     	 CHOICE
	 	 	 {
	 	 	 	 -- The modulation sense is positive.
	 	 	 	 ccsds               	 [0]	 	 NULL
,	 	 	 	 -- The modulation sense is negative.
	 	 	 	 nonCcsds            	 [1]	 	 NULL
	 	 	 }

	 	 }

	 }

}



-- This parameter reports the nominal PN ranging chip rate in Hertz which is given by
--  the transmitted carrier frequency and the parameters k and l (see the parameter
--  rngXmitRngType) and shall be calculated as specified in Table 3.1 of CCSDS 414.1.
-- 
-- 
rngXmitPnChipRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 1 4 1 1 }

-- The engineering unit of this parameter is chips per second.
RngXmitPnChipRate   	 ::= INTEGER  (30000 .. 17000000)


-- The event value reports the rngXmitResourceStat value that applies since the notified
--  rngXmitStatChange event occurred.
rngXmitEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 2 1 1 1 }

RngXmitEventResourceStatValue	 ::= RngXmitResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the RngXmit FR and
--  the parameter value must be of the same type as the parameter value that shall be
--  set.
-- 
rngXmitContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 2001 3 1 1 1 }

RngXmitContrParamIdsAndValues	 ::= DirectiveQualifier


-- The Ccsds401SpaceLinkCarrierRcpt FR accepts as input the carrier signal from the
--  Antenna 
-- FR. It provides the symbol stream demodulated from the physical channel
--  to the 
-- TmSyncAndChannelDecode FR. It provides observables needed for the creation
--  of 
-- radiometric data to the RangeAndDopplerExtraction FR.
-- It provides the carrier
--  waveform to the DdorRawDataCollection FR and to the 
-- OpenLoopRxFormatter FR. 
ccsds401SpaceLinkCarrierRcptType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 }




-- This enumerated parameter reports on the carrier reception resource status and can
--  take on four values:
-- - 'configured': the carrier reception equipment has been configured
--  and the antenna moved to point, but due to geometry or spacecraft timeline, no carrier
--  signal is expected to be seen at this time or the expected LOS time has passed where
--  again LOS may be due to geometry or due to the spacecraft timeline;
-- - 'operational':
--  the carrier reception is active, i.e., all receiving equipment is in nominal condition,
--  the expected AOS time has passed and the expected LOS has not yet been reached;
-- -
--  'interrupted': a failure has been detected, e.g. a receiver malfunction, that prevents
--  the reception of the carrier signal;
-- - 'halted': the carrier reception has been
--  taken out of service, e.g. due to a power failure affecting the carrier reception
--  string.
ccsds401CarrierRcptResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 1 1 1 }

Ccsds401CarrierRcptResourceStat	 ::= ResourceStat


-- This parameter configures and reports the name assigned to the physical channel being
--  received. This name is a Visible String which has a length of 1 to 32 characters.
ccsds401CarrierRcptPhysChnlNameType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 2 1 1 }

Ccsds401CarrierRcptPhysChnlName	 ::= VisibleString (SIZE( 1 .. 32)) 


-- This parameter configures and reports the carrier modulation type and the associated
--  parameters of the carrier being received. The following options are selectable:
-- -
--  'subcarrier': the symbol stream BPSK modulates a subcarrier which in turn phase
--  modulates the carrier;
-- - 'direct': the symbol stream directly bi-phase-L modulates
--  the carrier with a modulation index resulting in a remnant carrier.
-- - 'bpsk': the
--  symbol stream bpsk modulates the carrier which means that the carrier is suppressed.
-- -
--  'qpsk': the quadrature phase shift keying uses four phase constellatioin points
--  so that each constellation point represents two symbols of the modulating symbol
--  stream. The carrier is suppressed.
-- - 'oqpsk': as qpsk offset quadrature phase shift
--  keying uses four phase constellatioin points, but the modulation by the odd and
--  even symbol are offset by one symbol time which prevents the occurrence of 180°
--  phase shifts. 
-- - 'gmsk': the symbol stream is passed through a Gaussian filter
--  and then modulates the carrier by means of minimum-shift-keying. This suppresses
--  the carrier.
ccsds401CarrierRcptModulationTypeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 3 1 1 }

Ccsds401CarrierRcptModulationType	 ::= CHOICE
{
	 subcarrier          	 [0]	 	 SEQUENCE
	 {
	 	 symbolRate          	 CHOICE
	 	 {
	 	 	 ccsdsSubcarrierFrequencySymbolRateRatio	 [0]	 	 INTEGER  (2 .. 1024)
,	 	 	 -- The engineering unit of this element is 1/1000 symbols per second.
	 	 	 nonCcsdsAbsoluteSymbolRate	 [1]	 	 INTEGER  (1000 .. 32000000)
	 	 }

,	 	 subcarrierWaveform  	 ENUMERATED
	 	 {
	 	 	 square              	 	 (0)
	 	 ,	 sine                	 	 (1)
	 	 }

,	 	 -- The engineering unit of this element is 1/100 radian.
	 	 modulationIndexTelemetry	 INTEGER  (1 .. 150)
,	 	 pcmFormat           	 PcmFormat (nrzl)
	 }

,	 direct              	 [1]	 	 SEQUENCE
	 {
	 	 -- The engineering unit of this parameter is 1/1000 symbols per second.
	 	 symbolRate          	 INTEGER  (8000000 .. 256000000)
,	 	 -- The engineering unit of this parameter is 1/100 radian.
	 	 modulationIndexTelemetry	 INTEGER  (1 .. 150)
,	 	 pcmFormat           	 PcmFormat (biPhaseL)
	 }

,	 bpsk                	 [2]	 	 SEQUENCE
	 {
	 	 -- The engineering unit of this parameter is 1/1000 symbols per second.
	 	 symbolRate          	 INTEGER  (64000000 .. 20000000000)
,	 	 pcmFormat           	 PcmFormat (nrzS)
,	 	 -- Enable or disable the square-root raised cosine matched filter depending on the filtering applied on the spacecraft side.
	 	 matchedFilter       	 ENUMERATED
	 	 {
	 	 	 matchedFilterOff    	 	 (0)
	 	 ,	 matchedFilterOn     	 	 (1)
	 	 }

	 }

,	 -- This element specifies the symbol rate in 1/1000 per second.
	 qpsk                	 [3]	 	 SEQUENCE
	 {
	 	 -- This element specifies the symbol rate in 1/1000 symbols per second
	 	 symbolRate          	 INTEGER  (1000 .. 20000000000)
,	 	 constellationConfiguration	 CHOICE
	 	 {
	 	 	 -- symbol assignment to I and Q channel and the mapping of IQ pairs to the carrier phase complies with CCSDS 401
	 	 	 ccsds               	 [0]	 	 NULL
,	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 {
	 	 	 	 symbolToIqMapping   	 CHOICE
	 	 	 	 {
	 	 	 	 	 -- This is as specifiied in CCSDS 401
	 	 	 	 	 evenSymbolOnIchannel	 [0]	 	 NULL
,	 	 	 	 	 evenSymbolOnQchannel	 [1]	 	 NULL
	 	 	 	 }

,	 	 	 	 symbolPairToPhaseAssignment	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair00        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair01        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair10        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair11        	 INTEGER  (45 | 135 | 225 | 315)
	 	 	 	 }

	 	 	 }

	 	 }

,	 	 -- Enable or disable the square-root raised cosine matched filter depending on the filtering applied on the spacecraft side.
	 	 matchedFilter       	 ENUMERATED
	 	 {
	 	 	 matchedFilterOff    	 	 (0)
	 	 ,	 matchedFilterOn     	 	 (1)
	 	 }

	 }

,	 -- This element specifies the symbol rate in 1/1000 symbol per second.
	 oqpsk               	 [4]	 	 SEQUENCE
	 {
	 	 -- This element specifies the symbol rate in 1/1000 symbols per second
	 	 symbolRate          	 INTEGER  (1000 .. 20000000000)
,	 	 constellationConfiguration	 CHOICE
	 	 {
	 	 	 -- symbol assignment to I and Q channel and the mapping of IQ pairs to the carrier phase complies with CCSDS 401
	 	 	 ccsds               	 [0]	 	 NULL
,	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 {
	 	 	 	 symbolToIqMapping   	 CHOICE
	 	 	 	 {
	 	 	 	 	 -- This is as specifiied in CCSDS 401
	 	 	 	 	 evenSymbolOnIchannel	 [0]	 	 NULL
,	 	 	 	 	 evenSymbolOnQchannel	 [1]	 	 NULL
	 	 	 	 }

,	 	 	 	 symbolPairToPhaseAssignment	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair00        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair01        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair10        	 INTEGER  (45 | 135 | 225 | 315)
,	 	 	 	 	 -- Carrier phase in degrees
	 	 	 	 	 symbolPair11        	 INTEGER  (45 | 135 | 225 | 315)
	 	 	 	 }

	 	 	 }

	 	 }

,	 	 -- Enable or disable the matched filter depending on the filtering applied on the spacecraft side. The filter type may be of type Square Root Raised Cosine α = 0.5 or Butterworth 6 poles, BT = 0.5 or similar bandpass filters with BT ≤ 0.5. 
	 	 matchedFilter       	 ENUMERATED
	 	 {
	 	 	 matchedFilterOff    	 	 (0)
	 	 ,	 matchedFilterOn     	 	 (1)
	 	 }

	 }

,	 gmsk                	 [5]	 	 SEQUENCE
	 {
	 	 -- This element specifies the symbol rate in 1/1000 symbol per second.
	 	 symbolRate          	 INTEGER  (1000 .. 20000000000)
,	 	 -- The scaling factor of this parameter is 1/100
	 	 bandwidthSymbolPeriodProduct	 INTEGER  (0 .. 1000)
,	 	 concurrentGmskAndPnRng	 ENUMERATED
	 	 {
	 	 	 yes                 	 	 (0)
	 	 ,	 no                  	 	 (1)
	 	 }

	 }

}



-- This parameter configures and reports the channel (polarization) that shall be used
--  as input for reception and demodulation. It can take on the following values:
-- -
--  'lhc';
-- - 'rhc';
-- - 'autoHysteresis';
-- - 'combining'.
-- If 'autoHysteresis' is chosen,
--  the parameter specifies how much larger in 1/10 dB the power observed for the unselected
--  polarization must be before a switch-over to the polarization with the stronger
--  signal is performed.
-- 'combining' means that diversity combining of the lhc and
--  rhc channels is performed. This is only permissible for modulation schemes with
--  remnant carrier. This element of the choice specifies the bandwidth in Hertz within
--  which the the two signals shall be combined.
ccsds401CarrierRcptPolarizationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 4 1 1 }

Rtn401CarrierRcptPolarization	 ::= CHOICE
{
	 lhc                 	 [0]	 	 NULL
,	 rhc                 	 [1]	 	 NULL
,	 -- The engineering unit of this element is 1/10 dB.
	 autoHysteresis      	 [2]	 	 INTEGER  (0 .. 100)
,	 -- The enginnering unit of this element is Hertz.
	 combiningBwdth      	 [3]	 	 INTEGER  (10 .. 100000)
}



-- This parameter reports (after acquisition of signal) the power ratio of the signal
--  received with left hand circular (LHC) polarization and the signal received with
--  the orthogonal, i.e., right hand circular (RHC) polarization. If the angle reported
--  is 0 degrees, then the full power is received via the LHC channel. At 45 degrees,
--  the power in the LHC and RHC channels is equal, as if the input signal were linearly
--  polarized. At 90 degrees, the full power is received with RHC polarization.
-- Only
--  stations supporting concurrent reception of LHC and RHC polarization provide this
--  information. When this is not possible or the station is configured to use a single
--  channel only, this parameter shall be flagged as unavailable. 
ccsds401CarrierRcptPolarizationAngleType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 5 1 1 }

-- The engineering unit of this parameter is degree.
Ccsds401CarrierRcptPolarizationAngle	 ::= INTEGER  (0 .. 90)


-- This parameter configures and reports the expected level of the received signal in
--  dBm as observed at the LNA input. It shall be the total signal power so that the
--  same parameter specification applies regardless of the modulation scheme. 
ccsds401CarrierRcptExpectedSignalLevelType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 6 1 1 }

-- The engineering unit of this parameter is dBm
Ccsds401CarrierRcptExpectedSignalLevel	 ::= INTEGER  (-250 .. -30)


-- This parameter reports the difference between the actual and the predicted signal
--  level of the received signal as observed at the LNA input in 1/10 dB (actaul value
--  minus predicted value). 
ccsds401CarrierRcptSignalLevelResidualType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 7 1 1 }

-- The engineering unit of this parameter is 1/10 dB
Ccsds401CarrierRcptSignalLevelResidual	 ::= INTEGER  (-500 .. 500)


-- This parameter reports the system noise temperature in K derived from the noise density
--  observed at the receiver input. As such, it takes into account all contributions
--  to the noise temperature such as antenna microwave components, atmospheric noise
--  and cosmic microwave background noise. The noise temperature varies with weather
--  conditions and antenna elevation due to variation of the path length through the
--  atmosphere and ground noise received by the antenna side lobes.
ccsds401CarrierRcptSystemNoiseTemperatureType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 8 1 1 }

-- The engineering unit of this parameter is Kelvin.
Ccsds401CarrierRcptSystemNoiseTemperature	 ::= INTEGER  (1 .. 1000)


-- This parameter configures and reports the nominal frequency of the received carrier
--  disregarding any Doppler shift.
-- 
ccsds401CarrierRcptNominalFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 9 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierRcptNominalFreq	 ::= INTEGER  (2200000000 .. 32300000000)


-- This parameter configures and reports the band in Hz centered around the ccsds401CarrierRcptNominalFrequ,
--  possibly corrected for the expected Doppler offset, in which the receiver shall
--  search for the carrier signal. This parameter is also valid in case of a suppressed
--  carrier modulation scheme.
-- 
ccsds401CarrierRcptFreqSearchRangeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 10 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierRcptFreqSearchRange	 ::= INTEGER  (0 .. 1500000)


-- This enumerated parameter configures and reports for which condition the Doppler
--  predicts have been calculated. It can take on four values:
-- - none: no information
--  regarding the expected Doppler shift is available and therefore the nominal frequency
--  is used;
-- - 1-way: this mode will be used when the spacecraft is not locked to a
--  forward link signal or while the spacecraft transponder is commanded to non-coherent
--  mode or when the spacecraft receiver is in 'coherency enabled' mode and the forward
--  link carrier frequency is ramped such that the Doppler on the forward link is compensated,
--  i.e., the spacecraft always 'sees' the nominal forward link frequency; in this case
--  it does not matter if the forward link is radiated by the same station as the one
--  that is receiving the return link or a different station; 
-- - 2-way: this mode is
--  applied when the spacecraft receiver is commanded to 'coherency enabled' mode and
--  the station that is receiving the return link also radiates the forward link, the
--  latter at a constant frequency;
-- - 3-way: this mode is applied when the spacecraft
--  receiver is in 'coherency enabled' mode and a station different from the one receiving
--  the return link is radiating the forward link signal at a known constant frequency.
ccsds401CarrierRcptPredictModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 11 1 1 }

Ccsds401CarrierRcptPredictMode	 ::= ENUMERATED
{
	 none                	 	 (1)
,	 oneWay              	 	 (2)
,	 twoWay              	 	 (3)
,	 threeWay            	 	 (4)
}



-- This parameter configures and reports the dual-sided tracking loop bandwidth in tenth
--  Hz of the receiver and the duration in seconds within which the bandwidth reduction
--  to a newly commanded loop bandwidth shall be reached. This gradual change of the
--  loop bandwidth is intended to avoid loss of lock. The duration for the gradual bandwidth
--  change can be set to 'auto' or set to a specific duration. If the duration is set
--  to 0, the newly commanded bandwidth is applied immediately. 
ccsds401CarrierRcptTrackingLoopBwdthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 12 1 1 }

Ccsds401CarrierRcptTrackingLoopBwdth	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/10 Hertz.
	 trackingLoopBwdth   	 INTEGER  (1 .. 30000)
,	 -- The engineering unit of this element is second.
	 loopBwdthChangeDuration	 CHOICE
	 {
	 	 -- The time during which the bandwidth is gradually changed to the newly set value is chosen automatically.
	 	 auto                	 [0]	 	 NULL
,	 	 -- The engineering unit of this element is second. If it is set to 0, the newly commanded bandwidth is applied immediately.
	 	 bwdthChangeDuration 	 [1]	 	 INTEGER  (0 .. 100)
	 }

}



-- This enumerated parameter configures and reports the order of the carrier tracking
--  loop. It can take on the following values:
-- - 'first order': such loop is hardly
--  ever used because it has a static phase error even in case of a constant carrier
--  frequency being received;
-- - 'second order': this is the most commonly used loop
--  as it has no static phase error for a constant carrier frequency being received;
-- -
--  'third order': such configuration may have to be used in case of high Doppler rates,
--  as such loop has no static phase error even when the carrier frequency being received
--  is changing because of the given Doppler rate, but initial acquisition is more difficult
--  with such loop. 
ccsds401CarrierRcptOrderOfLoopType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 13 1 1 }

Ccsds401CarrierRcptOrderOfLoop	 ::= ENUMERATED
{
	 firstOrder          	 	 (0)
,	 secondOrder         	 	 (1)
,	 thirdOrder          	 	 (2)
}



-- This parameter reports the lock status for the carrier, and, if applicable, for the
--  subcarrier, and for the symbol stream.
ccsds401CarrierRcptLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 14 1 1 }

Ccsds401CarrierRcptLockStat	 ::= LockStat


-- This parameter reports the signal-to-noise ratio in the carrier tracking loop. It
--  is derived from the carrier-loop-phase-error-std-deviation (std) as follows: SNR
--  in 1/100 dB is given by 1000 log (2/(2PI std)^2) where log is to the base of 10.
--  The carrier loop phase error standard deviation (or rms value) in rad over n samples,
--  i.e. the sum of (Ei - M)^2 for i = 1 .. n is calculated, then divided by n and then
--  the square root taken.
-- A given implementation shall specify the number of samples
--  used to calculate this parameter. This shall be recorded in the Service Agreement.
ccsds401CarrierRcptCarrierLoopSnrType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 15 1 1 }

-- The engineering unit of this parameter is 1/100 dB
Ccsds401CarrierRcptCarrierLoopSnr	 ::= INTEGER  (-2800 .. 10000)


-- This parameter reports the mean value of the phase error in 1/100 radians in the
--  carrier tracking loop by summing up the loop errors Ei over a period of n samples
--  and then dividing the sum by n. The mean M should be zero unless the loop is subject
--  to a static phase error.
-- A given implementation shall specify the number of samples
--  used to calculate this paramter. This shall be recorded in the Service Agreement.
ccsds401CarrierRcptCarrierLoopMeanPhaseErrorType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 16 1 1 }

-- The engineering unit of this parameter is 1/100 radian.
Ccsds401CarrierRcptCarrierLoopMeanPhaseError	 ::= INTEGER  (-629 .. 629)


-- This parameter reports the observed carrier frequency being received in Hz. This
--  parameter therefore varies with the Doppler shift induced by the radial velocity
--  of the transmitting antenna (in general the spacecraft) relative to the receiving
--  antenna (in general the ESLT antenna). In 1-way mode, the Doppler shift applies
--  only once, but also the onboard oscillator drift affects the observed return link
--  carrier frequency. In 2-way mode in combination with a constant forward link frequency,
--  the Doppler shift approximately doubles with respect to the 1-way case, but the
--  contribution of the onboard oscillator drift is eliminated.
ccsds401CarrierRcptActualFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 17 1 1 }

-- The engineering unit of the parameter is Hertz.
Ccsds401CarrierRcptActualFreq	 ::= INTEGER  (2199700000 .. 38500000000)


-- This parameter reports the observed frequency offset in Hz of the carrier being received
--  with respect to the nominal carrier frequency. As such it reports on the oscillator
--  drift (in case of 1-way operation) on the transmitting side plus the Doppler shift
--  induced by the radial velocity between the transmitting and receiving antennas.
--  In 2-way mode, the effect of the oscillator drift at the transmitting end is eliminated.
--  In combination with a constant forward link frequency, the Doppler shift approximately
--  doubles compared to the 1-way case.
ccsds401CarrierRcptFreqOffsetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 18 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierRcptFreqOffset	 ::= INTEGER  (-5000000 .. 5000000)


-- This parameter reports the Doppler offset standard deviation in Hz over n samples.
--  Each sample Si is the difference between the actual return link frequency and the
--  predicted return link frequency where the predict takes into account the expected
--  Doppler shift. Based on these samples, the mean Doppler offset M is calculated by
--  forming the sum of n samples Si and dividing it by n. Then the sum of (Si - M)^2
--  for i = 1 .. n is calculated, divided by n and then the square root taken.
-- A given
--  implementation shall specify the number of samples used to calculate this paramter.
--  This shall be recorded in the Service Agreement.
ccsds401CarrierRcptDopplerStdDeviationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 19 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierRcptDopplerStdDeviation	 ::= INTEGER  (0 .. 5000000)


-- This parameter reports the frequency in Hz of the to be transmitted carrier that
--  corresponds to the non-coherent frequency of the received carrier divided by the
--  transponder turnaround ratio in the Doppler free case. The spacecraft is expected
--  to lock on the transmitted carrier, when it 'sees' this frequency. 
ccsds401CarrierRcptBestLockFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 20 1 1 }

-- The engineering unit of this parameter is Hertz.
Ccsds401CarrierRcptBestLockFreq	 ::= INTEGER  (2024956000 .. 40501863000)


-- This parameter configures and reports the nominal subcarrier frequency in 1/1000
--  Hz. If the applicable modulation scheme does not use a subcarrier, this parameter
--  shall be flagged as 'undefined'. 
-- Except if ccsds401CarrierRcptPredictMode is set
--  to 'none', the demudulator shall however be configured to the nominal subcarrier
--  frequency corrected for the 1-way Doppler offset because in general the subcarrier
--  is generated by the transmitting end, i.e., the spacecraft, independently of a carrier
--  received by the spacecraft and therefore subject to the 1-way Doppler shift.
ccsds401CarrierRcptNominallSubcarrierFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 21 1 1 }

-- Theengineering unit of this parameter is 1/1000 Hertz.
Ccsds401CarrierRcptNominalSubcarrierFreq	 ::= INTEGER  (2000000 .. 4000000000)


-- This parameter reports the actually received subcarrier frequency in 1/1000 Hz, i.e.,
--  this parameter reflects the Doppler shift of the subcarrier frequency. If the applicable
--  modulation scheme does not use a subcarrier, this parameter shall be flagged as
--  'undefined'.
ccsds401CarrierRcptActualSubcarrierFreqType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 22 1 1 }

-- Theengineering unit of this parameter is 1/1000 Hertz.
Ccsds401CarrierRcptActualSubcarrierFreq	 ::= INTEGER  (2000000 .. 4000000000)


-- This parameter configures and reports the subcarrier demodulator loop bandwidth expressed
--  as dual-sided subcarrier loop bandwidth to subcarrier frequency ratio. If the applicable
--  modulation scheme does not use a subcarrier, this parameter shall be flagged as
--  undefined.
ccsds401CarrierRcptSubcarrierDemodLoopBwdthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 23 1 1 }

Ccsds401CarrierRcptSubcarrierDemodLoopBwdth	 ::= REAL (1E-5 .. 1E-1)


-- This parameter reports the mean value of the phase error in 1/100 radians in the
--  subcarrier tracking loop by summing up the loop errors Ei over a period of n samples
--  and then dividing the sum by n. The mean M should be zero unless the loop is subject
--  to a static phase error.
-- A given implementation shall specify the number of samples
--  used to calculate this paramter. This shall be recorded in the Service Agreement.
ccsds401CarrierRcptSubcarrierLoopMeanPhaseErrorType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 24 1 1 }

-- The engineering unit of this parameter is 1/100 radian
Ccsds401CarrierRcptSubcarrierLoopMeanPhaseError	 ::= INTEGER  (-629 .. 629)


-- This parameter reports the subcarrier to carrier power ratio expressed in 1/100 dBc.
--  If the applicable modulation scheme does not use a subcarrier, this parameter shall
--  be flagged as 'undefined'.
ccsds401CarrierRcptSubcarrierLevelEstimateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 25 1 1 }

-- The engineering unit of this parameter is 1/100 dBc.
Ccsds401CarrierRcptSubcarrierLevelEstimate	 ::= INTEGER  (-20000 .. 0)


-- This parameter configures and reports the nominal received symbol stream rate in
--  1/1000 symbols/second. 
-- Except if ccsds401CarrierRcptPredictMode is set to 'none',
--  the demudulator shall however be configured to the nominal symbol rate corrected
--  for the 1-way Doppler offset because in general the symbol clock is generated by
--  the transmitting end, i.e., the spacecraft, independently of a carrier received
--  by the spacecraft and therefore subject to the 1-way Doppler shift.
ccsds401CarrierRcptNominalSymbolRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 26 1 1 }

-- The engineering unit of this parameter is 1/1000 symbols per second.
Ccsds401CarrierRcptNominalSymbolRate	 ::= INTEGER  (4000 .. 160000000000)


-- This parameter reports the actually received symbol stream rate in 1/1000 symbols/second,
--  i.e., this parameter reflects the Doppler shift of the symbol rate.
ccsds401CarrierRcptActualSymbolRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 27 1 1 }

-- The engineering unit of this parameter is 1/1000 symbols per second.
Ccsds401CarrierRcptActualSymbolRate	 ::= INTEGER  (4000 .. 160000000000)


-- This parameter configures and reports the symbol synchronizer loop bandwidth expressed
--  as dual-sided symbol synchronizer loop bandwidth to symbol rate ratio. 
ccsds401CarrierRcptSymbolSynchronizerLoopBwdthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 28 1 1 }

Ccsds401CarrierRcptSymbolSynchronizerLoopBwdth	 ::= REAL (1E-5 .. 1E-2)


-- This parameter reports the mean value of the phase error in 1/100 radians in the
--  symbol tracking loop by summing up the loop errors Ei over a period of n samples
--  and then dividing the sum by n. The mean M should be zero unless the loop is subject
--  to a static phase error.
-- A given implementation shall specify the number of samples
--  used to calculate this paramter. This shall be recorded in the Service Agreement.
ccsds401CarrierRcptSymbolLoopMeanPhaseErrorType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 29 1 1 }

-- The engineering unit of this parameter is 1/100 radian
Ccsds401CarrierRcptSymbolLoopMeanPhaseError	 ::= INTEGER  (-629 .. null)


-- This parameter configures and reports the expected symbol energy over noise density
--  ratio (Es/No) in 1/100 dB. Depending on the equipment, the value may be used to
--  optimize carrier acquisition and lock detection in particular for very low values
--  (e.g. - 2 dB) as they may be encountered for turbo coding with coding rates > 1/2.
--  
ccsds401CarrierRcptExpectedEsOverNoType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 30 1 1 }

-- The engineering unit of this parameter is 1/100 dB.
Ccsds401CarrierRcptExpectedEsOverNo	 ::= INTEGER  (-1000 .. 60000)


-- This parameter reports the difference in 1/10 db between the expected symbol energy
--  over noise density ratio (Es/No) and the actually observed Es/No). The algorithms
--  used to calculate the observed Es/No tend to saturate at a certain Es/No level so
--  that the reported residual may correspond to an observed Es/No that is significantly
--  lower than expected. However, this saturation happens at levels that are so high
--  that the telemetry is anyway virtually error free. 
-- It also reports the distribution
--  of the soft symbols in percent. For each symbol the deviation from the perfect +1
--  and -1 as visible from the soft bits is normalized to +/- 50%. The observed deviation
--  is summed and devided by the number of samples taken. 
-- The duration used for averaging
--  the values reported by the ccsds401CarrierRcptEsOverNoResidualAndSoftSymbolDistribution
--  parameter should be documented in the Service Agreement. 
ccsds401CarrierRcptEsOverNoResidualAndSoftSymbolDistributionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 1 31 1 1 }

Ccsds401CarrierRcptObservedEsOverNoAndSoftSymbolDistribution	 ::= SEQUENCE
{
	 -- The engineering unit of this element is 1/10 dB
	 esOverNoResidual    	 INTEGER  (-500 .. 500)
,	 -- This element is reported in percent
	 softBitDistribution 	 INTEGER  (-50 .. 50)
}



-- The event value reports the ccsds401CarrierRcptResourceStat value that applies since
--  the notified ccsds401CarrierRcptResourceSatChange event has occurred.
ccsds401CarrierRcptEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 2 1 1 1 }

Ccsds401CarrierRcptEventResourceStatValue	 ::= Ccsds401CarrierRcptResourceStat


-- The event value reports the lock status as given since the occurrence of the ccsds401CarrierRcptLockStatChange
--  event. It should be noted that loss of carrier lock implies loss of subcarrier lock
--  if a subcarrier is used and loss of symbol lock. Only the loss of carrier lock is
--  reported in this case. Loss of subcarrier lock, if a subcarrier is used, implies
--  loss of symbol lock. 
ccsds401CarrierRcptEventLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 2 2 1 1 }

Ccsds401CarrierRcptEventLockStat	 ::= Ccsds401CarrierRcptLockStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the Ccsds401SpaceLinkCarrierRcpt
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
ccsds401SpaceLinkCarrierRcptContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4000 3 1 1 1 }

Ccsds401SpaceLinkCarrierRcptContrParamIdsAndValues	 ::= DirectiveQualifier


-- The RngAndDopplerExtraction FR accepts as input the timing information from the RngXmit
--  FR and the range and Doppler data from the Ccsds401SpaceLinkCarrierRcpt FR.
-- It
--  provides range and Doppler observables to the TdmSegmentGen FR and to the NonValRmDataCollection
--  FR.
rngAndDopplerExtractionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 }




-- This enumerated parameter reports the rngAndDopplerExtractionResourceStat and can
--  take on four values:
-- - 'configured';
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
rngAndDopplerExtractionResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 1 1 1 }

RngAndDopplerExtractionResourceStat	 ::= ResourceStat


-- This parameter configures and reports if the ranging signal acquisition shall be
--  presteered in accordance with the expected Doppler shift.
rngAndDopplerExtractionPresteeringType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 2 1 1 }

RngAndDopplerExtractionPresteering	 ::= ENUMERATED
{
	 dopplerPresteeringOff	 	 (0)
,	 dopplerPresteeringOn	 	 (1)
}



-- This parameter reports the difference between actual and the predicted ranging signal
--  power to noise density ratio expressed in 1/10 dB (actual value minus predicted
--  value).
rngAndDopplerExtractionRngPowerOverNoResidualType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 3 1 1 }

-- The engineering unit of this parameter is 1/10 dB.
RngAndDopplerExtractionRngPowerOverNoResidual	 ::= INTEGER  (-1000 .. 1000)


-- This parameter reports, in 1/1000 Hz, the dual sided bandwidth of the ranging tracking
--  loop. 
rngAndDopplerExtractionRngLoopBwdthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 4 1 1 }

-- The engineering unit of this parameter is 1/1000 Hz
RngAndDopplerExtractionRngLoopBwdth	 ::= INTEGER  (1 .. 30000)


-- This parameter configures and reports the expected ranging signal power to noise
--  power in the noise density ratio within the ranging tracking loop bandwidth in 1/10
--  dB.
rngAndDopplerExtractionPredictedRngLoopSnrType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 5 1 1 }

-- The engineering unit of this parameter is 1/10 dB.
RngAndDopplerExtractionPredictedToneLoopSnr	 ::= INTEGER  (0 .. 400)


-- This parameter reports the probability in percent of successful ranging signal acquisition
--  derived from the predicted Pr/No and the configured ranging loop bandwidth, i.e.
--  from the predicted ranging loop SNR (see parameter rngAndDopplerExtractionPredictedRngLoopSnr).
rngAndDopplerExtractionRngSignalAcquisitionProbabilityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 6 1 1 }

-- The engineering unit of this parameter is percent.
RngAndDopplerExtractionRngSignalAcquisitionProbability	 ::= INTEGER  (0 .. 100)


-- This parameter configures and reports the duration of the period in milliseconds
--  during which the ranging tracking loop is operated in open-loop mode.
rngAndDopplerExtractionOpenLoopTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 7 1 1 }

-- The engineering unit of this parameter is 1/1000 second.
RngAndDopplerExtractionOpenLoopTime	 ::= INTEGER  (1 .. 10000)


-- This parameter configures and reports the duration of the period in milliseconds
--  after closure of the ranging tracking loop until loop lock is reported and range
--  measurements can start. This allows any residual loop transient to die away. 
rngAndDopplerExtractionLoopSettlingTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 8 1 1 }

-- The engineering unit of this parameter is 1/1000 second.
RngAndDopplerExtractionLoopSettlingTime	 ::= INTEGER  (1 .. 10000)


-- This enumerated value reports the tone respectively PN chip loop lock status. It
--  can take on two values:
-- - 'not locked'.
-- - 'locked'.
rngAndDopplerExtractionLoopLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 9 1 1 }

RngAndDopplerExtractionLoopLockStat	 ::= ENUMERATED
{
	 notLocked           	 	 (0)
,	 locked              	 	 (1)
}



-- This parameter reports the tone/ pn-chip to carrier power ratio expressed in 1/100
--  dBc.
rngAndDopplerExtractionRngToCarrierPowerRatioType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 10 1 1 }

-- The engineering unit of this parameter is 1/100 dB
RngAndDopplerExtractionRnglToCarrierPowerRatio	 ::= INTEGER  (-20000 .. 0)


-- This parameter configures and reports in 1/100 radians the expected ranging modulation
--  index on the received carrier.
rngAndDopplerExtractionExpectedRngModIndexType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 11 1 1 }

-- The engineering unit of this parameter is 1/100 radian.
RngAndDopplerExtractionExpectedRngModIndex	 ::= INTEGER  (0 .. 140)


-- This parameter configures and reports the tone integration time in milliseconds.
rngAndDopplerExtractionToneIntegrationTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 12 1 1 }

-- The engineering unit of this parameter is 1/1000 second.
RngAndDopplerExtractionToneIntegrationTime	 ::= INTEGER  (1 .. 100000)


-- This parameter configures and reports the integration time in seconds for the PN
--  code correlator. This time has to be selected based on the known link budget and
--  dynamics.
rngAndDopplerExtractionPnCodeIntegrationTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 13 1 1 }

-- The engineering unit of this parameter is second.
RngAndDopplerExtractionPnCodeIntegrationTime	 ::= INTEGER  (1 .. 3600)


-- This parameter reports up to which code number the replica has been correlated with
--  the received signal.
rngAndDopplerExtractionCodeNumberCorrelatedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 14 1 1 }

RngAndDopplerExtractionCodeNumberCorrelated	 ::= INTEGER  (0 .. 24)


-- This enumerated parameter reports in case of tone/code ranging if the ambiguity has
--  been resolved and in case of PN ranging if lock on the PN sequence has been achieved.
--  It can take on two values:
-- - 'yes': the ranging system has reached the state where
--  range measurements can be performed;
-- - 'no': correlation of the replica of the
--  sent signal with the received signal has not yet been achieved or has failed.
rngAndDopplerExtractionAmbiguityResolvedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 15 1 1 }

RngAndDopplerExtractionAmbiguityResolved	 ::= ENUMERATED
{
	 no                  	 	 (0)
,	 yes                 	 	 (1)
}



-- This enumerated parameter configures and reports for Doppler and PN ranging the mode
--  in which the spacecraft transponder is supposed to operate. 
rngAndDopplerExtractionSpacecraftTransponderModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 16 1 1 }

RngAndDopplerExtractionSpacecraftTransponderMode	 ::= SEQUENCE
{
	 doppler             	 ENUMERATED
	 {
	 	 nonCoherent         	 	 (0)
	 ,	 coherent            	 	 (1)
	 }

,	 ranging             	 ENUMERATED
	 {
	 	 passthrough         	 	 (0)
	 ,	 regenerative        	 	 (1)
	 }

}



-- This parameter configures and reports the expected duration of the PN code acquisition
--  by the spacecraft.
rngAndDopplerExtractionExpectedSpacecraftPnAcqDurationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 17 1 1 }

-- The engineering unit of this parameter is second.
RngAndDopplerExtractionExpectedSpacecraftPnAcqDuration	 ::= INTEGER  (1 .. 1000)


-- This parameter configures and reports the ranging measurement sampling rate in 1/1000
--  seconds.
rngAndDopplerExtractionRngMeasurementSamplingRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 18 1 1 }

-- The engineering unit of this parameter is 1/1000 second
RngAndDopplerExtractionRngMeasurementSamplingRate	 ::= INTEGER  (1 .. 3600000)


-- This parameter configures and reports the Doppler measurement sampling rate in 1/1000
--  seconds.
rngAndDopplerExtractionDopplerMeasurementSamplingRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 19 1 1 }

-- The engineering unit of this parameter is 1/1000 second
RngAndDopplerExtractionDopplerMeasurementSamplingRate	 ::= INTEGER  (1 .. 3600000)


-- This parameter configures and reports the status of the collection and delivery of
--  radiometric observables. It can take on two values:
-- - 'notActive';
-- - 'auto';
-- -
--  'active'.
-- 
-- Setting this parameter to 'notActive' disables or terminates the collection
--  of radiometric data.
-- When this parameter is 'auto', the time during which the data
--  collection is performed in accoradance with the period during which the parameter
--  rngXmitMod of the RngXmit FR is set to 'enabled' shifted by the two-way light time.
--  When the rngXmitMod parameter indicates that ranging calibration is performed, the
--  two-way-light time is disregarded and the delivered range measurements are annotated
--  as calibration data.
-- When the parameter rngAndDopplerExtractionDataCollection is
--  set to 'active', the collection of radiometric observables is attempted regardless
--  of the state of the RngXmit FR. 
-- 
rngAndDopplerExtractionDataCollectionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 20 1 1 }

RngAndDopplerExtractionDataCollection	 ::= ENUMERATED
{
	 notActive           	 	 (0)
,	 auto                	 	 (1)
,	 active              	 	 (2)
}



-- This parameter reports the latest Doppler and range measurement and the associated
--  residual, i.e., the measured value minus the predicted value and for range measurements
--  also the differenced range versus integrated Doppler (DRVID) measurement (latest
--  range value minus previously measured range value minus the integrated Doppler for
--  the period between the times when the latest range measurement and the previous
--  range measurement have been taken. 
-- 
-- It should be noted that the reported range
--  measurement value is neither corrected for station and spacecraft delays nor for
--  tropospheric effects. The residual therefore is not correct in absolute terms, but
--  it should be small and stable and therefore is a good indication of the quality
--  of the range measurements. 
-- 
-- DRIVD can only be provided if range and Doppler measuremnts
--  are taken at the same times.
rngAndDopplerExtractionObservableAndResidualType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 21 1 1 }

RngAndDopplerExtractionObservableAndResidual	 ::= SEQUENCE
{
	 doppler             	 SEQUENCE
	 {
	 	 -- The engineering unit of this element is Hz.
	 	 dopplerShift        	 INTEGER  (-1000000 .. 1000000)
,	 	 -- The engineering unit of this element is Hz.
	 	 dopplerShiftResidual	 INTEGER  (-100000 .. 100000)
	 }

,	 range               	 SEQUENCE
	 {
	 	 -- The engineering unit of this parameter is km
	 	 rangeValue          	 INTEGER  (0 .. 5000000000)
,	 	 -- The engineering unit of this element is 1/100 m.
	 	 rangeValueResidual  	 INTEGER  (-100000000 .. 100000000)
,	 	 -- Differenced Range versus Integrated Doppler (DRVID) measurement in 1/100 m.
	 	 drvid               	 INTEGER  (-100000000 .. 100000000)
	 }

}



-- This parameter reports the number of Doppler and range observables generated since
--  the most recent start of the collection of observables by setting the parameter
--  rngAndDopplerExtractionDataCollection to 'active'.
rngAndDopplerExtractionObservablesCountType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 1 22 1 1 }

RngAndDopplerExtractionObservablesCount	 ::= SEQUENCE
{
	 dopplerObservablesCount	 INTEGER  (0 .. 4294967295)
,	 rangeObservablesCount	 INTEGER  (0 .. 4294967295)
}



-- The event value reports the rngAndDopplerExtractionResourceStat value that applies
--  since the notified rngAndDopplerExtractionResourceStatChange event has occurred.
rngAndDopplerExtractionEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 2 1 1 1 }

RngAndDopplerExtractionEventResourceStatValue	 ::= RngAndDopplerExtractionResourceStat


-- This parameter reports if radiometric observables can be delivered. Data collection
--  may not be possible because e.g. the receiver is not locked on the carrier or for
--  range measurements the ambiguity resolution has failed.
rngAndDopplerExtractionStatChangeValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 2 2 1 1 }

RngAndDopplerExtractionStatChangeValue	 ::= SEQUENCE
{
	 dopplerDataCollection	 ENUMERATED
	 {
	 	 notOkay             	 	 (0)
	 ,	 okay                	 	 (1)
	 }

,	 rngDataCollection   	 ENUMERATED
	 {
	 	 notOkay             	 	 (0)
	 ,	 okay                	 	 (1)
	 }

}



-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the RngAndDopplerExtraction
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
rngAndDopplerExtractionContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 4001 3 1 1 1 }

RngAndDopplerExtractionContrParamIdsAndValues	 ::= DirectiveQualifier


-- The TcPlopSyncAndChannelEncoding FR accepts as input one of the following:
-- - CLTUs;
-- -
--  TC frames to be radated via a specific physical channel.
-- It also accepts the CLCWs
--  extracted from the telemetry link associated with the telecommand link used by this
--  FR.
-- This FR provides the symbol stream to be used for modulating the transmitted
--  carrier of the physical channel associated with this FR. 
-- 
tcPlopSyncAndChnlEncodeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 }




-- This enumerated parameter reports the TcPlopSyncAndChnlEncode FR resource status
--  and can take on four values:
-- - 'configured'; 
-- - 'operational';
-- - 'interrupted';
-- -
--  'halted'.
tcPlopSyncResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 1 1 1 }

TcPlopSyncResourceStat	 ::= ResourceStat


-- This parameter configures and reports the maximum length in octets of a CLTU the
--  FR will forward to the Ccsds401SpaceLinkCarrierXmit FR. If the given FR instance
--  is not configured to accept CLTUs as incoming service data units, the value of this
--  parameter shall be flagged as 'undefined'.
tcPlopSyncMaxCltuLengthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 2 1 1 }

-- The engineering unit of this parameter is octet.
TcPlopSyncMaxCltuLength	 ::= INTEGER  (12 .. 4096)


-- This parameter configures and reports the maximum number of TC MC frames that may
--  be converted into a single CLTU. The value of this parameter must be '1' if  tcPlopSyncMaxCltuRepetitions
--  ≠ 1. If the given FR instance is not configured to accept TC MC frames as incoming
--  service data unit, the value of this parameter shall be flagged as 'undefined'.
tcPlopSyncMaxNumberOfFramesPerCltuType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 3 1 1 }

TcPlopSyncMaxNumberOfFramesPerCltu	 ::= INTEGER  (1 .. 15)


-- This parameter configures and reports the encoding and randomization applied to the
--  TC frames. 
tcPlopSyncEncodeTypeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 4 1 1 }

TcPlopSyncEncodeType	 ::= CHOICE
{
	 noEncoding          	 [0]	 	 Randomization (off)
,	 bchEncoding         	 [1]	 	 Randomization
,	 ldpcEncoding        	 [2]	 	 SEQUENCE
	 {
	 	 randomization       	 Randomization (on)
,	 	 ldpcCoding          	 CHOICE
	 	 {
	 	 	 code1               	 [0]	 	 SEQUENCE
	 	 	 {
	 	 	 	 n                   	 INTEGER  (128)
,	 	 	 	 k                   	 INTEGER  (64)
,	 	 	 	 tailSequence        	 ENUMERATED
	 	 	 	 {
	 	 	 	 	 used                	 	 (0)
	 	 	 	 ,	 notUsed             	 	 (1)
	 	 	 	 }

	 	 	 }

,	 	 	 code2               	 [1]	 	 SEQUENCE
	 	 	 {
	 	 	 	 n                   	 INTEGER  (512)
,	 	 	 	 k                   	 INTEGER  (256)
	 	 	 }

	 	 }

	 }

}



-- This parameter configures and reports how many times a given CLTU may at most be
--  repeated on the telecommand link. The value of this parameter must be '1' if tcPlopSyncMaxNumberOfFramesPerCltu
--  ≠ 1. If the given instance of the FR is not configured to accept MC TC frames as
--  incoming service data unit, the value of this parameter shall be flagged as 'undefined'.
-- Note:
--  If tcPlopSyncAndChnlEncodingMaxCltuRepetitions = 1, the repeated transmissions option
--  is either disabled or not supported.
tcPlopSyncMaxCltuRepetitionsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 5 1 1 }

TcPlopSyncMaxCltuRepetitions	 ::= INTEGER  (1 .. 5)


-- This enumerated parameter configures and reports the Physical Layer Operation Procedure
--  that the TcPlopSyncAndChannelEncode FR applies (PLOP1 or PLOP2). If PLOP1 applies,
--  the parameter also specifies the length of the idle sequence (in octets).
-- 
-- The
--  exact behavior of the FR as determined by the selected PLOP in effect is further
--  described in the F-CLTU specification CCSDS 912.1-B-3.
-- 
tcPlopSyncPlopType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 6 1 1 }

TcPlopSyncPlop      	 ::= CHOICE
{
	 -- The engineering unit of this element is cotet.
	 plop1IdleSequenceLength	 [0]	 	 INTEGER  (0 .. 255)
,	 plop2               	 [1]	 	 NULL
}



-- This parameter configures and reports the size, in octets, and pattern of the bit
--  pattern to be radiated to enable the spacecraft telecommand system to achieve bit
--  lock (acquisition sequence) and to the bit pattern to maintain bit lock while no
--  command is being radiated (idle pattern). The radiation of the acquisition and idle
--  sequence will be performed in accordance with the applicable Physical Layer Operations
--  Procedure (PLOP) - cf. tcPlopSyncPlop.
tcPlopSyncAcqAndIdlePatternType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 7 1 1 }

-- The engineering unit of this parameter is octet.
TcPlopSyncAcqAndIdlePattern	 ::= SEQUENCE
{
	 acquisitionSequence 	 SEQUENCE
	 {
	 	 acquisitionPattern  	 CHOICE
	 	 {
	 	 	 -- The pattern specified in CCSDS 232.0-B-3 starting with 0.
	 	 	 ccsds0              	 [0]	 	 OCTET STRING (SIZE( 1))  ('55'H)
,	 	 	 -- The pattern specified in CCSDS 232.0-B-3 starting with 1.
	 	 	 ccsds1              	 [1]	 	 OCTET STRING (SIZE( 1))  ('AA'H)
,	 	 	 nonCcsds            	 [2]	 	 OCTET STRING (SIZE( 1)) 
	 	 }

,	 	 -- The engineering unit of this element is octet
	 	 acquisitionSequenceLength	 INTEGER  (1 .. 256)
	 }

,	 idlePattern         	 CHOICE
	 {
	 	 -- The pattern specified in CCSDS 232.0-B-3 starting with 0.
	 	 ccsds0              	 [0]	 	 OCTET STRING (SIZE( 1))  ('55'H)
,	 	 -- The pattern specified in CCSDS 232.0-B-3 starting with 1.
	 	 ccsds1              	 [1]	 	 OCTET STRING (SIZE( 1))  ('AA'H)
,	 	 nonCcsds            	 [2]	 	 OCTET STRING (SIZE( 1)) 
	 }

}



-- This parameter configures and reports the minimum time that the FR instance will
--  ensure between the completion of the radiation of one CLTU and the beginning of
--  the radiation of the following CLTU. There are two ways in which this guard time
--  can be specified:
-- - absolute time in microseconds (the exact effect of the delay
--  time depending on the PLOP is further described in the F-CLTU specification CCSDS
--  912.1-B-3);
-- - number of times the post-CLTU pattern (if applicable) and the pre-CLTU
--  pattern shall be repeated before the next CLTU may be radiated (it should be noted
--  that in this case the length of the guard time varies with the TC symbol rate).
-- 
tcPlopSyncMinDelayTimeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 8 1 1 }

-- The engineering unit of this parameter is 1/1000000 second, i.e. microsecond.
TcPlopSyncMinDelayTime	 ::= CHOICE
{
	 -- The engineering unit of this element is 1/1000000 s (microsecond).
	 absoluteGuardTime   	 [0]	 	 INTEGER  (0 .. 1000000)
,	 postPreCltuPatternRepetition	 [1]	 	 INTEGER  (0 .. 10000)
}



-- This enumerated parameter reports the status of the forward link as it can be derived
--  from the Communication Link Control Word (CLCW) in the associated telemetry stream.
--  It can take on the following values:
-- - 'forward link status not available': no
--  CLCWs from the spacecraft have been received by the service provider;
-- - 'no rf
--  available': the service provider has received at least one CLCW; in the last CLCW
--  received by the service provider, the bit that flags ‘No RF Available’ was set to
--  ‘1’;
-- - 'no bit lock': the service provider has received at least one CLCW; in the
--  last CLCW received by the service provider, the bit that flags ‘No RF Available’
--  was set to ‘0’, and the bit that flags ‘No Bit Lock’ was set to ‘1;
-- - 'nominal':
--  the provider has received at least one CLCW; in the last CLCW received by the provider,
--  the bit that flags ‘No RF Available’ was set to ‘0’, and the bit that flags ‘No
--  Bit Lock’ was set to ‘0’.
tcPlopSyncTcLinkStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 9 1 1 }

TcPlopSyncTcLinkStat	 ::= TcLinkStat


-- This parameter configures and reports the Master or Virtual Channel that carries
--  the CLCW to be used to determine the telecommand link RF and/or bit lock status,
--  if applicable, and if and how the CLCW shall be evaluated for the Carrier Modulation
--  Modes (CMM) transitions of the PLOP. The CLCW source is identified by the concatenation
--  of the CCSDS assigned Spacecraft Identifier (SCID), the Transfer Frame Version Number
--  (TFVN) and, if applicable, the Virtual Channel Identifier (VCID). The range of the
--  Spacecraft Identifier and the Virtual Channel Identifier depend on the TFVN as follows:
-- -
--  TFVN = 0 (version 1) - SCID = (0 .. 1023), VCID = (0 .. 7);
-- - TFVN = 1 (version
--  2) - SCID = (0 .. 255), VCID = (0 .. 63);
-- -TFVN = 12 (version 4) - SCID = (0 ..
--  65535), VCID = (0 .. 63).
tcPlopSyncClcwEvaluationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 1 10 1 1 }

FwdTcPlopSyncClcwEvaluation	 ::= CHOICE
{
	 noEvaluation        	 [0]	 	 NULL
,	 evaluation          	 [1]	 	 SEQUENCE
	 {
	 	 linkCondition       	 ENUMERATED
	 	 {
	 	 	 noEvaluation        	 	 (0)
	 	 ,	 rfAvailableVerified 	 	 (1)
	 	 ,	 bitLockVerified     	 	 (2)
	 	 ,	 rfAvailableAndBitLockVerified	 	 (3)
	 	 }

,	 	 clcwSource          	 CHOICE
	 	 {
	 	 	 -- This choice is the CLCWs to be extracted from telemetry frames.
	 	 	 tfvn0               	 [0]	 	 SEQUENCE
	 	 	 {
	 	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 	 	 vcid                	 CHOICE
	 	 	 	 {
	 	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 7)
	 	 	 	 }

	 	 	 }

,	 	 	 -- This choice is for CLCW extraction from AOS frames.
	 	 	 tfvn1               	 [1]	 	 SEQUENCE
	 	 	 {
	 	 	 	 tfvn                	 INTEGER  (1)
,	 	 	 	 scid                	 INTEGER  (0 .. 255)
,	 	 	 	 vcid                	 CHOICE
	 	 	 	 {
	 	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 	 	 }

	 	 	 }

,	 	 	 -- This choice is for CLCW extraction from USLP frames.
	 	 	 tfvn4               	 [2]	 	 SEQUENCE
	 	 	 {
	 	 	 	 tfvn                	 INTEGER  (12)
,	 	 	 	 scid                	 INTEGER  (0 .. 65535)
,	 	 	 	 vcid                	 CHOICE
	 	 	 	 {
	 	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 	 	 }

	 	 	 }

	 	 }

	 }

}



-- The event value reports the tcPlopSyncResourceStat value that applies since the notified
--  tcPlopSyncResourceStatChange event occurred.
tcPlopSyncEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 2 1 1 1 }

TcPlopSyncEventResourceStatValue	 ::= TcPlopSyncResourceStat


-- The event value reports the tcPlopSyncTcLinkStat value that applies since the notified
--  tcPlopSyncTcLinkStatChange event occurred.
tcPlopSyncEventTcLinkStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 2 2 1 1 }

TcPlopSyncEventTcLinkStatValue	 ::= TcPlopSyncTcLinkStat


-- The event value identifies the data unit that completed processing by reporting the
--  data-unit-id of the data unit and the id of the service instance that submitted
--  the data unit for processing. Note that the data unit may either be a frame or a
--  CLTU.
tcPlopSyncDataUnitIdAndSourceValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 2 3 1 1 }

TcPlopSyncDataUnitIdAndSourceValue	 ::= SEQUENCE
{
	 dataUnitId          	 INTEGER  (0 .. 4294967295)
,	 serviceInstanceIdentifier	 ServiceInstanceId
}



-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the fwdTcPlopSyncAndChnlEncode
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
fwdTcPlopSyncContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 3 1 1 1 }

TcPlopSyncContrParamIdsAndValues	 ::= DirectiveQualifier


-- The qualifier specifies the service-instance-id with which the data units to be discarded
--  are associated.
tcPlopSyncFrAndServiceInstanceIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 6000 3 2 1 1 }

TcPlopSyncFrAndServiceInstanceId	 ::= SEQUENCE
{
	 functResourceInstanceNumber	 INTEGER  (1 .. 4294967295)
,	 parameterValue      	 ServiceInstanceId
}



-- This FR can be configured to accept one of the following input types:
-- - CADUs to
--  be radiated via a specific physical channel;
-- - AOS frames to be radated via a specific
--  physical channel. 
-- This FR provides the symbol stream to be used for modulating
--  the forward carrier of the physical channel associated with this FR. 
flfFrameSyncChnEncodeAndOidGenType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 }




-- This enumerated parameter reports the fwdAosSyncAndChnlEncoding FR resource status
--  and can take on four values:
-- - 'configured'; 
-- - 'operational';
-- - 'interrupted';
-- -
--  'halted'.
fwdFlfSyncResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 1 1 1 }

FwdAosSyncResourceStat	 ::= ENUMERATED
{
	 value0              	 	 (0)
,	 value1              	 	 (1)
}



-- This parameter configures and reports the name assigned to the forward physical channel
--  used to radiate "AOS" frames. This name is a Visible String which has a length of
--  1 to 32 characters.
fwdAosSyncPhysicalChnlNameType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 2 1 1 }

FwdAosSyncPhysicalChnlName	 ::= VisibleString (SIZE( 1 .. 32)) 


-- This parameter configures and reports the length in octets of a CADU the FR accepts
--  for further processing. If the FR instance is not configured to accept AOS CADUs
--  as incoming service data units, the value of this parameter shall be flagged as
--  'undefined'.
fwdAosSyncCaduLengthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 3 1 1 }

FwdAosSyncCaduLength	 ::= INTEGER 


-- This enumerated parameter reports if the FR randomizes the AOS frames. This parameter
--  can take on two values:
-- - 'randomization';
-- - 'no randomization'.
-- The details
--  regarding the randomization are specified in CCSDS 131.0-B-2.  If the FR instance
--  is not configued to accept AOS frames as incoming service data units, the value
--  of this parameter shall be flagged as 'undefined'.
fwdAosFrameRandomizationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 4 1 1 }

FwdAosFrameRandomization	 ::= ENUMERATED
{
	 randomization       	 	 (0)
,	 noRandomization     	 	 (1)
}



-- This enumerated parameter configures and reports the encoding that is applied to
--  the AOS frames. This parameter can take on the following values:
-- - 'uncoded';
-- -
--  'convolutional';
-- - 'reedSolomon';
-- - 'concatenated';
-- - 'turbo';
-- - 'ldpc'.
-- If
--  the FR instance is not configured to accept AOS Frames as incoming service data
--  units, the value of this parameter shall be flagged as 'undefined'.
-- Note: The length
--  and pattern of the ASM is determined by the applicable encoding.
fwdAosSyncFrameEncodingType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 5 1 1 }

FwdAosSyncFrameEncoding	 ::= ENUMERATED
{
	 uncoded             	 	 (0)
,	 convolutional       	 	 (1)
,	 reedSolomon         	 	 (2)
,	 concatenated        	 	 (3)
,	 turbo               	 	 (4)
,	 ldpc                	 	 (5)
}



-- This enumerated parameter configures and reports the coding rate set for the convolutional
--  encoding of the AOS frames. The convolutional encoding is applied to the ASM and
--  the uncoded or Reed-Solomon encoded frame. This parameter can take on the following
--  values:
-- - 'rate1/2';
-- - 'rate2/3';
-- - 'rate3/4';
-- - 'rate5/6';
-- - 'rate7/8'.
-- IF
--  ((incoming service data unit NOT AOS frame) OR (fwdAosSyncFrameEncoding = 'reedSolomon')
--  OR (fwdAosSyncFrameEncoding = 'turbo') OR (fwdAosSyncFrameEncoding = 'ldpc')), the
--  value of this parameter shall be flagged as 'undefined'.
fwdAosSyncFrameConvolCodeRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 6 1 1 }

FwdAosSyncFrameConvolCodeRate	 ::= ENUMERATED
{
	 rate12              	 	 (0)
,	 rate23              	 	 (1)
,	 rate34              	 	 (2)
,	 rate56              	 	 (3)
,	 rate78              	 	 (4)
}



-- This enumerated parameter configures and reports the correction capability of the
--  applied Reed-Solomon code. It can take on the following values:
-- - 'corrects8';
-- -
--  'corrects16'.
-- IF ((incoming service data unit NOT AOS Frame) OR NOT ((fwdAosSyncFrameEncoding
--  = 'reedSolomon') OR (fwdAosSyncFrameEncoding = 'concatenated'))), the value of this
--  parameter shall be flagged as 'undefined'.
fwdAosSyncFrameRsErrorCorrectionCapabilityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 7 1 1 }

FwdAosSyncFrameRsErrorCorrectionCapability	 ::= ENUMERATED
{
	 corrects8           	 	 (0)
,	 corrects16          	 	 (1)
}



-- This enumerated parameter configures and reports the interleaving depth of the applied
--  Reed-Solomon encoding. It can take on the following values:
-- - 'interleaving1';
-- -
--  'interleaving2';
-- - 'interleaving3';
-- - 'interleaving4';
-- - 'interleaving5';
-- -
--  'interleaving8'.
-- If ((incoming service data unit NOT MC Frame) OR NOT ((frame-encoding
--  = 'reedSolomon') OR (frame-encoding = 'concatenated'))), the value of this parameter
--  shall be flagged as 'undefined'.
-- Note: If and how much virtual fill needs to be
--  inserted is determined based on the values of transfer-frame-length and rs-interleaving-depth.
fwdAosSyncFrameRsInterleavingDepthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 8 1 1 }

FwdAosSyncFrameRsInterleavingDepth	 ::= ENUMERATED
{
	 interleaving1       	 	 (0)
,	 interleaving2       	 	 (1)
,	 interleaving3       	 	 (2)
,	 interleaving4       	 	 (3)
,	 interleaving5       	 	 (4)
,	 interleaving8       	 	 (5)
}



-- This enumerated parameter configures and reports the coding rate of the applied turbo
--  encoding. This parameter can take on the following values:
-- - 'rate1/2';
-- - 'rate1/3';
-- -
--  'rate1/4';
-- - 'rate1/6'.
-- If ((incoming service data unit NOT MC Frame) OR (frame-encoding
--  ≠ 'turbo')), the value of this parameter shall be flagged as 'undefined'.
-- Note:
--  The information block length is determined by the value of aos-fwd-frame-length.
fwdAosSyncFrameTurboCodeRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 9 1 1 }

FwdAosSyncFrameTurboCodeRate	 ::= ENUMERATED
{
	 rate12              	 	 (0)
,	 rate13              	 	 (1)
,	 rate14              	 	 (2)
,	 rate16              	 	 (3)
}



-- This enumerated parameter configures and reports the coding rate of the applied ldpc
--  encoding. This parameter can take on the following values:
-- - 'rate1/2';
-- - 'rate2/3';
-- -
--  'rate3/4';
-- - 'rate7/8'.
-- If ((incoming service data unit NOT MC Frame) OR (fwdAosSyncFrameEncoding
--  ≠ 'ldpc')), the value of this parameter shall be flagged as 'undefined'.
-- Note:
--  The information block length is determined by the value of transfer-frame-length.
fwdAosSyncFrameLdpcCodeRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 1 10 1 1 }

FwdAosSyncFrameLdpcCodeRate	 ::= ENUMERATED
{
	 rate12              	 	 (0)
,	 rate23              	 	 (1)
,	 rate34              	 	 (2)
,	 rate78              	 	 (3)
}



-- The event value reports the fwdAosSyncResourceStat value that applies since the notified
--  fwdAosResourceStatChange event occurred.
fwdAosSyncResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 2 1 1 1 }

FwdAosSyncResourceStatValue	 ::= ResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the fwdAosSyncAndChannelEncoding
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
fwdAosSyncParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 7000 3 1 1 1 }

FwdAosSyncParamIdsAndValues	 ::= DirectiveQualifier


-- The FlfSyncAndChnlDecode FR accepts as input the symbol stream from the Ccsds401SpaceLinkCarrierRcpt
--  FR. It provides the decoded and annotated telemetry frames to the RafTsProvider,
--  the RcfTsProvider, the RocfTsProvider, to the McDemuxReception and to the TmFrameDataSink
--  FRs.
flfSyncAndChnlDecodeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 }




-- This enumerated parameter reports the fixed length frame synchronization and decoding
--  resource status and can take on four values:
-- - 'configured': the synchronization
--  and decoding equipment has been configured, but no incoming symbol stream is present;
-- -
--  'operational': the telemetry reception is active, i.e., all syncronization and decoding
--  is in nominal condition;
-- - 'interrupted': a failure has been detected, e.g. the
--  incoming data cannot be decoded;
-- - 'halted': the telemetry reception has been taken
--  out of service. 
flfSyncResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 1 1 1 }

FlfSyncResourceStat 	 ::= ResourceStat


-- This parameter configures and reports the ASM pattern and the frame synchronizer
--  behavior in terms of the correlation error threshold for declaring 'ASM lock', and
--  for declaring 'ASM out of lock', the number of consecutive frames with 'ASM lock'
--  required to transition from 'notLocked' to 'verify', the number of consecutive frames
--  with 'ASM lock' required to transition from 'verify' to 'locked' and the number
--  of consecutive frames with 'ASM out of lock' required to transition from 'locked'
--  to 'notLocked' and the to be tolerated ASM position error in number of symbols (i.e.
--  unexpected frame length) for not triggering the transition to 'notLocked'. 
flfSyncAsmConfigType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 2 1 1 }

FlfSyncAsmConfig    	 ::= SEQUENCE
{
	 asmPattern          	 CHOICE
	 {
	 	 ccsdsPattern        	 [0]	 	 NULL
,	 	 -- The length of the ASM pattern is indirectly specified by the length of the octet string.
	 	 nonCcsdsPattern     	 [1]	 	 OCTET STRING
	 }

,	 asmThresholds       	 SEQUENCE
	 {
	 	 asmCorrelationLockThreshold	 INTEGER  (0 .. 191)
,	 	 asmCorrelationOutOfLockThreshold	 INTEGER  (1 .. 192)
,	 	 verifyThreshold     	 INTEGER  (1 .. 15)
,	 	 lockedThreshold     	 INTEGER  (1 .. 15)
,	 	 notLockedThreshold  	 INTEGER  (1 .. 15)
,	 	 -- in number of symbols
	 	 frameLengthErrorThreshold	 INTEGER  (-10 .. 10)
	 }

}



-- This parameter reports the number of symbols in the most recently received ASM that
--  differ from the nominal ASM pattern. When comparing these numbers, one needs to
--  take into consideration whether the synchronization is done on the (pre Viterbi
--  decoder) symbol stream or on the (post Viterbi decoder) bit stream which may be
--  the case if flfSyncDecode is either 'convolutional' or 'concatenated'.
-- The frame
--  synchronization is also used to remove the phase ambiguity of some modulation schemes.
--  To that end, the correlation process is performed both for the standard ASM pattern
--  and its inversion.
-- A given implementation will specify if the the synchronization
--  is performed in the symbol or bit domain. This shall be recorded in the Service
--  Agreement.
flfSyncAsmCorrelationErrorType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 3 1 1 }

FlfSyncAsmCorrelationError	 ::= INTEGER  (0 .. 192)


-- This enumerated parameter reports the frame synchronizer lock status. It can take
--  on the following values:
-- - 'locked': The synchronizer has found at least two Attached
--  Sync Markers with the expected number of symbols or bits between them and with each
--  ASM having a correlation error that is lower than the configured error limit;
-- -
--  'verify': the frame synchronizer has found one ASM in the symbol or bit stream with
--  the correlation error lower than the configured threshold and is looking for a second
--  ASM at the expected number of symbols or bits after the first ASM; if such ASM is
--  found, the lock status changes to 'locked'; if no ASM is found where expected, the
--  lock status changes to 'not locked'; if an ASM is found, but at a larger distance
--  in terms of symbols or bits than expected, that newly found ASM will be the reference
--  for searching the next verification ASM;
-- - not locked: the frame synchronizer did
--  not find any ASM with a correlation error below the correlation error limit. 
flfSyncFrameSyncLockStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 4 1 1 }

FlfSyncFrameSyncLockStat	 ::= ENUMERATED
{
	 notLocked           	 	 (0)
,	 locked              	 	 (1)
,	 verify              	 	 (2)
}



-- This enumerated parameter reports if, based on the observed polarity of the ASM,
--  the symbol stream had to be inverted or not. It can take two values:
-- - 'yes': the
--  frame synchronizer locked on the inverted ASM pattern and therefore inverts the
--  polarity of the symbol stream;
-- - 'no': the frame synchronizer locked on the ASM
--  with the pattern in positive logic and therefore does not invert the symbol stream.
-- As
--  long as flfSyncFrameSyncLockStat ≠ 'locked', this parameter shall be flagged as
--  unavailable.
flfSyncSymbolInversionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 5 1 1 }

FlfSyncSymbolInversion	 ::= ENUMERATED
{
	 yes                 	 	 (0)
,	 no                  	 	 (1)
}



-- The parameter reports the ratio of erred frames to the total number of frames processed
--  for the most recent n frames. The value of n shall be documented in the Service
--  Agreeemnet. If the frames are RS or LDPC encoded, then frames for which the RS or
--  LDPC correction is not possible are considered erred. Frames are also considered
--  erred if the FECF is present and the check of the FECF is negative. In all other
--  cases, i.e., if the frames are neither RS nor LDPC encoded nor do they contain a
--  CCSDS compliant FECF, this parameter shall be flagged as 'undefined'.
flfSyncFrameErrorRateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 6 1 1 }

FlfSyncFrameErrorRate	 ::= REAL (0 .. 1)


-- This parameter reports the number of bits in the frame corrected by means of the
--  RS trailer. The number of bits that can be corrected depends on the coding and the
--  interleaving depth. If flfSyncDecode is neither 'reedSolomon' nor 'concatenated',
--  this parameter shall be flagged as 'undefined'.
flfSyncNumberOfRsErrorsCorrectedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 7 1 1 }

FlfSyncNumberOfRsErrorsCorrected	 ::= INTEGER  (0 .. 128)


-- This enumerated parameter reports if the time tags used to annotate the telemetry
--  frames with the Earth Receive Time (ERT) are generated by a time code generator
--  slaved to a high precision reference or if this generator is free running. It can
--  take on two values:
-- - 'yes' - The time tags are generated by a system that is locked
--  to the station's frequency and timing system;
-- - 'no' - the system generating the
--  time tags is free-running. 
flfSyncErtAnnotationLockedToReferenceType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 8 1 1 }

FlfSyncErtAnnotationLockedToReference	 ::= ENUMERATED
{
	 no                  	 	 (0)
,	 yes                 	 	 (1)
}



-- This parameter configures and reports the length in octets of the CADU the frame
--  synchronizer shall attempt to lock on. Depending on the implementation, the frame
--  synchronizer may operate on the convolutionally encoded symbol stream or the already
--  convolutionally decoded symbol stream, if convolutional encoding is applied at all.
flfSyncCaduLengthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 9 1 1 }

FlfSyncCaduLength   	 ::= INTEGER  (48 .. 32768)


-- This enumerated parameter configures and reports if the FR is configured to derandomize
--  the incoming frames. This parameter can take on two values:
-- - 'derandomization';
-- -
--  'no derandomization'.
-- The details regarding the randomization are specified in
--  CCSDS 131.0-B-3. Randomization is strongly advised, but mandatory only for punctured
--  convolutional codes and for LDPC encoded slices.  
flfSyncDerandomizationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 10 1 1 }

FlfSyncDerandomization	 ::= ENUMERATED
{
	 noDerandomization   	 	 (0)
,	 derandomization     	 	 (1)
}



-- This parameter configures and reports the decoding the FlfSyncAndDecode FR is configured
--  to apply to the incoming frames. This parameter can take on the following values:
-- -
--  'no decoding';
-- - 'convolutional';
-- - 'reedSolomon';
-- - 'concatenated';
-- - 'turbo';
-- -
--  'ldpc';
-- - 'slicedLdpc'.
-- For the configured decoding option the parameter also
--  specifies the associated configuration details.
-- 
-- Note: The length and pattern
--  of the ASM is implicitly specified by the decoding that is to be applied except
--  if for parameter flfSyncAsmConfig the nonCcsds asmPattern choice is selected..
flfSyncDecodeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 11 1 1 }

FlfSyncDecode       	 ::= SEQUENCE
{
	 -- If applicable, the CCSDS recommendation is NRZ-M.
	 differentialDecode  	 ENUMERATED
	 {
	 	 notApplicable       	 	 (0)
	 ,	 inputIsNrzM         	 	 (1)
	 ,	 inputIsNrzS         	 	 (2)
	 }

,	 symbolDecode        	 CHOICE
	 {
	 	 noDecoding          	 [0]	 	 NULL
,	 	 convolutional       	 [1]	 	 SEQUENCE
	 	 {
	 	 	 generatorPolynomials	 CHOICE
	 	 	 {
	 	 	 	 -- G1 transmitted first, G2 output is to be inverted, except for punctured codes.
	 	 	 	 ccsds               	 [0]	 	 NULL
,	 	 	 	 -- Also for the nonCcsds case the only constraint length supported is 7.
	 	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 g1ConnectionVector  	 BIT STRING (SIZE( 7)) 
,	 	 	 	 	 g2ConnectionVector  	 BIT STRING (SIZE( 7)) 
,	 	 	 	 	 polynomialSequence  	 ENUMERATED
	 	 	 	 	 {
	 	 	 	 	 	 g2G1                	 	 (0)
	 	 	 	 	 ,	 g1G2                	 	 (1)
	 	 	 	 	 }

,	 	 	 	 	 polynomialInversion 	 ENUMERATED
	 	 	 	 	 {
	 	 	 	 	 	 noInversion         	 	 (0)
	 	 	 	 	 ,	 g2Inversion         	 	 (1)
	 	 	 	 	 ,	 g2Inversion         	 	 (2)
	 	 	 	 	 }

	 	 	 	 }

	 	 	 }

,	 	 	 codeRate            	 ENUMERATED
	 	 	 {
	 	 	 	 rate1Over2          	 	 (0)
	 	 	 ,	 rate2Over3          	 	 (1)
	 	 	 ,	 rate3Over4          	 	 (2)
	 	 	 ,	 rate5Over6          	 	 (3)
	 	 	 ,	 rate7Over8          	 	 (4)
	 	 	 }

	 	 }

,	 	 reedSolomon         	 [2]	 	 SEQUENCE
	 	 {
	 	 	 rsCorrectionCapabilty	 ENUMERATED
	 	 	 {
	 	 	 	 corrects8           	 	 (0)
	 	 	 ,	 corrects16          	 	 (1)
	 	 	 }

,	 	 	 rsInterleavingDepth 	 ENUMERATED
	 	 	 {
	 	 	 	 interleaving1       	 	 (0)
	 	 	 ,	 interleaving2       	 	 (1)
	 	 	 ,	 interleaving3       	 	 (2)
	 	 	 ,	 interleaving4       	 	 (3)
	 	 	 ,	 interleaving5       	 	 (4)
	 	 	 ,	 interleaving8       	 	 (5)
	 	 	 }

	 	 }

,	 	 concatenated        	 [3]	 	 SEQUENCE
	 	 {
	 	 	 convolutional       	 SEQUENCE
	 	 	 {
	 	 	 	 generatorPolynomials	 CHOICE
	 	 	 	 {
	 	 	 	 	 -- G1 transmitted first, G2 output is to be inverted, except for punctured codes.
	 	 	 	 	 ccsds               	 [0]	 	 NULL
,	 	 	 	 	 -- Also for the nonCcsds case the only constraint length supported is 7.
	 	 	 	 	 nonCcsds            	 [1]	 	 SEQUENCE
	 	 	 	 	 {
	 	 	 	 	 	 g1ConnectionVector  	 BIT STRING (SIZE( 7)) 
,	 	 	 	 	 	 g2ConnectionVector  	 BIT STRING (SIZE( 7)) 
,	 	 	 	 	 	 polynomialSequence  	 ENUMERATED
	 	 	 	 	 	 {
	 	 	 	 	 	 	 g2G1                	 	 (0)
	 	 	 	 	 	 ,	 g1G2                	 	 (1)
	 	 	 	 	 	 }

,	 	 	 	 	 	 polynomialInversion 	 ENUMERATED
	 	 	 	 	 	 {
	 	 	 	 	 	 	 noInversion         	 	 (0)
	 	 	 	 	 	 ,	 g2Inversion         	 	 (1)
	 	 	 	 	 	 ,	 g2Inversion         	 	 (2)
	 	 	 	 	 	 }

	 	 	 	 	 }

	 	 	 	 }

,	 	 	 	 codeRate            	 ENUMERATED
	 	 	 	 {
	 	 	 	 	 rate1Over2          	 	 (0)
	 	 	 	 ,	 rate2Over3          	 	 (1)
	 	 	 	 ,	 rate3Over4          	 	 (2)
	 	 	 	 ,	 rate5Over6          	 	 (3)
	 	 	 	 ,	 rate7Over8          	 	 (4)
	 	 	 	 }

	 	 	 }

,	 	 	 rsCorrectionCapabilty	 ENUMERATED
	 	 	 {
	 	 	 	 corrects8           	 	 (0)
	 	 	 ,	 corrects16          	 	 (1)
	 	 	 }

,	 	 	 rsInterleavingDepth 	 ENUMERATED
	 	 	 {
	 	 	 	 interleaving1       	 	 (0)
	 	 	 ,	 interleaving2       	 	 (1)
	 	 	 ,	 interleaving3       	 	 (2)
	 	 	 ,	 interleaving4       	 	 (3)
	 	 	 ,	 interleaving5       	 	 (4)
	 	 	 ,	 interleaving8       	 	 (5)
	 	 	 }

	 	 }

,	 	 turbo               	 [4]	 	 SEQUENCE
	 	 {
	 	 	 maxNumberOfIterations	 INTEGER  (1 .. 20)
,	 	 	 codeRate            	 ENUMERATED
	 	 	 {
	 	 	 	 rate1Over2          	 	 (0)
	 	 	 ,	 rate1Over3          	 	 (1)
	 	 	 ,	 rate1Over4          	 	 (2)
	 	 	 ,	 rate1Over6          	 	 (3)
	 	 	 }

	 	 }

,	 	 -- The information block length shall be derived from the CADU length (see flfSyncCaduLength)
	 	 ldpc                	 [5]	 	 LdpcCodeRate
,	 	 slicedLdpc          	 [6]	 	 SEQUENCE
	 	 {
	 	 	 -- Number of LDPC codewords 
	 	 	 codeBlockSize       	 INTEGER  (1 | 2 | 3 | 4 | 5 | 6 | 7 | 8)
,	 	 	 codeRateAndSliceLength	 CHOICE
	 	 	 {
	 	 	 	 codeRate1Over2      	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 codeRate            	 LdpcCodeRate (rate1Over2)
,	 	 	 	 	 sliceLength         	 INTEGER  (1024 | 4096 | 16384)
,	 	 	 	 	 csmPattern          	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 ccsds               	 [0]	 	 OCTET STRING ('034776C7272895B0'H)
,	 	 	 	 	 	 nonCCSDS            	 [1]	 	 OCTET STRING (SIZE( 4 .. 16)) 
	 	 	 	 	 }

	 	 	 	 }

,	 	 	 	 codeRate2Over3      	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 codeRate            	 LdpcCodeRate (rate2Over3)
,	 	 	 	 	 sliceLength         	 INTEGER  (1024 | 4096 | 16384)
,	 	 	 	 	 csmPattern          	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 ccsds               	 [0]	 	 OCTET STRING ('034776C7272895B0'H)
,	 	 	 	 	 	 nonCCSDS            	 [1]	 	 OCTET STRING (SIZE( 4 .. 16)) 
	 	 	 	 	 }

	 	 	 	 }

,	 	 	 	 codeRate4Over5      	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 codeRate            	 LdpcCodeRate (rate4Over5)
,	 	 	 	 	 sliceLength         	 INTEGER  (1024 | 4096 | 16384)
,	 	 	 	 	 csmPattern          	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 ccsds               	 [0]	 	 OCTET STRING ('034776C7272895B0'H)
,	 	 	 	 	 	 nonCCSDS            	 [1]	 	 OCTET STRING (SIZE( 4 .. 16)) 
	 	 	 	 	 }

	 	 	 	 }

,	 	 	 	 codeRate223Over255  	 [0]	 	 SEQUENCE
	 	 	 	 {
	 	 	 	 	 codeRate            	 LdpcCodeRate (rate223Over255)
,	 	 	 	 	 sliceLength         	 INTEGER  (7136)
,	 	 	 	 	 csmPattern          	 CHOICE
	 	 	 	 	 {
	 	 	 	 	 	 ccsds               	 [0]	 	 OCTET STRING ('1ACFFC1D'H)
,	 	 	 	 	 	 nonCCSDS            	 [1]	 	 OCTET STRING (SIZE( 4 .. 16)) 
	 	 	 	 	 }

	 	 	 	 }

	 	 	 }

	 	 }

	 }

}



-- This parameter configures and reports if in the frame to be processed the FECF is
--  present. It can take on two values:
-- - 'yes';
-- - 'no'.
flfSyncFecfPresentType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 12 1 1 }

FlfSyncFecfPresent  	 ::= ENUMERATED
{
	 no                  	 	 (0)
,	 yes                 	 	 (1)
}



-- This parameter provides decoding type specific quality indications regarding the
--  decoding process and an estimates of the bit error rate (BER).
-- 
-- The provided BER
--  estimates are not precise. The ASM pattern derived estimate does not reflect the
--  coding gain (except that related to convolutional coding). The RS decoding derived
--  BER estimate also disregards the RS coding gain, but also disregards the errors
--  associated with not decodable RS code words. However, the number of not decodable
--  RS codewords are reported by indirectly by the element ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample.
--  The BER estimates are determined for n consecutive frames where the value of n shall
--  be documented in the Serviced Agreement.
flfSyncDecodeQualityIndicationsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 1 13 1 1 }

FlfSyncDecodeQualityIndications	 ::= SEQUENCE
{
	 -- This count rolls over to zero.
	 countOfFramesProcessed	 INTEGER  (0 .. 4294967295)
,	 berEstimates        	 SEQUENCE
	 {
	 	 -- Ratio of erred ASM bits to total count of ASM bits evaluated in n consecutive frames where the value of n shall be documented in the Service Agreement.
	 	 asmDerivedBerEstimate	 REAL (0 .. 1)
,	 	 -- Ratio of sum of corrected bits in the RS code words to total count of bits in the code words in n consecutive frames where the value of n shall be documented in the Service Agreement. Not decodable code words shall be disregarded.
	 	 rsDerivedBerEstimate	 REAL (0 .. 7.0E-2)
	 }

,	 qualityIndications  	 CHOICE
	 {
	 	 noDecoding          	 [0]	 	 CHOICE
	 	 {
	 	 	 -- No quality indication possible.
	 	 	 fecfAbsent          	 [0]	 	 NULL
,	 	 	 -- Ratio of frames with bad FECF to the total count of frames over the most recent n frames. The value of n shall be documented in the Service Agreement.
	 	 	 fecfPresent         	 [1]	 	 REAL (0 .. 1)
	 	 }

,	 	 -- The Viterbi decoder does not provide specific quality indications.
	 	 convolutional       	 [1]	 	 NULL
,	 	 reedSolomonOrConcatenated	 [2]	 	 SEQUENCE
	 	 {
	 	 	 rsDecoderLockStatus 	 ENUMERATED
	 	 	 {
	 	 	 	 notLocked           	 	 (0)
	 	 	 ,	 locked              	 	 (1)
	 	 	 }

,	 	 	 -- This count rolls over to zero.
	 	 	 countOfRsCodeWordsProcessed	 INTEGER  (0 .. 4294967295)
,	 	 	 -- Ratio valid for the most recent n code words processed. The value of n shall be documented in the Service Agreement.
	 	 	 ratioBadCodeWordsToTotalCountOfCodeWordsInTheSample	 REAL (0 .. 1)
	 	 }

,	 	 turbo               	 [3]	 	 SEQUENCE
	 	 {
	 	 	 turboDecoderLockStatus	 ENUMERATED
	 	 	 {
	 	 	 	 notLocked           	 	 (0)
	 	 	 ,	 locked              	 	 (1)
	 	 	 }

,	 	 	 iterationsCount     	 SEQUENCE
	 	 	 {
	 	 	 	 -- Value for the most recent n frames. The value of n shall be documented in the Service Agreement.
	 	 	 	 maxNumberOfIterationsPerFrame	 INTEGER  (1 .. 20)
,	 	 	 	 -- The average number multiplied with 1000. The average shall be calculated for the most recent n frames processed. The value of n shall be documented in the ServiceAgreement.
	 	 	 	 averageNumberOfIterationsPerFrame	 INTEGER  (1000 .. 20000)
	 	 	 }

,	 	 	 -- Ratio valid for the most recent n frames processed. The value of n shall be documented in the Service Agreement.
	 	 	 ratioBadFramesToTotalCountOfFramesInTheSample	 REAL (0 .. 1)
	 	 }

,	 	 ldpc                	 [4]	 	 SEQUENCE
	 	 {
	 	 	 ldpcDecoderLockStatus	 ENUMERATED
	 	 	 {
	 	 	 	 notLocked           	 	 (0)
	 	 	 ,	 locked              	 	 (1)
	 	 	 }

,	 	 	 iterationsCount     	 SEQUENCE
	 	 	 {
	 	 	 	 -- Value for the most recent n frames. The value of n shall be documented in the Service Agreement.
	 	 	 	 maxNumberOfIterationsPerFrame	 INTEGER  (1 .. 2047)
,	 	 	 	 -- The average number multiplied with 1000. The average shall be calculated for the most recent n frames processed. The value of n shall be documented in the ServiceAgreement.
	 	 	 	 averageNumberOfIterationsPerFrame	 INTEGER  (1000 .. 2047000)
	 	 	 }

,	 	 	 -- Ratio valid for the most recent n frames processed. The value of n shall be documented in the Service Agreement.
	 	 	 ratioBadFramesToTotalCountOfFramesInTheSample	 REAL (0 .. 1)
	 	 }

	 }

}



-- The event value reports the flfSyncResourceStat value that applies since the notified
--  flfSyncResourceStatChange event occurred.
flfSyncEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 2 1 1 1 }

FlfSyncEventResourceStatValue	 ::= FlfSyncResourceStat


-- The event value reports the flfSyncFrameSyncLockStatValue that applies since the
--  notified flfSyncFrameSyncLockStatChange event occurred.
flfSyncFrameSyncLockStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 2 2 1 1 }

FlfSyncFrameSyncLockStatValue	 ::= FlfSyncFrameSyncLockStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the FlfSyncAndChnlDecode
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
flfSyncContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 8000 3 1 1 1 }

FlfSyncContrParamIdsAndValues	 ::= DirectiveQualifier


-- This FR accepts TC frames without FECF belonging to one Master Channel.
-- It provides
--  all TC frames for one physical channel which optionally contain FECFs.
tcMcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 }




-- This enumerated parameter reports the TcMcMux resource status and can take on four
--  values:
-- - 'configured';
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
tcMcMuxResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 1 1 1 1 }

TcMcMuxResourceStat 	 ::= ResourceStat


-- This parameter configures and reports the maximum number of TC MC frames that may
--  be converted into a single CLTU. 
tcMcMuxMaxNumberOfFramesPerCltuType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 1 2 1 1 }

TcMcMuxMaxNumberOfFramesPerCltu	 ::= INTEGER  (1 .. 15)


-- This parameter configures and reports the maximum length in octets of a TC MC frame
--  the FR accepts for further processing. The reported length refers to the frame length
--  after insertion of the Frame Error Control Field if applicable. 
tcMcMuxMaxFrameLengthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 1 3 1 1 }

-- The engineering unit of this parameter is octet.
TcMcMuxMaxFrameLength	 ::= INTEGER  (1 .. 1024)


-- This parameter configures and reports how the TC Master Channels are multiplexed
--  onto the physical channel. 
-- In case tcMcMuxContr =  ‘fifo’, no further specification
--  applies. 
-- If tcMcMuxContr = 'absolute priority', then the associated configuration
--  value is a sequence of the SCIDs used on the telecommand link where the first SCID
--  in the sequence has the highest priority, the second has the second-highest priority
--  etc. Consequently the sequence has as many elements as Spacecraft Identifiers are
--  permitted on the given physical channel. 
-- If tcMcMuxContr = 'polling vector', then
--  the associated sequence consists of up to 3072 elements where each element is a
--  SCID. 
tcMcMuxContrType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 1 4 1 1 }

TcMcMuxContr        	 ::= CHOICE
{
	 fifo                	 [0]	 	 NULL
,	 absolutePriority    	 [1]	 	 SEQUENCE  (SIZE( 1 .. 1024))  OF	 	 	 scid                	 INTEGER  (0 .. 1023)
,	 pollingVector       	 [2]	 	 SEQUENCE  (SIZE( 1 .. 3072))  OF	 	 	 scid                	 INTEGER  (0 .. 1023)
}



-- This enumerated parameter configures and reports if the FR inserts the Frame Error
--  Control Field into each frame before passing it to the TcPlopSyncAndChnlEncode FR.
--  This parameter can take on two values:
-- - 'absent';
-- - 'present'.
-- The details regarding
--  the FEC are specified in CCSDS 232.0-B-2. 
tcMcMuxPresenceOfFecType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 1 5 1 1 }

TcMcMuxPresenceOfFec	 ::= ENUMERATED
{
	 absent              	 	 (0)
,	 present             	 	 (1)
}



-- The event value reports the tcMcMuxResourceStat value that applies since the notified
--  tcMcMuxResourceStatChange event has occurred.
tcMcMuxEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 2 1 1 1 }

TcMcMuxEventResourceStatValue	 ::= TcMcMuxResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the TcMcMux FR and
--  the parameter value must be of the same type as the parameter value that shall be
--  set.
-- 
tcMcMuxContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 3 1 1 1 }

TcMcMuxContrParamIdsAndValues	 ::= DirectiveQualifier


-- The qualifier of this directive only identifies the Functional Resource instance
--  the directive shall act on, but does not specify any parameter and value that shall
--  be set.
tcMcMuxDiscardDataUnitsQualifierType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9000 3 2 1 1 }

TcMcMuxDiscardDataUnitsQualifier	 ::= SEQUENCE
{
	 functResourceInstanceNumber	 INTEGER  (1 .. 4294967295)
,	 -- No such value shall be specified for this directive.
	 directiveQualifierValues	 NULL
}



-- This FR accepts TC frames not containing FECFs for a specific TC VC as input.
-- It
--  provides the TC frames not containing FECFs for a specific TC Master Channel.
tcVcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 }




-- This enumerated parameter reports on the TC VC Multiplexer resource status and can
--  take on four values:
-- - 'configured';
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
tcVcMuxResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 1 1 1 }

TcVcMuxResourceStat 	 ::= ResourceStat


-- This parameter configures and reports on the maximum TC VC frame length in octets
--  that the FR accepts as input for further processing where the specified length shall
--  not take into account the Frame Error Control Field, if present on the physical
--  channel.
-- Note: The value of the tcVcMaxFrameLength parameter of an instance of
--  this FR must be less than or equal to the parameter tcMcMuxMaxFrameLength of the
--  TcMcMux FR consuming the TC MC frames generated by this TcVcMux FR instance.
tcVcMaxFrameLengthType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 2 1 1 }

TcVcMaxFrameLength  	 ::= INTEGER  (1 .. 1024)


-- This parameter configures and reports how an AD frame on the given Virtual Channel
--  shall be annotated in terms of number of times it shall be transmitted to the spacecraft.
--  
tcVcMuxAdFrameRepetitionsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 3 1 1 }

TcVcMuxAdFrameRepetitions	 ::= SEQUENCE  (SIZE( 1 .. 64))  OF	 	 vcAdFrameRepetition 	 SEQUENCE
	 {
	 	 vcid                	 INTEGER  (0 .. 63)
,	 	 repetitions         	 INTEGER  (1 .. 5)
	 }



-- This parameter configures and reports how a BC frame on the given Virtual Channel
--  shall be annotated in terms of number of times it shall be transmitted to the spacecraft.
--  
tcVcMuxBcFrameRepetitionsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 4 1 1 }

TcVcMuxBcFrameRepetitions	 ::= SEQUENCE  (SIZE( 1 .. 64))  OF	 	 vcBdFrameRepetition 	 SEQUENCE
	 {
	 	 vcid                	 INTEGER  (0 .. 63)
,	 	 repetitions         	 INTEGER  (1 .. 5)
	 }



-- This parameter configures and reports the Master Channel that is provided by the
--  given FR instance. The Master Channel ID is the concatenation of TFVN and SCID.
--  Given that this FR type handles only TC frames, the TFVN is fixed and only the SCID
--  is variable. 
tcVcMuxMcType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 5 1 1 }

TcVcMuxMc           	 ::= SEQUENCE
{
	 tfvn                	 INTEGER  (0)
,	 scid                	 INTEGER  (0 .. 1023)
}



-- This parameter configures and reports how the Virtual Channels are multiplexed into
--  the Master Channel formed by this FR instance. 
-- In case tcVcMuxContr = ‘fifo’,
--  no further specification applies.
-- If tcVcMuxContr = 'absolute priority', then the
--  associated configuration value is a sequence of VCIDs used on the given MC where
--  the first VCID in the sequence has the highest priority, the second has the second-highest
--  priority etc. Consequently the sequence has as many elements as VCs are permitted
--  on the given MC. 
-- If tcVcMuxContr = 'polling vector', then the associated sequence
--  consists of up to 192 elements where each element is a VCID.
tcVcMuxContrType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 1 6 1 1 }

TcVcMuxContr        	 ::= CHOICE
{
	 fifo                	 [0]	 	 NULL
,	 absolutePriority    	 [1]	 	 SEQUENCE  (SIZE( 1 .. 64))  OF	 	 	 vcId                	 INTEGER  (0 .. 63)
,	 pollingVector       	 [2]	 	 SEQUENCE  (SIZE( 1 .. 192))  OF	 	 	 vcId                	 INTEGER  (0 .. 63)
}



-- The event value reports the tcVcMuxResourceStat value that applies since the notified
--  tcVcMuxResourceStatChange event has occurred.
tcVcMuxEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 2 1 1 1 }

TcVcMuxEventResourceStatValue	 ::= TcVcMuxResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the TcVcMux FR and
--  the parameter value must be of the same type as the parameter value that shall be
--  set.
tcVcMuxContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 3 1 1 1 }

TcVcMuxContrParamIdsAndValues	 ::= DirectiveQualifier


-- The qualifier of this directive only identifies the Functional Resource instance
--  the directive shall act on, but does not specify any parameter and value that shall
--  be set.
tcVcMuxDiscardDataUnitsQualifierType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9001 3 2 1 1 }

TcVcMuxDiscardDataUnitsQualifier	 ::= SEQUENCE
{
	 functResourceInstanceNumber	 INTEGER  (1 .. 4294967295)
,	 functResourceQualifiers	 NULL
}



-- This FR instance accepts as input one of the following:
-- - ENCAP.requests carrying
--  IP packets; this type of input data gets converted to Encapsulation packets which
--  are then passed to the VCP service. Such request will only be accepted if (the EPI
--  in the request is 2 and 2 ͼ {valid-protocol-ids)) AND (PVN in the request is 8 AND
--  8 ͼ {valid-packet-version-numbers}).
-- - ENCAP.requests bearing CFDP data units;
--   this type of input data gets converted to Encapsulation packets which are then
--  passed to the VCP service. Such request will only be accepted if (the EPI in the
--  request is 3 AND 3 ͼ {valid-protocol-ids)) AND (the PVN in the request is 8 AND
--  8 ͼ {valid-packet-version-numbers}).
-- - VCP.requests carrying CFDP data units; such
--  request will only be accepted if (the space packet header of the packet in the request
--  has the APID 2045 AND 2045 ͼ {valid-apids}) AND (the PVN in the request is 1 AND
--  1 ͼ {valid-packet-version-numbers}).
-- ENCAP.requests carrying forward file data
--  units; this type of input data gets converted to Encapsulation packets which are
--  then passed to the VCP service. Such request will only be accepted if (the EPI in
--  the request is 7 AND 7 ͼ {valid-protocol-ids}) AND (the PVN in the request is 8
--  AND 8 ͼ {valid-packet-version-numbers}).
-- - VCP.requests carrying space packets;
--  such requests will only be accepted if (the PVN in the request is 1 AND 1 ͼ {valid-packet-version-numbers})
--  and the APID contained in the header of the packet in the request ͼ valid-apids.
-- -
--  MAP Channel frame data units that are the result of MAP multiplexing; this input
--  type is only accepted if presence-of-segment-header = 'present'. 
-- Regardless of
--  the specific input type, incoming requests are only accepted if the VCID of the
--  SDLP Channel / GVCID of the request is equal to tc-frame-vcid and the TVN of the
--  GVCID in the request is 0.
-- In deviation from CCSDS 232.0-B-2, the VCP.requests
--  carrying space packets have an additional argument that flags if the packet of this
--  request may be blocked, i.e. may be embedded in a TC frame together with other space
--  packets or has to the single packet traveling in the given TC frame.
-- In parallel
--  it may accept as input
-- - COP directives;
-- - CLCWs extracted from the associated
--  return link.
-- This FR provides TC frames of a specific Virtual Channel. These frames
--  do not (yet) contain the FECF.
fwdTcEncapVcPktProcVcGenType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9002 }



fwdMapMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9003 }




-- This FR instance accepts as input one of the following:
-- - ENCAP.requests carrying
--  IP packets; this type of input data gets converted to Encapsulation packets which
--  are then passed to the MAPP service. Such request will only be accepted if (the
--  EPI in the request is 2 and 2 ͼ {valid-protocol-ids)) AND (PVN in the request is
--  8 AND 8 ͼ {valid-packet-version-numbers}) AND the GMAP ID specified in the SDLP
--  Channel of the ENCAP.request identifies a MAP ID that is ͼ {valid-map-ids}
-- - ENCAP.requests
--  bearing CFDP data units;  this type of input data gets converted to Encapsulation
--  packets which are then passed to the MAPP service. Such request will only be accepted
--  if (the EPI in the request is 3 AND 3 ͼ {valid-protocol-ids)) AND (the PVN in the
--  request is 8 AND 8 ͼ {valid-packet-version-numbers}) AND the MAP ID contained in
--  the GMAP ID conveyed in the SDLP_Channel parameter of the ENCAP.request is  ͼ {valid-map-ids}.
-- -
--  MAPP.requests carrying CFDP data units; such request will only be accepted if (the
--  space packet header of the packet in the request has the APID 2045 AND 2045 ͼ {valid-apids})
--  AND (the PVN in the request is 1 AND 1 ͼ {valid-packet-version-numbers}) AND the
--  MAP ID parameter of the MAPP.request is ͼ {valid-map-ids}.
-- ENCAP.requests carrying
--  forward file data units; this type of input data gets converted to Encapsulation
--  packets which are then passed to the VCP service. Such request will only be accepted
--  if (the EPI in the request is 7 AND 7 ͼ {valid-protocol-ids}) AND (the PVN in the
--  request is 8 AND 8 ͼ {valid-packet-version-numbers}).
-- - VCP.requests carrying space
--  packets; such requests will only be accepted if (the PVN in the request is 1 AND
--  1 ͼ {valid-packet-version-numbers}) and the APID contained in the header of the
--  packet in the request ͼ valid-apids.
-- - MAP Channel frame data units that are the
--  result of MAP multiplexing; this input type is only accepted if presence-of-segment-header
--  = 'present'. 
-- Regardless of the specific input type, incoming requests are only
--  accepted if the VCID of the SDLP Channel / GVCID of the request is equal to tc-frame-vcid
--  and the TVN of the GVCID in the request is 0.
-- In deviation from CCSDS 232.0-B-2,
--  the VCP.requests carrying space packets have an additional argument that flags if
--  the packet of this request may be blocked, i.e. may be embedded in a TC frame together
--  with other space packets or has to the single packet traveling in the given TC frame.
-- In
--  parallel it may accept as input
-- - COP directives;
-- - CLCWs extracted from the associated
--  return link.
-- This FR provides TC frames of a specific Virtual Channel. These frames
--  do not (yet) contain the FECF.Note: The present FR Model does not envisage the use
--  of the 
-- MAPA.request primitive as an input to this FR type. Therefore, the 
-- parameters
--  defined for this FR do not cover the case of incoming 
-- MAPA.request primitives.
--  
fwdEncapMapPktProcType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 9004 }




-- This FR accepts AOS frames without FECF belonging to one Master Channel.
-- It provides
--  all AOS frames for one physical channel.which optionally contain FECFs.
fwdAosMcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 10000 }




-- None
fwdAosVcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 10001 }




-- None
fwdAosEncapPktProcAndVcGenType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 10002 }



fwdUslpMcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 11000 }



fwdUslpVcMuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 11001 }



fwdUslpVcGenType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 11002 }



fwdUslpEncapAndMapPktProcType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 11004 }




-- The TmAosMcDemux FR accepts suceessfully decoded frames and passes on all frames
--  of the configured Master Channels. If so configured it also extracts and delivers
--  the CLCWs of the selected Master Channel. 
tmAosMcDemuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 }




-- This enumerated parameter reports the tmAosMcDemux FR resource status and can take
--  on four values:
-- - 'configured'; 
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
tmAosMcDemuxResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 1 1 1 1 }

TmAosMcDemuxResourceStat	 ::= ResourceStat


-- This parameter reports the Master Channel IDs the given FR instance is configured
--  to process.
tmAosMcDemuxMcIdsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 1 2 1 1 }

-- All frames on a Master Channel must have the same TFVN.
TmAosMcDemuxMcIds   	 ::= CHOICE
{
	 tmFrames            	 [0]	 	 SET  (SIZE( 1 .. 1024))  OF	 SEQUENCE
	 	 {
	 	 	 -- For Tm frames the Transfer Frame Version Number is always 0.
	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 scid                	 INTEGER  (0 .. 1023)
	 	 }

,	 aosFrames           	 [1]	 	 SET  (SIZE( 1 .. 256))  OF	 SEQUENCE
	 	 {
	 	 	 -- For AOS frames the Transfer Frame Version Number is always 1.
	 	 	 tfvn                	 INTEGER  (1)
,	 	 	 scid                	 INTEGER  (0 .. 255)
	 	 }

}



-- This enumerated parameter configures and reports if the FR instance shall extract
--  CLCWs and if so from which MC. The extracted CLCWs are forwarded to the FR types
--  that consume them.
-- 
tmAosMcDemuxClcwExtractionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 1 3 1 1 }

TmAosMcDemuxClcwExtraction	 ::= CHOICE
{
	 noClcwExtraction    	 [0]	 	 NULL
,	 clcwExtractionTmMc  	 [1]	 	 SEQUENCE
	 {
	 	 -- For Tm frames the Transfer Frame Version Number is always 0.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 1023)
	 }

,	 clcwExtractionAosMc 	 [2]	 	 SEQUENCE
	 {
	 	 -- For AOS frames the Transfer Frame Version Number is always 1.
	 	 tfvn                	 INTEGER  (1)
,	 	 scid                	 INTEGER  (0 .. 255)
	 }

}



-- The event value reports the tmAosMcDemuxResourceStat value that applies since the
--  notified tmAosMcDemuxResourceStatChange event occurred.
tmAosMcDemuxEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 2 1 1 1 }

TmAosMcDemuxEventResourceStatValue	 ::= TmAosMcDemuxResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the TmAoasMcDemux
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
tmAosMcDemuxContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13000 3 1 1 1 }

TmAosMcDemuxContrParamIdsAndValues	 ::= DirectiveQualifier


-- The TmAosVcDemux FR accepts frames from a given master channel and passes on all
--  frames of the configured Virtual Channels. If so configured it also extracts and
--  delivers the CLCWs of the selected Virtual Channel. 
tmAosVcDemuxType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 }




-- This enumerated parameter reports the TmAosVcDemux FR resource status and can take
--  on four values:
-- - 'configured'; 
-- - 'operational';
-- - 'interrupted';
-- - 'halted'.
tmAosVcDemuxResourceStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 1 1 1 1 }

TmAosVcDemuxResourceStat	 ::= ResourceStat


-- This parameter configures and reports the Virtual Channel IDs the given FR instance
--  is configured to process. 
tmAosVcDemuxVcIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 1 2 1 1 }

TmAosVcDemuxVcId    	 ::= CHOICE
{
	 tmFrames            	 [0]	 	 SET  (SIZE( 1 .. 8))  OF	 INTEGER  (0 .. 7)
,	 aosFrames           	 [1]	 	 SET  (SIZE( 1 .. 256))  OF	 INTEGER  (0 .. 255)
}



-- This enumerated parameter configures and reports if the FR instance shall extract
--  CLCWs and if so from which VC. The extracted CLCWs are forwarded  to the FR types
--  that consume them. 
tmAosVcDemuxClcwExtractionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 1 3 1 1 }

TmAosVcDemuxClcwExtraction	 ::= CHOICE
{
	 noClcwExtraction    	 [0]	 	 NULL
,	 clcwExtractionTmVc  	 [1]	 	 SEQUENCE
	 {
	 	 -- For Tm frames the Transfer Frame Version Number is always 0.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 vcid                	 INTEGER  (0 .. 7)
	 }

,	 clcwExtractionAosVc 	 [2]	 	 SEQUENCE
	 {
	 	 -- For AOS frames the Transfer Frame Version Number is always 1.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 255)
,	 	 vcid                	 INTEGER  (0 .. 63)
	 }

}



-- This parameter reports the GVCIDs of the frames being delivered by this FR instance.
--  The Master Channel Id being part of the GVCID is redundant in the sense that it
--  is determined by the configuration of the TmAosMcDemux FR delivering frames to the
--  given tmAosVcDemux FR instance. However, the GVCID is a frequently used parameter
--  and is provided by the TmAosVcDemus FR for convenience.
tmAosVcDemuxGvcidType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 1 4 1 1 }

TmAosVcDemuxGvcid   	 ::= CHOICE
{
	 tmGvcid             	 [0]	 	 SET  (SIZE( 1 .. 8))  OF	 SEQUENCE
	 	 {
	 	 	 -- For Tm frames the Transfer Frame Version Number is always 0.
	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 	 vcid                	 INTEGER  (0 .. 7)
	 	 }

,	 aosGvcid            	 [1]	 	 SET  (SIZE( 1 .. 64))  OF	 SEQUENCE
	 	 {
	 	 	 -- For AOS frames the Transfer Frame Version Number is always 1.
	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 scid                	 INTEGER  (0 .. 255)
,	 	 	 vcid                	 INTEGER  (0 .. 63)
	 	 }

}



-- The event value reports the tmAosVcDemuxResourceStat value that applies since the
--  notified tmAosVcDemuxResourceStatChange event occurred.
tmAosVcDemuxEventResourceStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 2 1 1 1 }

TmAosVcDemuxEventResourceStatValue	 ::= TmAosVcDemuxResourceStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the TmAosVcDemux
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
-- 
tmAosVcDemuxContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13001 3 1 1 1 }

TmAosVcDemuxContrParamIdsAndValues	 ::= DirectiveQualifier


-- none
rtnPktExtAndDeencapType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13002 }




-- This parameter reports the set of APIDs of the space packets that are to be forwarded
--  by means of Packet.indication primitives to the Return File Service Production FR.
--   If the APID set contains an element set to the value -1, no space packets shall
--  be forwarded to the Return File Service Production FR. 
rfspApidSetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 13002 1 1 1 1 }

RfspApidSet         	 ::= NULL


-- None
frameDataSinkType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 17000 }




-- This parameter reports the service package on behalf of which telemetry frames are
--  passed to one or more offline frame buffers.
servicePackageIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 17000 1 1 1 1 }

ServicePackageId    	 ::= SEQUENCE
{
	 element1            	 INTEGER  (0 .. 1000)
,	 element2            	 DirectiveQualifier
}



-- none
cfdpSendEntityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 18000 }




-- none
fwdFileSvcProdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 18001 }




-- none
cfdpRcvEntityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 19000 }




-- none
rtnFileSvcProdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 19001 }




-- none
tdmSegmentGenType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 20000 }




-- none
nonValRmDataCollectionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 21000 }




-- none
ddorRawDataCollectionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 22000 }




-- none
openLoopRxFormatterType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 23000 }




-- none
offlineFrameBufferType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 24000 }




-- None
tdmRcrdBufferType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 25000 }




-- none
nonValRmDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 26000 }




-- None
valRmDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 27000 }




-- none
ddorRawDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 28000 }




-- none
openLoopDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 29000 }




-- None
rtnFileDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 30000 }




-- None
fwdFileDataStoreType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 31000 }




-- none
fspTsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 32000 }




-- This parameter configers and reports the Spacecraft IDs and consequently the Master
--  Channels that are permitted on the given forward link.  
fspTcMcMuxValidScidsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 32000 1 16 1 1 }

FwdTcMcMuxValidScids	 ::= SEQUENCE  (SIZE( 1 .. 1024))  OF	 	 scid                	 INTEGER  (0 .. 1023)


-- This parameter configures and reports the VC-IDs of the TC VC frames the FR instance
--  accepts as input.
fspTcVcMuxValidTcVcIdsType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 32000 1 17 1 1 }

FwdTcVcMuxValidTcVcIds	 ::= SEQUENCE  (SIZE( 1 .. 64))  OF	 	 vcId                	 INTEGER  (0 .. null)


-- The FCltuTsProvider FR provides the to be radiated CLTUs to the tcPlopSyncAndChnlEncode
--  FR.
fwdCltuTsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 }




-- This enumerated parameter reports the status of the service production process used
--  by the given instance of a F-CLTU service. It can take on the following values:
-- -
--  'configured': equipment has been assigned to support the service instance, but the
--  production process is not yet capable of radiating CLTUs;
-- - 'operational': the
--  production process has been configured for support, has completed the acquisition
--  sequence, and is capable of radiating CLTUs;
-- - 'interrupted': the production process
--  is stopped due to a fault;
-- - 'halted': the production process is stopped and production
--  equipment is out of service due to management action.
fwdCltuProductionStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 1 1 1 }

FwdCltuProductionStat	 ::= ProductionStat


-- This parameter configures and reports the identifier of the given service instance.
--  
fwdCltuServiceInstanceIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 2 1 1 }

FwdCltuServiceInstanceId	 ::= SleServiceInstanceId


-- This parameter reports the identifier of the peer application, i.e., the authority
--  on whose behalf the SLE application entity is initiating an association with the
--  FCLTU service provider. The provider performs access control based on this parameter.
--  It may also serve as key to further security relevant information such as the authentication
--  level and method and the related password.
-- 
-- Given the security relevance of this
--  parameter, specific mechanisms for setting this parameter when the FR instance is
--  created and for the transfer of associated security relevant data might be specified
--  in a bilateral agreement between service user and service provider. Also the accessibility
--  by an MD-CSTS instance may be restricted.
fwdCltuInitiatorIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 3 1 1 }

FwdCltuInitiatorId  	 ::= AuthorityIdentifier


-- This parameter reports the identifier of the FCLTU application. The user performs
--  access conrol based on this parameter. It may also serve as key to further security
--  relevant information such as the authentication level and method and the related
--  password.
-- 
-- Given the security relevance of this parameter, specific mechanisms
--  for setting this parameter when the FR instance is created and for the transfer
--  of associated security relevant data might be specified in a bilateral agreement
--  between service user and service provider. Also the accessibility by an MD-CSTS
--  instance may be restricted.
fwdCltuResponderIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 4 1 1 }

FwdCltuResponderId  	 ::= AuthorityIdentifier


-- This parameter reports the port identifier to be used by the user to connect to the
--  service provider. However, the parameter value is only a logical name that needs
--  to be translated into the technology-specific addressing information required to
-- establish
--  a connection with the specific port of the
-- responding SLE application entity. As
--  such this parameter is irrelevant for the service provider, but it may be needed
--  for certain kind of gateways between service user and service provider application.
fwdCltuResponderPortIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 5 1 1 }

FwdCltuResponderPortId	 ::= VisibleString (SIZE( 1 .. 128))  ((ALL EXCEPT " "))


-- This parameter configures and reports the setting of the maximum time period in seconds
--  permitted from when a confirmed F-CLTU operation is invoked until the return has
--  to be received by the invoker.
fwdCltuRtnTimeoutPeriodType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 6 1 1 }

-- The engineering unit of this parameter is second.
FwdCltuRtnTimeoutPeriod	 ::= SleRtnTimeout


-- This enumerated parameter reports the delivery mode of the given instance of the
--  F-CLTU service. For the present version of this service only the ‘fwdOnline’ delivery
--  mode is defined.
fwdCltuDeliveryModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 7 1 1 }

FwdCltuDeliveryMode 	 ::= ENUMERATED
{
	 fwdOnline           	 	 (0)
}



-- This enumerated parameter configures and reports how the F-CLTU provider notifies
--  certain changes of fwdCltuProductionStat to the service user. It can take on two
--  values:
-- - 'immediate': the user is notified of a fwdCltuProductionStat change to
--  'interrupted' as soon as this transition is detected;
-- - 'deferred': the user is
--  notified about the fwdCltuProductionStat change only if and when the radiation of
--  a CLTU is affected.
fwdCltuNotificationModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 8 1 1 }

FwdCltuNotificationMode	 ::= ENUMERATED
{
	 immediate           	 	 (0)
,	 deferred            	 	 (1)
}



-- This enumerated parameter configures and reports the way the F-CLTU service provider
--  will act in the event of a protocol abort. This parameter can take on two values:
-- -
--  'abort': service production will cease in the event of a protocol abort;
-- - 'continue':
--  service production will disregard the protocol abort event and continue radiating
--  the CLTUs already buffered at the time of the event.
fwdCltuProtocolAbortModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 9 1 1 }

FwdCltuProtocolAbortMode	 ::= ENUMERATED
{
	 abort               	 	 (0)
,	 continue            	 	 (1)
}



-- This enumerated parameter reports the status of the given instance of the F-CLTU
--  service. It can take on the following values:
-- - 'unbound': all resources required
--  to enable the provision of the Forward CLTU service have been allocated, and all
--  objects required to provide the service have been instantiated; however, no association
--  yet exists between the user and the provider, i.e., the F-CLTU transfer service
--  provider port is not bound;
-- - 'ready': an association has been established between
--  the user and the provider, and they may interact by means of the service operations.
--  However, sending of CLTUs from the user to the provider (by means of the CLTU-TRANSFER-DATA
--  operation) is not permitted; the user may enable the delivery of CLTUs by means
--  of the appropriate service operation (CLTU-START), which, in turn, will cause the
--  provider to transition to the state 'active';
-- - 'active':  this state resembles
--  state ‘ready’, except that now the user can send CLTUs and the provider is enabled
--  to radiate CLTUs to the spacecraft; the service continues in this state until the
--  user invokes either the CLTU-STOP operation to cause the provider to suspend transmission
--  of CLTUs and transition back to state 'ready' or the user invokes the PEER-ABORT
--  operation to cause the service to transition back to the 'unbound' state.
fwdCltuSiStateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 10 1 1 }

FwdCltuSiState      	 ::= SleSiState


-- This parameter reports the current setting of the time in seconds between successive
--  CLTU-STATUS-REPORT invocations sent by the F-CLTU service provider provided fwdCltuReportingCycle
--  is 'on'. When fwdCltuReportingCycle is 'off', no cycle time is reported. 
fwdCltuReportingCycleType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 11 1 1 }

-- If applicable, the engineering unit of this parameter is second.
FwdCltuReportingCycle	 ::= SleReportingCycle


-- This parameter reports the value of the cltu-identification the F-CLTU service provider
--  expects to receive in the next CLTU-TRANSFER-DATA invocation for this invocation
--  to be valid. As long as fwdCltuSiState ≠ 'active', the value reported will be zero.
fwdCltuExpectedCltuIdentificationType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 12 1 1 }

FwdCltuExpectedCltuIdentification	 ::= INTEGER  (0 .. 4294967295)


-- This parameter reports the value of the event-invocation-identification the F-CLTU
--  service provider expects to receive in the next CLTU-THROW-EVENT invocation for
--  this invocation to be valid. The initial value of this parameter is zero.
fwdCltuExpectedEventInvocationIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 13 1 1 }

FwdCltuExpectedEventInvocationId	 ::= INTEGER  (0 .. 4294967295)


-- This parameter reports the total number of CLTUs received while the given service
--  instance has been accessible to the user. Only CLTUs that the service provider accepted
--  and consequently buffered are counted in the total.
fwdCltuNumberOfCltusReceivedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 14 1 1 }

FwdCltuNumberOfCltusReceived	 ::= INTEGER  (0 .. 4294967295)


-- This parameter reports the number of CLTUs that the provider attempted to radiate
--  while the given service instance has been active including
-- - CLTUs that radiated
--  successfully;
-- - CLTUs that expired;
-- - CLTUs that aborted;
-- - a CLTU in the process
--  of being radiated.
fwdCltuNumberOfCltusProcessedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 15 1 1 }

FwdCltuNumberOfCltusProcessed	 ::= INTEGER  (0 .. 4294967295)


-- This parameter reports the number of CLTUs that the provider successfully radiated
--  completely during the service provision period. A CLTU in the process of being radiated
--  is not included in this count.
fwdCltuNumberOfCltusRadiatedType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 1 16 1 1 }

FwdCltuNumberOfCltusRadiated	 ::= INTEGER  (0 .. 4294967295)


-- The event value reports the fwdCltuProductionStat value that applies since the notified
--  fwdCltuProductionStatChange event occurred.
-- no type OID available

FwdCltuEventProductionStatValue	 ::= FwdCltuProductionStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the FwdCltuTsProvider
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
fwdCltuContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 33000 3 1 1 1 }

FwdCltuContrParamIdsAndValues	 ::= DirectiveQualifier


-- none
tgftHostType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 35000 }




-- The RafTsProvider accepts as input the frame provided by the FlfSyncAndDecode and
--  the OfflineFrameBuffer FRs.
rafTsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 }




-- This enumerated parameter reports the status of the service production process used
--  by the given instance of an RAF service. It can take on the following values:
-- -
--  'running' - the RAF production process is capable of processing a return space link
--  physical channel, if available;
-- - 'interrupted' - the RAF production process is
--  stopped due to a fault;
-- - 'halted' - the RAF production process is stopped and production
--  equipment is out of service due to management action.
rafProductionStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 1 1 1 }

RafProductionStatus 	 ::= SleRtnProductionStat


-- This parameter configures and reports the identifier of the given service instance.
--  
rafServiceInstanceIdentifierType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 2 1 1 }

RafServiceInstanceIdentifier	 ::= SleServiceInstanceId


-- This parameter reports the identifier of the peer application, i.e., the authority
--  on whose behalf the SLE application entity is initiating an association with the
--  RAF service provider. The provider performs access control based on this parameter.
--  It may also serve as key to further security relevant information such as the authentication
--  level and method and the related password.
-- 
-- Given the security relevance of this
--  parameter, specific mechanisms for setting this parameter when the FR instance is
--  created and for the transfer of associated security relevant data might be specified
--  in a bilateral agreement between service user and service provider. Also the accessibility
--  by an MD-CSTS instance may be restricted.
rafInitiatorIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 3 1 1 }

RafInitiatorId      	 ::= AuthorityIdentifier


-- This parameter reports the identifier of the RAF application. The user performs access
--  conrol based on this parameter. It may also serve as key to further security relevant
--  information such as the authentication level and method and the related password.
-- 
-- Given
--  the security relevance of this parameter, specific mechanisms for setting this parameter
--  when the FR instance is created and for the transfer of associated security relevant
--  data might be specified in a bilateral agreement between service user and service
--  provider. Also the accessibility by an MD-CSTS instance may be restricted.
rafResponderIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 4 1 1 }

RafResponderId      	 ::= AuthorityIdentifier


-- This parameter reports the port identifier to be used by the user to connect to the
--  service provider. However, the parameter value is only a logical name that needs
--  to be translated into the technology-specific addressing information required to
-- establish
--  a connection with the specific port of the
-- responding SLE application entity. As
--  such this parameter is irrelevant for the service provider, but it may be needed
--  for certain kind of gateways between service user and service provider application.
rafResponderPortIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 5 1 1 }

RafResponderPortId  	 ::= VisibleString (SIZE( 1 .. 128))  ((ALL EXCEPT " "))


-- This parameter reports the setting of the maximum time period in seconds permitted
--  from when a confirmed RAF operation is invoked until the return is received by the
--  invoker.
rafRtnTimeoutPeriodType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 6 1 1 }

-- The engineering unit of this parameter is second.
RafRtnTimeoutPeriod 	 ::= SleRtnTimeout


-- This enumerated parameter configures and reports the delivery mode of the given RAF
--  service instance. It can take on three values:
-- - 'online timely'  - the timely
--  online delivery mode limits the size of the backlog of not yet delivered data that
--  is allowed to accumulate by discarding data that cannot be delivered within a certain
--  time. Furthermore, when data is discarded, it is discarded ‘in chunks’, i.e., as
--  a sufficiently large block of contiguous frames rather than as random frames here
--  and there; in general, this approach maximizes the usefulness of the data that is
--  delivered.
-- - 'online complete' - this delivery mode attempts to deliver all acquired
--  frames having the user selected characteristics, in order, with minimum delay consistent
--  with the available ground communications bandwidth. To that end, the service provider
--  has a buffer sufficiently large to deal with communications service delays, outages,
--  and bandwidth limitations;
-- - 'offline' - in this delivery mode, the provider side
--  buffer enables data to be delivered hours or days after their acquisition. To that
--  end, this buffer is sufficiently large to hold all data that might be accumulated
--  during several space link sessions.
rafDeliveryModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 7 1 1 }

RafDeliveryMode     	 ::= SleRtnDeliveryMode


-- This parameter configures and reports the maximum allowable delivery latency time,
--  in seconds, for the online delivery modes, i.e., the maximum delay from when the
--  frame is acquired by the provider until it is delivered to the user.  If rafDeliveryMode
--  = 'offline', rafLatencyLimit has no effect.
rafLatencyLimitType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 8 1 1 }

-- The engineering unit of this parameter is second
RafLatencyLimit     	 ::= INTEGER  (1 .. 100)


-- This parameter configures and reports the number of frames the provider shall block
--  in one RAF-PDU before passing it to the underlying communications layer except if
--  expiry of the rafLatencyLimit requires earlier release of the RAF-PDU.
rafTransferBufferSizeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 9 1 1 }

RafTransferBufferSize	 ::= INTEGER  (1 .. 1000)


-- This enumerated parameter reports the set of the quality of the frames that the user
--  may select with the given RAF service instance. The permitted frame quality settings
--  must be chosen from the following set of values: 
-- - 'good' - only frames that based
--  on successful RS or LDPC decoding/correcting and/or based on the check of the FECF
--  are assumed to be error free will be delivered to the user;
-- - 'erred' - only frames
--  that based on unsuccessful RS or LDPC decoding/correcting or  based on the failed
--  check of the FECF were found to contain errors will be delivered to the user;
-- -
--  'all'  - all frames regardless if error free or not are delivered to the user; this
--  includes telemetry frames for which due to lack of compatibility with the pertinent
--  CCSDS Recommendations the quality cannot be determined.
rafPermittedFrameQualityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 10 1 1 }

RafPermittedFrameQuality	 ::= SET  (SIZE( 1 .. 3))  OF	 	 	 ENUMERATED
	 {
	 	 good                	 	 (0)
	 ,	 erred               	 	 (1)
	 ,	 all                 	 	 (2)
	 }



-- This enumerated parameter reports the quality of the frames that shall be delivered
--  by the given RAF service instance. It can take on one of three values:
-- - 'good'
--  - only frames that based on successful RS or LDPC decoding/correcting and/or based
--  on the check of the FECF are assumed to be error free will be delivered to the user;
-- -
--  'erred' - only frames that based on unsuccessful RS or LDPC decoding/correcting
--  and/or based on the failed check of the FECF were found to contain errors will be
--  delivered to the user;
-- - 'all'  - all frames regardless if error free or not are
--  delivered to the user; this includes telemetry frames for which due to lack of compatibility
--  with the pertinent CCSDS Recommendations the quality cannot be determined.
-- If the
--  given service instance does not constrain this parameter to a single value, it shall
--  be flagged 'undefined' whenever si-state ≠ 'active'.
rafRequestedFrameQualityType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 11 1 1 }

RafRequestedFrameQuality	 ::= ENUMERATED
{
	 good                	 	 (0)
,	 erred               	 	 (1)
,	 all                 	 	 (2)
}



-- This enumerated parameter reports the status of the given instance of the RAF service.
--  It can take on the following values:
-- - 'unbound' - All resources required to enable
--  the provision of the RAF service have been allocated, and all objects required to
--  provide the service have been instantiated; however, no association yet exists between
--  the user and the provider, i.e., the RAF transfer service provider port is not bound;
-- -
--  'ready'- An association has been established between the user and the provider,
--  and they may interact by means of the service operations. However, sending of telemetry
--  frames from the provider to the user (by means of the RAF-TRANSFER-DATA operation)
--  is not permitted; the user may enable the delivery of telemetry frames by means
--  of the appropriate service operation (RAF-START), which, in turn, will cause the
--  provider to transition to the rafSiState 'active';
-- - 'active' -  This state resembles
--  the rafSiState ‘ready’, except that now the provider will send telemetry frames
--  provided frames of the selected characteristics are made available by the RAF production
--  process; the service continues in this state until the user invokes either the RAF-STOP
--  operation to cause the provider to suspend delivery of telemetry frames and transition
--  back to the rafSiState 'ready' or the PEER-ABORT invocation to cause the service
--  to transition back to the rafSiState 'unbound'.
rafSiStateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 12 1 1 }

RafSiState          	 ::= SleSiState


-- This parameter reports the current setting of the time in seconds between successive
--  RAF-STATUS-REPORT invocations sent by the RAF service provider provided rafReportingCycle
--  is 'on'. When rafReportingCycle is 'off', no cycle time is reported.
rafReportingCycleType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 13 1 1 }

-- The engineering unit of this parameter is second.
RafReportingCycle   	 ::= SleReportingCycle


-- This parameter reports the  total number of telemetry frames that were annotated
--  with a frame-quality of ‘good’ and delivered to the user since the start of the
--  service instance provision period.
rafNumberOfErrorFreeFramesDeliveredType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 14 1 1 }

RafNumberOfErrorFreeFramesDelivered	 ::= INTEGER  (0 .. 4294967295)


-- This parameter reports the  total number of telemetry frames that were delivered
--  to the user since the start of the service instance provision period.
rafNumberOfFramesDeliveredType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 1 15 1 1 }

RafNumberOfFramesDelivered	 ::= INTEGER  (0 .. 4294967295)


-- The event value reports the rafTsProductionStat value that applies since the notified
--  rafTsProductionStatChange event occurred.
rafEventProductionStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 2 1 1 1 }

RafEventProductionStatusValue	 ::= RafProductionStatus


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the RafTsProvider
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
rafContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 36000 3 1 1 1 }

RafContrParamIdsAndValues	 ::= DirectiveQualifier


-- The RcfTsProvider accepts as input the frames provided by the FlfSyncAndDecode and
--  the OfflineFrameBuffer FRs. It delivers the frames of the selected Master or Virtual
--  Channel.
rcfTsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 }




-- This enumerated parameter reports the status of the service production process used
--  by the given instance of an RCF service. It can take on the following values:
-- -
--  'running' - the RCF production process is capable of processing a return link Master
--  or Virtual Channel, if available;
-- - 'interrupted' - the RCF production process is
--  stopped due to a fault;
-- - 'halted' - the RCF production process is stopped and production
--  equipment is out of service due to management action.
rcfProductionStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 1 1 1 }

RcfProductionStat   	 ::= SleRtnProductionStat


-- This parameter configures and reports the identifier of the given service instance.
--  
rcfServiceInstanceIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 2 1 1 }

RcfServiceInstanceId	 ::= SleServiceInstanceId


-- This parameter reports the identifier of the peer application, i.e., the authority
--  on whose behalf the SLE application entity is initiating an association with the
--  RCF service provider. The provider performs access control based on this parameter.
--  It may also serve as key to further security relevant information such as the authentication
--  level and method and the related password.
-- 
-- Given the security relevance of this
--  parameter, specific mechanisms for setting this parameter when the FR instance is
--  created and for the transfer of associated security relevant data might be specified
--  in a bilateral agreement between service user and service provider. Also the accessibility
--  by an MD-CSTS instance may be restricted.
rcfInitiatorIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 3 1 1 }

RcfInitiatorId      	 ::= AuthorityIdentifier


-- This parameter reports the identifier of the RCF application. The user performs access
--  conrol based on this parameter. It may also serve as key to further security relevant
--  information such as the authentication level and method and the related password.
-- 
-- Given
--  the security relevance of this parameter, specific mechanisms for setting this parameter
--  when the FR instance is created and for the transfer of associated security relevant
--  data might be specified in a bilateral agreement between service user and service
--  provider. Also the accessibility by an MD-CSTS instance may be restricted.
rcfResponderIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 4 1 1 }

RcfResponderId      	 ::= AuthorityIdentifier


-- This parameter reports the port identifier to be used by the user to connect to the
--  service provider. However, the parameter value is only a logical name that needs
--  to be translated into the technology-specific addressing information required to
-- establish
--  a connection with the specific port of the
-- responding SLE application entity. As
--  such this parameter is irrelevant for the service provider, but it may be needed
--  for certain kind of gateways between service user and service provider application.
rcfResponderPortIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 5 1 1 }

RcfResponderPortId  	 ::= VisibleString (SIZE( 1 .. 128))  ((ALL EXCEPT " "))


-- This parameter reports the setting of the maximum time period in seconds permitted
--  from when a confirmed RCF operation is invoked until the return is received by the
--  invoker.
rcfRtnTimeoutPeriodType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 6 1 1 }

-- The engineering unit of this parameter is second.
RcfRtnTimeoutPeriod 	 ::= SleRtnTimeout


-- This enumerated parameter configures and reports the delivery mode of the given RCF
--  service instance. It can take on three values:
-- - 'online timely'  - the timely
--  online delivery mode limits the size of the backlog of not yet delivered data that
--  is allowed to accumulate by discarding data that cannot be delivered within a certain
--  time. Furthermore, when data is discarded, it is discarded ‘in
-- chunks’, i.e., as
--  a sufficiently large block of contiguous frames rather than as random frames here
--  and there; in general, this approach maximizes the usefulness of the data that is
--  delivered.
-- - 'online complete' - this delivery mode attempts to deliver all acquired
--  frames having the user selected characteristics, in order, with minimum delay consistent
--  with the available ground communications bandwidth. To that end, the service provider
--  has a buffer sufficiently large to deal with communications service delays, outages,
--  and bandwidth limitations;
-- - 'offline' - in this delivery mode, the provider side
--  buffer enables data to be delivered hours or days after their acquisition. To that
--  end, this buffer is sufficiently large to hold all data that might be accumulated
--  during several space link sessions.
rcfDeliveryModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 7 1 1 }

RcfDeliveryMode     	 ::= SleRtnDeliveryMode


-- This parameter configures and reports the maximum allowable delivery latency time,
--  in seconds, for the online delivery modes, i.e., the maximum delay from when the
--  frame is acquired by the provider until it is delivered to the user. This parameter
--  shall be flagged as undefined if rcfDeliveryMode = 'offline'.
rcfLatencyLimitType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 8 1 1 }

-- The engineering unit of this parameter is second.
RcfLatencyLimit     	 ::= INTEGER  (1 .. 100)


-- This parameter configures and reports the number of frames the provider shall block
--  in one RCF-PDU before passing it to the underlying communications layer except if
--  expiry of rcfLatencyLimit requires earlier release of the RCF-PDU. If rcfDeliveryMode
--  = 'offline', rcfLatencyLimit has no effect.
rcfTransferBufferSizeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 9 1 1 }

RcfTransferBufferSize	 ::= INTEGER  (1 .. 100)


-- This parameter reports the set of Master and/or Virtual Channel that the given RCF
--  service instance permits the user to select. The parameter is a set of the concatenation
--  of the CCSDS assigned Spacecraft Identifier (SCID), the Transfer Frame Version Number
--  (TFVN) and, if applicable, the Virtual Channel Identifier (VCID). The range of the
--  Spacecraft Identifier and the Virtual Channel Identifier depend on the TFVN as follows:
-- -
--  TFVN = 0 (version 1) - SCID = (0 .. 1023)10, VCID = (0 .. 7)10;
-- - TFVN = 1 (version
--  2) - SCID = (0 .. 255)10, VCID = (0 .. 63)10.
rcfPermittedGlobalVcidSetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 10 1 1 }

RcfPermittedGlobalVcidSet	 ::= CHOICE
{
	 tm                  	 [0]	 	 SET  (SIZE( 1 .. 9216))  OF	 SEQUENCE
	 	 {
	 	 	 -- The TFVN of Tm frames is always 0.
	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 	 vcid                	 CHOICE
	 	 	 {
	 	 	 	 -- For the Master Channel the vcid remains unspecified.
	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 7)
	 	 	 }

	 	 }

,	 aos                 	 [1]	 	 SET  (SIZE( 1 .. 16640))  OF	 SEQUENCE
	 	 {
	 	 	 -- The TFVN of AOS frames is always 1.
	 	 	 tfvn                	 INTEGER  (1)
,	 	 	 scid                	 INTEGER  (0 .. 255)
,	 	 	 vcid                	 CHOICE
	 	 	 {
	 	 	 	 -- For the Master Channel the vcid remains unspecified.
	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 	 }

	 	 }

}



-- This parameter reports the Master or Virtual Channel that the given RCF service instance
--  shall deliver to the user. The parameter is a concatenation of the CCSDS assigned
--  Spacecraft Identifier (SCID), the Transfer Frame Version Number (TFVN) and, if applicable,
--  the Virtual Channel Identifier (VCID). The range of the Spacecraft Identifier and
--  the Virtual Channel Identifier depend on the TFVN as follows:
-- - TFVN = 0 (version
--  1) - SCID = (0 .. 1023)10, VCID = (0 .. 7)10;
-- - TFVN = 1 (version 2) - SCID = (0
--  .. 255)10, VCID = (0 .. 63)10.
-- If the global VCID is not constrained to a single
--  value by the given RCF service instance (see permitted-global-vcid-set), then this
--  parameter shall be flagged undefined as long as si-state ≠ 'active.
rcfRequestedGlobalVcidType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 11 1 1 }

RcfRequestedGlobalVcid	 ::= CHOICE
{
	 tm                  	 [0]	 	 SEQUENCE
	 {
	 	 -- The TFVN of TM frames is always 0.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 vcid                	 CHOICE
	 	 {
	 	 	 -- In case the Master Channel is selected, the VCID remains unspecified.
	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 vcid                	 [1]	 	 INTEGER  (0 .. 7)
	 	 }

	 }

,	 -- The TFVN of AOS frames is always 1.
	 aos                 	 [1]	 	 SEQUENCE
	 {
	 	 -- The TFVN of AOS frames is always 1.
	 	 tfvn                	 INTEGER  (1)
,	 	 scid                	 INTEGER  (0 .. 255)
,	 	 vcid                	 CHOICE
	 	 {
	 	 	 -- When a Master Channel is selected, the VCID remains unspecified.
	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 }

	 }

}



-- This enumerated parameter reports the status of the given instance of the RCF service.
--  It can take on the following values:
-- - 'unbound' - All resources required to enable
--  the provision of the RCF service have been allocated, and all objects required to
--  provide the service have been instantiated; however, no association yet exists between
--  the user and the provider, i.e., the RCF transfer service provider port is not bound;
-- -
--  'ready'- An association has been established between the user and the provider,
--  and they may interact by means of the service operations. However, sending of telemetry
--  frames from the provider to the user (by means of the RCF-TRANSFER-DATA operation)
--  is not permitted; the user may enable the delivery of telemetry frames by means
--  of the appropriate service operation (RCF-START), which, in turn, will cause the
--  provider to transition to the state 'active';
-- - 'active' -  This state resembles
--  state ‘ready’, except that now the provider will send telemetry frames provided
--  frames of the selected characteristics are made available by the RCF production
--  process; the service continues in this state until the user invokes the RCF-STOP
--  operation to cause the provider to suspend delivery of telemetry frames and transition
--  back to state 'ready' or the PEER-ABORT invocation to cause the service to transition
--  back to the 'unbound' state.
rcfSiStateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 12 1 1 }

RcfSiState          	 ::= SleSiState


-- This parameter reports the current setting of the time in seconds between successive
--  RCF-STATUS-REPORT invocations sent by the RCF service provider provided rcfReportingCycle
--  is 'on'. When rcfReportingCycle is 'off', no cycle time is reported.
rcfReportingCycleType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 13 1 1 }

RcfReportingCycle   	 ::= SleReportingCycle


-- This parameter reports the total number of telemetry frames that were delivered to
--  the user since the start of the service instance provision period.
rcfNumberOfFramesDeliveredType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 1 14 1 1 }

RcfNumberOfFramesDelivered	 ::= INTEGER  (0 .. 4294967295)


-- The event value reports the rcfTsProductionStat value that applies since the notified
--  rcfTsProductionStatChange event occurred.
rcfEventProductionStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 2 1 1 1 }

RcfEventProductionStatValue	 ::= RcfProductionStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the RcfTsProvider
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
rcfContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 3 1 1 1 }

RcfContrParamIdsAndValues	 ::= DirectiveQualifier


-- The RocfTsProvider accepts as input the frames provided by the FlfSyncAndDecode and
--  the OfflineFrameBuffer FRs. It delivers the Operational Control Fields (OCF) extracted
--  from the frames of the selected Master or Virtual Channel provided the OCFs meet
--  the other selection criteria set by the ROCF service user.
rocfTsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 }




-- This enumerated parameter reports the status of the service production process used
--  by the given instance of an ROCF service. It can take on the following values:
-- -
--  'running' - the ROCF production process is capable of processing a return link Master
--  or Virtual Channel, if available;
-- - 'interrupted' - the ROCF production process
--  is stopped due to a fault;
-- - 'halted' - the ROCF production process is stopped and
--  production equipment is out of service due to management action.
rocfProductionStatType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 1 1 1 }

RocfProductionStat  	 ::= SleRtnProductionStat


-- This parameter configures and reports the identifier of the given service instance.
--  
rocfServiceInstanceIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 2 1 1 }

RocfServiceInstanceId	 ::= SleServiceInstanceId


-- This parameter reports the identifier of the peer application, i.e., the authority
--  on whose behalf the SLE application entity is initiating an association with the
--  ROCF service provider. The provider performs access control based on this parameter.
--  It may also serve as key to further security relevant information such as the authentication
--  level and method and the related password.
-- 
-- Given the security relevance of this
--  parameter, specific mechanisms for setting this parameter when the FR instance is
--  created and for the transfer of associated security relevant data might be specified
--  in a bilateral agreement between service user and service provider. Also the accessibility
--  by an MD-CSTS instance may be restricted.
rocfInitiatorIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 3 1 1 }

RocfInitiatorId     	 ::= AuthorityIdentifier


-- This parameter reports the identifier of the ROCF application. The user performs
--  access conrol based on this parameter. It may also serve as key to further security
--  relevant information such as the authentication level and method and the related
--  password.
-- 
-- Given the security relevance of this parameter, specific mechanisms
--  for setting this parameter when the FR instance is created and for the transfer
--  of associated security relevant data might be specified in a bilateral agreement
--  between service user and service provider. Also the accessibility by an MD-CSTS
--  instance may be restricted.
rocfResponderIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 4 1 1 }

RocfResponderId     	 ::= AuthorityIdentifier


-- This parameter reports the port identifier to be used by the user to connect to the
--  service provider. However, the parameter value is only a logical name that needs
--  to be translated into the technology-specific addressing information required to
-- establish
--  a connection with the specific port of the
-- responding SLE application entity. As
--  such this parameter is irrelevant for the service provider, but it may be needed
--  for certain kind of gateways between service user and service provider application.
rocfResponderPortIdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 5 1 1 }

RocfResponderPortId 	 ::= VisibleString (SIZE( 1 .. 128))  ((ALL EXCEPT " "))


-- This parameter reports the setting of the maximum time period in seconds permitted
--  from when a confirmed ROCF operation is invoked until the return is received by
--  the invoker.
rocfRtnTimeoutPeriodType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 6 1 1 }

-- The engineering unit of this parameter is second
RocfRtnTimeoutPeriod	 ::= SleRtnTimeout


-- This enumerated parameter configures and reports the delivery mode of the given ROCF
--  service instance. It can take on three values:
-- - 'online timely'  - the timely
--  online delivery mode limits the size of the backlog of not yet delivered data that
--  is allowed to accumulate by discarding data that cannot be delivered within a certain
--  time. Furthermore, when data is discarded, it is discarded ‘in
-- chunks’, i.e., as
--  a OCFs extracted from a sufficiently large block of contiguous frames rather than
--  as OCFs from random frames here and there; in general, this approach maximizes the
--  usefulness of the data that is delivered.
-- - 'online complete' - this delivery mode
--  attempts to deliver the OCFs having the user selected characteristics from all acquired
--  frames, in order, with minimum delay consistent with the available ground communications
--  bandwidth. To that end, the service provider has a buffer sufficiently large to
--  deal with communications service delays, outages, and bandwidth limitations;
-- -
--  'offline' - in this delivery mode, the provider side buffer enables data to be delivered
--  hours or days after their acquisition. To that end, this buffer is sufficiently
--  large to hold all data that might be accumulated during several space link sessions.
rocfDeliveryModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 7 1 1 }

RocfDeliveryMode    	 ::= SleRtnDeliveryMode


-- This parameter configures and reports the maximum allowable delivery latency time,
--  in seconds, for the online delivery modes, i.e., the maximum delay from when the
--  provider extracts an OCF from a newly acquired frame until it is delivered to the
--  user. This parameter shall be flagged as undefined if rocfDeliveryMode = 'offline'.
rocfLatencyLimitType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 8 1 1 }

-- The engineering unit of this parameter is second.
RocfLatencyLimit    	 ::= INTEGER  (1 .. 100)


-- This parameter configures and reports the number of OCFs the provider shall block
--  in one ROCF-PDU before passing it to the underlying communications layer except
--  if expiry of rocfLatencyLimit requires earlier release of the ROCF-PDU. If rocfDeliveryMode
--  = 'offline', rocfLatencyLlimit has no effect.
rocfTransferBufferSizeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 9 1 1 }

RocfTransferBufferSize	 ::= INTEGER  (1 .. 100)


-- This parameter reports the telemetry Master and/or Virtual Channel out of which the
--  given ROCF service instance extracts the OCFs. The parameter is a set of the concatenation
--  of the CCSDS assigned Spacecraft Identifier (SCID), the Transfer Frame Version Number
--  (TFVN) and, if applicable, the Virtual Channel Identifier (VCID). The range of the
--  Spacecraft Identifier and the Virtual Channel Identifier depend on the TFVN as follows:
-- -
--  TFVN = 0 (version 1) - SCID = (0 .. 1023)10, VCID = (0 .. 7)10;
-- - TFVN = 1 (version
--  2) - SCID = (0 .. 255)10, VCID = (0 .. 63)10.
rocfPermittedGlobalVcidSetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 10 1 1 }

RocfPermittedGlobalVcidSet	 ::= CHOICE
{
	 tm                  	 [0]	 	 SET  (SIZE( 1 .. 9216))  OF	 SEQUENCE
	 	 {
	 	 	 -- The TFVN of Tm frames is always 0.
	 	 	 tfvn                	 INTEGER  (0)
,	 	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 	 vcid                	 CHOICE
	 	 	 {
	 	 	 	 -- For the Master Channel the vcid remains unspecified.
	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 7)
	 	 	 }

	 	 }

,	 aos                 	 [1]	 	 SET  (SIZE( 1 .. 16640))  OF	 SEQUENCE
	 	 {
	 	 	 -- The TFVN of AOS frames is always 1.
	 	 	 tfvn                	 INTEGER  (1)
,	 	 	 scid                	 INTEGER  (0 .. 255)
,	 	 	 vcid                	 CHOICE
	 	 	 {
	 	 	 	 -- For the Master Channel the vcid remains unspecified.
	 	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 	 }

	 	 }

}



-- This parameter reports the set of Master and/or Virtual Channel that the given ROCF
--  service instance permits the user to select. The parameter is a set of the concatenation
--  of the CCSDS assigned Spacecraft Identifier (SCID), the Transfer Frame Version Number
--  (TFVN) and, if applicable, the Virtual Channel Identifier (VCID). The range of the
--  Spacecraft Identifier and the Virtual Channel Identifier depend on the TFVN as follows:
-- -
--  TFVN = 0 (version 1) - SCID = (0 .. 1023)10, VCID = (0 .. 7)10;
-- - TFVN = 1 (version
--  2) - SCID = (0 .. 255)10, VCID = (0 .. 63)10.
-- If the global VCID is not constrained
--  to a single value by the given ROCF service instance, then this parameter shall
--  be flagged as undefined as long as si-state ≠ 'active.
rocfRequestedGlobalVcidType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 11 1 1 }

RocfRequestedGlobalVcid	 ::= CHOICE
{
	 tm                  	 [0]	 	 SEQUENCE
	 {
	 	 -- The TFVN of TM frames is always 0.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 vcid                	 CHOICE
	 	 {
	 	 	 -- In case the Master Channel is selected, the VCID remains unspecified.
	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 vcid                	 [1]	 	 INTEGER  (0 .. 7)
	 	 }

	 }

,	 -- The TFVN of AOS frames is always 1.
	 aos                 	 [1]	 	 SEQUENCE
	 {
	 	 -- The TFVN of AOS frames is always 1.
	 	 tfvn                	 INTEGER  (1)
,	 	 scid                	 INTEGER  (0 .. 255)
,	 	 vcid                	 CHOICE
	 	 {
	 	 	 -- When a Master Channel is selected, the VCID remains unspecified.
	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 virtualChannel      	 [1]	 	 INTEGER  (0 .. 63)
	 	 }

	 }

}



-- This parameter reports the set of OCF types that the given ROCF service instance
--  permits the user to select. Three types are defined:
-- - 'all control word types'
--  - all OCFs shall be delivered regardless of their type;
-- - 'clcw' - only OCFs containing
--  the CCSDS defined Communication Link Control Word (CLCW) data structure shall be
--  delivered;
-- - 'not-clcw' - only privately defined OCFs shall be delivered.   
rocfPermittedContrWordTypeSetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 12 1 1 }

RocfPermittedContrWordTypeSet	 ::= SET  (SIZE( 1 .. 3))  OF	 	 	 ENUMERATED
	 {
	 	 allControlWordTypes 	 	 (0)
	 ,	 clcwsOnly           	 	 (1)
	 ,	 nonClcwsOnly        	 	 (2)
	 }



-- This enumerated parameter reports the type of the OCFs that shall be delivered. It
--  can take on three values:
-- - all control word types' - the service provider delivers
--  all OCFs extracted from the selected telemetry channel, regardless of the control
--  word type they contain;
-- - 'clcws only' - the service provider delivers the OCFs
--  extracted from the selected telemetry channel that contain CLCW reports;
-- - 'non-clcws
--  only' - the service provider delivers the OCFs extracted from the selected telemetry
--  channel that contain reports different from CLCWs.
rocfRequestedContrWordTypeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 13 1 1 }

RocfRequestedContrWordType	 ::= ENUMERATED
{
	 allControlWordTypes 	 	 (0)
,	 clcwsOnly           	 	 (1)
,	 nonClcwsOnly        	 	 (2)
}



-- This parameter reports the TC Master Channel and/or the Virtual Channels that the
--  CLCWs that shall be extracted are associated with. If rocfRequestedContrWordType
--  ≠ 'clcw', this parameter shall be flagged as undefined. 
rocfPermittedTcVcidSetType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 14 1 1 }

RocfPermittedTcVcidSet	 ::= SET  (SIZE( 1 .. 66560))  OF	 SEQUENCE
	 {
	 	 -- The TFVN of TC frames is always 0.
	 	 tfvn                	 INTEGER  (0)
,	 	 scid                	 INTEGER  (0 .. 1023)
,	 	 vcid                	 CHOICE
	 	 {
	 	 	 -- When the Master Channel is selected, the VCID remains unspecified.
	 	 	 masterChannel       	 [0]	 	 NULL
,	 	 	 vcid                	 [1]	 	 INTEGER  (0 .. 63)
	 	 }

	 }



-- This parameter reports which TC Master Channel or Virtual Channel the OCFs to be
--  delivered shall be associated with. The parameter is a concatenation of the CCSDS
--  assigned Spacecraft Identifier (SCID), the Transfer Frame Version Number (TFVN)
--  and, if applicable, the Virtual Channel Identifier (VCID).
-- If requestedContrWordType
--  ≠ clcw, this parameter shall be flagged as undefined.
rocfRequestedTcVcidType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 15 1 1 }

RocfRequestedTcVcid 	 ::= SEQUENCE
{
	 -- The TFVN of TC frames is always 0.
	 tfvn                	 INTEGER  (0)
,	 scid                	 INTEGER  (0 .. 1023)
,	 vcid                	 CHOICE
	 {
	 	 -- When the Master Channel is selected, the VCID remains unspecified.
	 	 masterChannel       	 [0]	 	 NULL
,	 	 vcid                	 [1]	 	 INTEGER  (0 .. 63)
	 }

}



-- This parameter reports the update modes that the given ROCF service instance permits.
--  The update modes are:
-- - 'continuous': the given ROCF service permits the 'continuous'
--  mode, i.e. the OCF service provider delivers each OCF that fulfills the delivery
--  criteria specified by the ROCF-START invocation parameters start-time, stop-time,
--  requested-global-VCID, control-word-type, and tc-vcid;
-- - 'change-based': the ROCF
--  service provider delivers those OCFs that fulfill the delivery criteria specified
--  by the ROCF-START invocation parameters start-time, stop-time, requested-global-VCID,
--  control-word-type, and tc-vcid provided the content of the OCF is different than
--  the one of the OCF with the same tc-vcid value previously delivered. 
rocfPermittedUpdateModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 16 1 1 }

RocfPermittedUpdateMode	 ::= SET  (SIZE( 1 .. 2))  OF	 	 	 ENUMERATED
	 {
	 	 continuous          	 	 (0)
	 ,	 onChange            	 	 (1)
	 }



-- This enumerated parameter reports the update mode applied by the ROCF service provider
--  for the delivery of OCFs. It can take on two values:
-- - 'continuous' - the ROCF service
--  provider delivers each OCF that fulfills the delivery criteria specified by the
--  ROCF-START invocation parameters start-time, stop-time, requested-global-VCID, control-word-type,
--  and tc-vcid;
-- - 'change-based' - the ROCF service provider delivers those OCFs that
--  fulfill the delivery criteria specified by the ROCF-START invocation parameters
--  start-time, stop-time, requested-global-VCID, control-word-type, and tc-vcid provided
--  the content of the OCF is different than the one of the OCF with the same tc-vcid
--  value previously delivered. 
rocfRequestedUpdateModeType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 17 1 1 }

RocfRequestedUpdateMode	 ::= ENUMERATED
{
	 continuous          	 	 (0)
,	 onChange            	 	 (1)
}



-- This enumerated parameter reports the status of the given instance of the ROCF service.
--  It can take on the following values:
-- - 'unbound' - All resources required to enable
--  the provision of the ROCF service have been allocated, and all objects required
--  to provide the service have been instantiated; however, no association yet exists
--  between the user and the provider, i.e., the ROCF transfer service provider port
--  is not bound;
-- - 'ready'- An association has been established between the user and
--  the provider, and they may interact by means of the service operations. However,
--  sending of Operational Control Fields (OCFs) from the provider to the user (by means
--  of the ROCF-TRANSFER-DATA operation) is not permitted; the user may enable the delivery
--  of OCFs by means of the appropriate service operation (ROCF-START), which, in turn,
--  will cause the provider to transition to the state 'active';
-- - 'active' -  This
--  state resembles state ‘ready’, except that now the provider will send OCFs provided
--  frames of the selected characteristics are made available by the ROCF production
--  process; the service continues in this state until the user invokes the ROCF-STOP
--  operation to cause the provider to suspend delivery of OCFs and transition back
--  to state 'ready or the PEER-ABORT invocation to cause the service to transition
--  back to the 'unbound' state.
rocfSiStateType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 18 1 1 }

RocfSiState         	 ::= SleSiState


-- This parameter reports the current setting of the time in seconds between successive
--  ROCF-STATUS-REPORT invocations sent by the ROCF service provider provided rocfReportingCycle
--  is 'on'. When rocfReportingCycle is 'off', no cycle time is reported.
rocfReportingCycleType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 19 1 1 }

RocfReportingCycle  	 ::= SleReportingCycle


-- This parameter reports the  total number of OCFs that were delivered to the user
--  since the start of the service instance provision period.
rocfNumberOfOcfsDeliveredType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 38000 1 20 1 1 }

RocfNumberOfOcfsDelivered	 ::= INTEGER  (0 .. 4294967295)


-- The event value reports the rocfTsProductionStat value that applies since the notified
--  rocfTsProductionStatChange event occurred.
rocfEventProductionStatValueType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 2 1 1 1 }

RocfEventProductionStatValue	 ::= RcfProductionStat


-- The directive qualifier specifies the FR instance the directive shall act on and
--  contains a set of parameter identifier and parameter value pairs. To be valid, the
--  parameter identifier must reference a controllable parameter of the RocfTsProvider
--  FR and the parameter value must be of the same type as the parameter value that
--  shall be set.
rocfContrParamIdsAndValuesType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 37000 3 1 1 1 }

RocfContrParamIdsAndValues	 ::= DirectiveQualifier


-- none
tdCstsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 39000 }




-- The MonitoredDataCSTSProvider FR accepts as input the monitored data provided by
--  the MonitoredDataCollection FR.
mdCstsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 40000 }




-- none
mdCollectionType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 40001 }




-- none
svcContrCstsProviderType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 41000 }




-- none
svcContrProdType	 OBJECT IDENTIFIER ::= { 1 3 112 4 4 2 1 41001 }



END