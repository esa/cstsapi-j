/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package b2.ccsds.csts.data.processing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import b2.ccsds.csts.common.types.DataUnitId;
import b2.ccsds.csts.common.types.Embedded;
import b2.ccsds.csts.common.types.Extended;
import b2.ccsds.csts.common.types.ProductionStatus;
import b2.ccsds.csts.common.types.Time;
import b2.ccsds.csts.pdus.CstsFrameworkPdu;

public class DataProcNotifyInvocExt implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public static class DataUnitIdLastProcessed implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class DataUnitLastProcessed implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static class DataProcessingStatus implements BerType, Serializable {

				private static final long serialVersionUID = 1L;

				public byte[] code = null;
				private DataProcessingStartTime successfullyProcessed = null;
				private DataProcessingStartTime processingInterrupted = null;
				private DataProcessingStartTime processingStarted = null;
				private Embedded dataProcessingStatusExtension = null;
				
				public DataProcessingStatus() {
				}

				public DataProcessingStatus(byte[] code) {
					this.code = code;
				}

				public void setSuccessfullyProcessed(DataProcessingStartTime successfullyProcessed) {
					this.successfullyProcessed = successfullyProcessed;
				}

				public DataProcessingStartTime getSuccessfullyProcessed() {
					return successfullyProcessed;
				}

				public void setProcessingInterrupted(DataProcessingStartTime processingInterrupted) {
					this.processingInterrupted = processingInterrupted;
				}

				public DataProcessingStartTime getProcessingInterrupted() {
					return processingInterrupted;
				}

				public void setProcessingStarted(DataProcessingStartTime processingStarted) {
					this.processingStarted = processingStarted;
				}

				public DataProcessingStartTime getProcessingStarted() {
					return processingStarted;
				}

				public void setDataProcessingStatusExtension(Embedded dataProcessingStatusExtension) {
					this.dataProcessingStatusExtension = dataProcessingStatusExtension;
				}

				public Embedded getDataProcessingStatusExtension() {
					return dataProcessingStatusExtension;
				}

				public int encode(OutputStream reverseOS) throws IOException {

					if (code != null) {
						for (int i = code.length - 1; i >= 0; i--) {
							reverseOS.write(code[i]);
						}
						return code.length;
					}

					int codeLength = 0;
					int sublength;

					if (dataProcessingStatusExtension != null) {
						codeLength += dataProcessingStatusExtension.encode(reverseOS, false);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
						reverseOS.write(0x64);
						reverseOS.write(0xBF);
						codeLength += 2;
						return codeLength;
					}
					
					if (processingStarted != null) {
						sublength = processingStarted.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
						reverseOS.write(0xA2);
						codeLength += 1;
						return codeLength;
					}
					
					if (processingInterrupted != null) {
						sublength = processingInterrupted.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
						reverseOS.write(0xA1);
						codeLength += 1;
						return codeLength;
					}
					
					if (successfullyProcessed != null) {
						sublength = successfullyProcessed.encode(reverseOS);
						codeLength += sublength;
						codeLength += BerLength.encodeLength(reverseOS, sublength);
						// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
						reverseOS.write(0xA0);
						codeLength += 1;
						return codeLength;
					}
					
					throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
				}

				public int decode(InputStream is) throws IOException {
					return decode(is, null);
				}

				public int decode(InputStream is, BerTag berTag) throws IOException {

					int codeLength = 0;
					BerTag passedTag = berTag;

					if (berTag == null) {
						berTag = new BerTag();
						codeLength += berTag.decode(is);
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
						codeLength += BerLength.skip(is);
						successfullyProcessed = new DataProcessingStartTime();
						codeLength += successfullyProcessed.decode(is, null);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
						codeLength += BerLength.skip(is);
						processingInterrupted = new DataProcessingStartTime();
						codeLength += processingInterrupted.decode(is, null);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
						codeLength += BerLength.skip(is);
						processingStarted = new DataProcessingStartTime();
						codeLength += processingStarted.decode(is, null);
						return codeLength;
					}

					if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
						dataProcessingStatusExtension = new Embedded();
						codeLength += dataProcessingStatusExtension.decode(is, false);
						return codeLength;
					}

					if (passedTag != null) {
						return 0;
					}

					throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
				}

				public void encodeAndSave(int encodingSizeGuess) throws IOException {
					ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
					encode(reverseOS);
					code = reverseOS.getArray();
				}

				public String toString() {
					StringBuilder sb = new StringBuilder();
					appendAsString(sb, 0);
					return sb.toString();
				}

				public void appendAsString(StringBuilder sb, int indentLevel) {

					if (successfullyProcessed != null) {
						sb.append("successfullyProcessed: ");
						successfullyProcessed.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (processingInterrupted != null) {
						sb.append("processingInterrupted: ");
						processingInterrupted.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (processingStarted != null) {
						sb.append("processingStarted: ");
						processingStarted.appendAsString(sb, indentLevel + 1);
						return;
					}

					if (dataProcessingStatusExtension != null) {
						sb.append("dataProcessingStatusExtension: ");
						dataProcessingStatusExtension.appendAsString(sb, indentLevel + 1);
						return;
					}

					sb.append("<none>");
				}

			}

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private DataUnitId lastProcessedDataUnitId = null;
			private DataProcessingStatus dataProcessingStatus = null;
			
			public DataUnitLastProcessed() {
			}

			public DataUnitLastProcessed(byte[] code) {
				this.code = code;
			}

			public void setLastProcessedDataUnitId(DataUnitId lastProcessedDataUnitId) {
				this.lastProcessedDataUnitId = lastProcessedDataUnitId;
			}

			public DataUnitId getLastProcessedDataUnitId() {
				return lastProcessedDataUnitId;
			}

			public void setDataProcessingStatus(DataProcessingStatus dataProcessingStatus) {
				this.dataProcessingStatus = dataProcessingStatus;
			}

			public DataProcessingStatus getDataProcessingStatus() {
				return dataProcessingStatus;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += dataProcessingStatus.encode(reverseOS);
				
				codeLength += lastProcessedDataUnitId.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(DataUnitId.tag)) {
					lastProcessedDataUnitId = new DataUnitId();
					subCodeLength += lastProcessedDataUnitId.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				dataProcessingStatus = new DataProcessingStatus();
				subCodeLength += dataProcessingStatus.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (lastProcessedDataUnitId != null) {
					sb.append("lastProcessedDataUnitId: ").append(lastProcessedDataUnitId);
				}
				else {
					sb.append("lastProcessedDataUnitId: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (dataProcessingStatus != null) {
					sb.append("dataProcessingStatus: ");
					dataProcessingStatus.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("dataProcessingStatus: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private BerNull noDataProcessed = null;
		private DataUnitLastProcessed dataUnitLastProcessed = null;
		
		public DataUnitIdLastProcessed() {
		}

		public DataUnitIdLastProcessed(byte[] code) {
			this.code = code;
		}

		public void setNoDataProcessed(BerNull noDataProcessed) {
			this.noDataProcessed = noDataProcessed;
		}

		public BerNull getNoDataProcessed() {
			return noDataProcessed;
		}

		public void setDataUnitLastProcessed(DataUnitLastProcessed dataUnitLastProcessed) {
			this.dataUnitLastProcessed = dataUnitLastProcessed;
		}

		public DataUnitLastProcessed getDataUnitLastProcessed() {
			return dataUnitLastProcessed;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (dataUnitLastProcessed != null) {
				codeLength += dataUnitLastProcessed.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (noDataProcessed != null) {
				codeLength += noDataProcessed.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				noDataProcessed = new BerNull();
				codeLength += noDataProcessed.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				dataUnitLastProcessed = new DataUnitLastProcessed();
				codeLength += dataUnitLastProcessed.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noDataProcessed != null) {
				sb.append("noDataProcessed: ").append(noDataProcessed);
				return;
			}

			if (dataUnitLastProcessed != null) {
				sb.append("dataUnitLastProcessed: ");
				dataUnitLastProcessed.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class DataUnitIdLastOk implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		public static class DataUnitLastOk implements BerType, Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

			public byte[] code = null;
			private DataUnitId lastOkdataUnitId = null;
			private Time dataProcessingStopTime = null;
			
			public DataUnitLastOk() {
			}

			public DataUnitLastOk(byte[] code) {
				this.code = code;
			}

			public void setLastOkdataUnitId(DataUnitId lastOkdataUnitId) {
				this.lastOkdataUnitId = lastOkdataUnitId;
			}

			public DataUnitId getLastOkdataUnitId() {
				return lastOkdataUnitId;
			}

			public void setDataProcessingStopTime(Time dataProcessingStopTime) {
				this.dataProcessingStopTime = dataProcessingStopTime;
			}

			public Time getDataProcessingStopTime() {
				return dataProcessingStopTime;
			}

			public int encode(OutputStream reverseOS) throws IOException {
				return encode(reverseOS, true);
			}

			public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						reverseOS.write(code[i]);
					}
					if (withTag) {
						return tag.encode(reverseOS) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				codeLength += dataProcessingStopTime.encode(reverseOS);
				
				codeLength += lastOkdataUnitId.encode(reverseOS, true);
				
				codeLength += BerLength.encodeLength(reverseOS, codeLength);

				if (withTag) {
					codeLength += tag.encode(reverseOS);
				}

				return codeLength;

			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				BerTag berTag = new BerTag();

				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);

				int totalLength = length.val;
				codeLength += totalLength;

				subCodeLength += berTag.decode(is);
				if (berTag.equals(DataUnitId.tag)) {
					lastOkdataUnitId = new DataUnitId();
					subCodeLength += lastOkdataUnitId.decode(is, false);
					subCodeLength += berTag.decode(is);
				}
				else {
					throw new IOException("Tag does not match the mandatory sequence element tag.");
				}
				
				dataProcessingStopTime = new Time();
				subCodeLength += dataProcessingStopTime.decode(is, berTag);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
				throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

				
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
				encode(reverseOS, false);
				code = reverseOS.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{");
				sb.append("\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (lastOkdataUnitId != null) {
					sb.append("lastOkdataUnitId: ").append(lastOkdataUnitId);
				}
				else {
					sb.append("lastOkdataUnitId: <empty-required-field>");
				}
				
				sb.append(",\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (dataProcessingStopTime != null) {
					sb.append("dataProcessingStopTime: ");
					dataProcessingStopTime.appendAsString(sb, indentLevel + 1);
				}
				else {
					sb.append("dataProcessingStopTime: <empty-required-field>");
				}
				
				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		private BerNull noSuccessfulProcessing = null;
		private DataUnitLastOk dataUnitLastOk = null;
		
		public DataUnitIdLastOk() {
		}

		public DataUnitIdLastOk(byte[] code) {
			this.code = code;
		}

		public void setNoSuccessfulProcessing(BerNull noSuccessfulProcessing) {
			this.noSuccessfulProcessing = noSuccessfulProcessing;
		}

		public BerNull getNoSuccessfulProcessing() {
			return noSuccessfulProcessing;
		}

		public void setDataUnitLastOk(DataUnitLastOk dataUnitLastOk) {
			this.dataUnitLastOk = dataUnitLastOk;
		}

		public DataUnitLastOk getDataUnitLastOk() {
			return dataUnitLastOk;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (dataUnitLastOk != null) {
				codeLength += dataUnitLastOk.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
				reverseOS.write(0xA1);
				codeLength += 1;
				return codeLength;
			}
			
			if (noSuccessfulProcessing != null) {
				codeLength += noSuccessfulProcessing.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				noSuccessfulProcessing = new BerNull();
				codeLength += noSuccessfulProcessing.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
				dataUnitLastOk = new DataUnitLastOk();
				codeLength += dataUnitLastOk.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (noSuccessfulProcessing != null) {
				sb.append("noSuccessfulProcessing: ").append(noSuccessfulProcessing);
				return;
			}

			if (dataUnitLastOk != null) {
				sb.append("dataUnitLastOk: ");
				dataUnitLastOk.appendAsString(sb, indentLevel + 1);
				return;
			}

			sb.append("<none>");
		}

	}

	public static class ProductionStatus implements BerType, Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerNull productionStatusChange = null;
		private b2.ccsds.csts.common.types.ProductionStatus anyOtherEvent = null;
		
		public ProductionStatus() {
		}

		public ProductionStatus(byte[] code) {
			this.code = code;
		}

		public void setProductionStatusChange(BerNull productionStatusChange) {
			this.productionStatusChange = productionStatusChange;
		}

		public BerNull getProductionStatusChange() {
			return productionStatusChange;
		}

		public void setAnyOtherEvent(b2.ccsds.csts.common.types.ProductionStatus anyOtherEvent) {
			this.anyOtherEvent = anyOtherEvent;
		}

		public b2.ccsds.csts.common.types.ProductionStatus getAnyOtherEvent() {
			return anyOtherEvent;
		}

		public int encode(OutputStream reverseOS) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					reverseOS.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (anyOtherEvent != null) {
				codeLength += anyOtherEvent.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				reverseOS.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (productionStatusChange != null) {
				codeLength += productionStatusChange.encode(reverseOS, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				reverseOS.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				productionStatusChange = new BerNull();
				codeLength += productionStatusChange.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				anyOtherEvent = new b2.ccsds.csts.common.types.ProductionStatus();
				codeLength += anyOtherEvent.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(reverseOS);
			code = reverseOS.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (productionStatusChange != null) {
				sb.append("productionStatusChange: ").append(productionStatusChange);
				return;
			}

			if (anyOtherEvent != null) {
				sb.append("anyOtherEvent: ").append(anyOtherEvent);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private DataUnitIdLastProcessed dataUnitIdLastProcessed = null;
	private DataUnitIdLastOk dataUnitIdLastOk = null;
	private ProductionStatus productionStatus = null;
	private Extended dataProcNotifyInvocExtExtension = null;
	
	public DataProcNotifyInvocExt() {
	}

	public DataProcNotifyInvocExt(byte[] code) {
		this.code = code;
	}

	public void setDataUnitIdLastProcessed(DataUnitIdLastProcessed dataUnitIdLastProcessed) {
		this.dataUnitIdLastProcessed = dataUnitIdLastProcessed;
	}

	public DataUnitIdLastProcessed getDataUnitIdLastProcessed() {
		return dataUnitIdLastProcessed;
	}

	public void setDataUnitIdLastOk(DataUnitIdLastOk dataUnitIdLastOk) {
		this.dataUnitIdLastOk = dataUnitIdLastOk;
	}

	public DataUnitIdLastOk getDataUnitIdLastOk() {
		return dataUnitIdLastOk;
	}

	public void setProductionStatus(ProductionStatus productionStatus) {
		this.productionStatus = productionStatus;
	}

	public ProductionStatus getProductionStatus() {
		return productionStatus;
	}

	public void setDataProcNotifyInvocExtExtension(Extended dataProcNotifyInvocExtExtension) {
		this.dataProcNotifyInvocExtExtension = dataProcNotifyInvocExtExtension;
	}

	public Extended getDataProcNotifyInvocExtExtension() {
		return dataProcNotifyInvocExtExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {
		return encode(reverseOS, true);
	}

	public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			if (withTag) {
				return tag.encode(reverseOS) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += dataProcNotifyInvocExtExtension.encode(reverseOS);
		
		codeLength += productionStatus.encode(reverseOS);
		
		codeLength += dataUnitIdLastOk.encode(reverseOS);
		
		codeLength += dataUnitIdLastProcessed.encode(reverseOS);
		
		codeLength += BerLength.encodeLength(reverseOS, codeLength);

		if (withTag) {
			codeLength += tag.encode(reverseOS);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		dataUnitIdLastProcessed = new DataUnitIdLastProcessed();
		subCodeLength += dataUnitIdLastProcessed.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		dataUnitIdLastOk = new DataUnitIdLastOk();
		subCodeLength += dataUnitIdLastOk.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		productionStatus = new ProductionStatus();
		subCodeLength += productionStatus.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		dataProcNotifyInvocExtExtension = new Extended();
		subCodeLength += dataProcNotifyInvocExtExtension.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS, false);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dataUnitIdLastProcessed != null) {
			sb.append("dataUnitIdLastProcessed: ");
			dataUnitIdLastProcessed.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("dataUnitIdLastProcessed: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dataUnitIdLastOk != null) {
			sb.append("dataUnitIdLastOk: ");
			dataUnitIdLastOk.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("dataUnitIdLastOk: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (productionStatus != null) {
			sb.append("productionStatus: ");
			productionStatus.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("productionStatus: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dataProcNotifyInvocExtExtension != null) {
			sb.append("dataProcNotifyInvocExtExtension: ");
			dataProcNotifyInvocExtExtension.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("dataProcNotifyInvocExtExtension: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

