/**
 * This class file was automatically generated by jASN1 v1.11.3-SNAPSHOT (http://www.beanit.com)
 */

package b2.ccsds.csts.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import b2.ccsds.csts.association.control.types.BindInvocation;
import b2.ccsds.csts.association.control.types.BindReturn;
import b2.ccsds.csts.association.control.types.PeerAbortInvocation;
import b2.ccsds.csts.association.control.types.UnbindInvocation;
import b2.ccsds.csts.association.control.types.UnbindReturn;
import b2.ccsds.csts.buffered.data.delivery.pdus.ReturnBuffer;
import b2.ccsds.csts.buffered.data.processing.pdus.ForwardBuffer;
import b2.ccsds.csts.common.operations.pdus.ExecuteDirectiveAcknowledge;
import b2.ccsds.csts.common.operations.pdus.ExecuteDirectiveInvocation;
import b2.ccsds.csts.common.operations.pdus.ExecuteDirectiveReturn;
import b2.ccsds.csts.common.operations.pdus.GetInvocation;
import b2.ccsds.csts.common.operations.pdus.GetReturn;
import b2.ccsds.csts.common.operations.pdus.NotifyInvocation;
import b2.ccsds.csts.common.operations.pdus.ProcessDataInvocation;
import b2.ccsds.csts.common.operations.pdus.ProcessDataReturn;
import b2.ccsds.csts.common.operations.pdus.StartInvocation;
import b2.ccsds.csts.common.operations.pdus.StartReturn;
import b2.ccsds.csts.common.operations.pdus.StopInvocation;
import b2.ccsds.csts.common.operations.pdus.StopReturn;
import b2.ccsds.csts.common.operations.pdus.TransferDataInvocation;

public class CstsFrameworkPdu implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private BindInvocation bindInvocation = null;
	private BindReturn bindReturn = null;
	private UnbindInvocation unbindInvocation = null;
	private UnbindReturn unbindReturn = null;
	private PeerAbortInvocation peerAbortInvocation = null;
	private StartInvocation startInvocation = null;
	private StartReturn startReturn = null;
	private StopInvocation stopInvocation = null;
	private StopReturn stopReturn = null;
	private ExecuteDirectiveInvocation executeDirectiveInvocation = null;
	private ExecuteDirectiveAcknowledge executeDirectiveAcknowledge = null;
	private ExecuteDirectiveReturn executeDirectiveReturn = null;
	private GetInvocation getInvocation = null;
	private GetReturn getReturn = null;
	private NotifyInvocation notifyInvocation = null;
	private ProcessDataInvocation processDataInvocation = null;
	private ProcessDataReturn processDataReturn = null;
	private ForwardBuffer forwardBuffer = null;
	private TransferDataInvocation transferDataInvocation = null;
	private ReturnBuffer returnBuffer = null;
	
	public CstsFrameworkPdu() {
	}

	public CstsFrameworkPdu(byte[] code) {
		this.code = code;
	}

	public void setBindInvocation(BindInvocation bindInvocation) {
		this.bindInvocation = bindInvocation;
	}

	public BindInvocation getBindInvocation() {
		return bindInvocation;
	}

	public void setBindReturn(BindReturn bindReturn) {
		this.bindReturn = bindReturn;
	}

	public BindReturn getBindReturn() {
		return bindReturn;
	}

	public void setUnbindInvocation(UnbindInvocation unbindInvocation) {
		this.unbindInvocation = unbindInvocation;
	}

	public UnbindInvocation getUnbindInvocation() {
		return unbindInvocation;
	}

	public void setUnbindReturn(UnbindReturn unbindReturn) {
		this.unbindReturn = unbindReturn;
	}

	public UnbindReturn getUnbindReturn() {
		return unbindReturn;
	}

	public void setPeerAbortInvocation(PeerAbortInvocation peerAbortInvocation) {
		this.peerAbortInvocation = peerAbortInvocation;
	}

	public PeerAbortInvocation getPeerAbortInvocation() {
		return peerAbortInvocation;
	}

	public void setStartInvocation(StartInvocation startInvocation) {
		this.startInvocation = startInvocation;
	}

	public StartInvocation getStartInvocation() {
		return startInvocation;
	}

	public void setStartReturn(StartReturn startReturn) {
		this.startReturn = startReturn;
	}

	public StartReturn getStartReturn() {
		return startReturn;
	}

	public void setStopInvocation(StopInvocation stopInvocation) {
		this.stopInvocation = stopInvocation;
	}

	public StopInvocation getStopInvocation() {
		return stopInvocation;
	}

	public void setStopReturn(StopReturn stopReturn) {
		this.stopReturn = stopReturn;
	}

	public StopReturn getStopReturn() {
		return stopReturn;
	}

	public void setExecuteDirectiveInvocation(ExecuteDirectiveInvocation executeDirectiveInvocation) {
		this.executeDirectiveInvocation = executeDirectiveInvocation;
	}

	public ExecuteDirectiveInvocation getExecuteDirectiveInvocation() {
		return executeDirectiveInvocation;
	}

	public void setExecuteDirectiveAcknowledge(ExecuteDirectiveAcknowledge executeDirectiveAcknowledge) {
		this.executeDirectiveAcknowledge = executeDirectiveAcknowledge;
	}

	public ExecuteDirectiveAcknowledge getExecuteDirectiveAcknowledge() {
		return executeDirectiveAcknowledge;
	}

	public void setExecuteDirectiveReturn(ExecuteDirectiveReturn executeDirectiveReturn) {
		this.executeDirectiveReturn = executeDirectiveReturn;
	}

	public ExecuteDirectiveReturn getExecuteDirectiveReturn() {
		return executeDirectiveReturn;
	}

	public void setGetInvocation(GetInvocation getInvocation) {
		this.getInvocation = getInvocation;
	}

	public GetInvocation getGetInvocation() {
		return getInvocation;
	}

	public void setGetReturn(GetReturn getReturn) {
		this.getReturn = getReturn;
	}

	public GetReturn getGetReturn() {
		return getReturn;
	}

	public void setNotifyInvocation(NotifyInvocation notifyInvocation) {
		this.notifyInvocation = notifyInvocation;
	}

	public NotifyInvocation getNotifyInvocation() {
		return notifyInvocation;
	}

	public void setProcessDataInvocation(ProcessDataInvocation processDataInvocation) {
		this.processDataInvocation = processDataInvocation;
	}

	public ProcessDataInvocation getProcessDataInvocation() {
		return processDataInvocation;
	}

	public void setProcessDataReturn(ProcessDataReturn processDataReturn) {
		this.processDataReturn = processDataReturn;
	}

	public ProcessDataReturn getProcessDataReturn() {
		return processDataReturn;
	}

	public void setForwardBuffer(ForwardBuffer forwardBuffer) {
		this.forwardBuffer = forwardBuffer;
	}

	public ForwardBuffer getForwardBuffer() {
		return forwardBuffer;
	}

	public void setTransferDataInvocation(TransferDataInvocation transferDataInvocation) {
		this.transferDataInvocation = transferDataInvocation;
	}

	public TransferDataInvocation getTransferDataInvocation() {
		return transferDataInvocation;
	}

	public void setReturnBuffer(ReturnBuffer returnBuffer) {
		this.returnBuffer = returnBuffer;
	}

	public ReturnBuffer getReturnBuffer() {
		return returnBuffer;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (returnBuffer != null) {
			codeLength += returnBuffer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 71
			reverseOS.write(0x47);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (transferDataInvocation != null) {
			codeLength += transferDataInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 70
			reverseOS.write(0x46);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (forwardBuffer != null) {
			codeLength += forwardBuffer.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 62
			reverseOS.write(0x3E);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (processDataReturn != null) {
			codeLength += processDataReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 61
			reverseOS.write(0x3D);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (processDataInvocation != null) {
			codeLength += processDataInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 60
			reverseOS.write(0x3C);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (notifyInvocation != null) {
			codeLength += notifyInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 50
			reverseOS.write(0x32);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (getReturn != null) {
			codeLength += getReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 41
			reverseOS.write(0x29);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (getInvocation != null) {
			codeLength += getInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 40
			reverseOS.write(0x28);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (executeDirectiveReturn != null) {
			codeLength += executeDirectiveReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 32
			reverseOS.write(0x20);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (executeDirectiveAcknowledge != null) {
			codeLength += executeDirectiveAcknowledge.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 31
			reverseOS.write(0x1F);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (executeDirectiveInvocation != null) {
			codeLength += executeDirectiveInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			reverseOS.write(0xBE);
			codeLength += 1;
			return codeLength;
		}
		
		if (stopReturn != null) {
			codeLength += stopReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			reverseOS.write(0xB5);
			codeLength += 1;
			return codeLength;
		}
		
		if (stopInvocation != null) {
			codeLength += stopInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			reverseOS.write(0xB4);
			codeLength += 1;
			return codeLength;
		}
		
		if (startReturn != null) {
			codeLength += startReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			reverseOS.write(0xAB);
			codeLength += 1;
			return codeLength;
		}
		
		if (startInvocation != null) {
			codeLength += startInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			reverseOS.write(0xAA);
			codeLength += 1;
			return codeLength;
		}
		
		if (peerAbortInvocation != null) {
			codeLength += peerAbortInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			reverseOS.write(0xA4);
			codeLength += 1;
			return codeLength;
		}
		
		if (unbindReturn != null) {
			codeLength += unbindReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			reverseOS.write(0xA3);
			codeLength += 1;
			return codeLength;
		}
		
		if (unbindInvocation != null) {
			codeLength += unbindInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			reverseOS.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (bindReturn != null) {
			codeLength += bindReturn.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			reverseOS.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (bindInvocation != null) {
			codeLength += bindInvocation.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			bindInvocation = new BindInvocation();
			codeLength += bindInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			bindReturn = new BindReturn();
			codeLength += bindReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			unbindInvocation = new UnbindInvocation();
			codeLength += unbindInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			unbindReturn = new UnbindReturn();
			codeLength += unbindReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			peerAbortInvocation = new PeerAbortInvocation();
			codeLength += peerAbortInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			startInvocation = new StartInvocation();
			codeLength += startInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			startReturn = new StartReturn();
			codeLength += startReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			stopInvocation = new StopInvocation();
			codeLength += stopInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			stopReturn = new StopReturn();
			codeLength += stopReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			executeDirectiveInvocation = new ExecuteDirectiveInvocation();
			codeLength += executeDirectiveInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 31)) {
			executeDirectiveAcknowledge = new ExecuteDirectiveAcknowledge();
			codeLength += executeDirectiveAcknowledge.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 32)) {
			executeDirectiveReturn = new ExecuteDirectiveReturn();
			codeLength += executeDirectiveReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 40)) {
			getInvocation = new GetInvocation();
			codeLength += getInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 41)) {
			getReturn = new GetReturn();
			codeLength += getReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 50)) {
			notifyInvocation = new NotifyInvocation();
			codeLength += notifyInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 60)) {
			processDataInvocation = new ProcessDataInvocation();
			codeLength += processDataInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 61)) {
			processDataReturn = new ProcessDataReturn();
			codeLength += processDataReturn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 62)) {
			forwardBuffer = new ForwardBuffer();
			codeLength += forwardBuffer.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 70)) {
			transferDataInvocation = new TransferDataInvocation();
			codeLength += transferDataInvocation.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 71)) {
			returnBuffer = new ReturnBuffer();
			codeLength += returnBuffer.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (bindInvocation != null) {
			sb.append("bindInvocation: ");
			bindInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (bindReturn != null) {
			sb.append("bindReturn: ");
			bindReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (unbindInvocation != null) {
			sb.append("unbindInvocation: ");
			unbindInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (unbindReturn != null) {
			sb.append("unbindReturn: ");
			unbindReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (peerAbortInvocation != null) {
			sb.append("peerAbortInvocation: ");
			peerAbortInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (startInvocation != null) {
			sb.append("startInvocation: ");
			startInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (startReturn != null) {
			sb.append("startReturn: ");
			startReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (stopInvocation != null) {
			sb.append("stopInvocation: ");
			stopInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (stopReturn != null) {
			sb.append("stopReturn: ");
			stopReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (executeDirectiveInvocation != null) {
			sb.append("executeDirectiveInvocation: ");
			executeDirectiveInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (executeDirectiveAcknowledge != null) {
			sb.append("executeDirectiveAcknowledge: ");
			executeDirectiveAcknowledge.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (executeDirectiveReturn != null) {
			sb.append("executeDirectiveReturn: ");
			executeDirectiveReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (getInvocation != null) {
			sb.append("getInvocation: ");
			getInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (getReturn != null) {
			sb.append("getReturn: ");
			getReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (notifyInvocation != null) {
			sb.append("notifyInvocation: ");
			notifyInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (processDataInvocation != null) {
			sb.append("processDataInvocation: ");
			processDataInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (processDataReturn != null) {
			sb.append("processDataReturn: ");
			processDataReturn.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (forwardBuffer != null) {
			sb.append("forwardBuffer: ");
			forwardBuffer.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (transferDataInvocation != null) {
			sb.append("transferDataInvocation: ");
			transferDataInvocation.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (returnBuffer != null) {
			sb.append("returnBuffer: ");
			returnBuffer.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

