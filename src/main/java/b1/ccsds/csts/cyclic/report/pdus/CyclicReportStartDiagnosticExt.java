/**
 * This class file was automatically generated by jASN1 v1.11.2 (http://www.beanit.com)
 */

package b1.ccsds.csts.cyclic.report.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import com.beanit.jasn1.ber.*;
import com.beanit.jasn1.ber.types.*;
import com.beanit.jasn1.ber.types.string.*;

import b1.ccsds.csts.common.types.AdditionalText;
import b1.ccsds.csts.common.types.Embedded;
import b1.ccsds.csts.common.types.Extended;
import b1.ccsds.csts.common.types.IntPos;
import b1.ccsds.csts.common.types.ListOfParamEventsDiagnostics;
import b1.ccsds.csts.common.types.ListOfParametersEvents;
import b1.ccsds.csts.common.types.QualifiedParameter;

public class CyclicReportStartDiagnosticExt implements BerType, Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private ListOfParamEventsDiagnostics common = null;
	private AdditionalText outOfRange = null;
	private Embedded cyclicReportStartDiagnosticExtExtension = null;
	
	public CyclicReportStartDiagnosticExt() {
	}

	public CyclicReportStartDiagnosticExt(byte[] code) {
		this.code = code;
	}

	public void setCommon(ListOfParamEventsDiagnostics common) {
		this.common = common;
	}

	public ListOfParamEventsDiagnostics getCommon() {
		return common;
	}

	public void setOutOfRange(AdditionalText outOfRange) {
		this.outOfRange = outOfRange;
	}

	public AdditionalText getOutOfRange() {
		return outOfRange;
	}

	public void setCyclicReportStartDiagnosticExtExtension(Embedded cyclicReportStartDiagnosticExtExtension) {
		this.cyclicReportStartDiagnosticExtExtension = cyclicReportStartDiagnosticExtExtension;
	}

	public Embedded getCyclicReportStartDiagnosticExtExtension() {
		return cyclicReportStartDiagnosticExtExtension;
	}

	public int encode(OutputStream reverseOS) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				reverseOS.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (cyclicReportStartDiagnosticExtExtension != null) {
			codeLength += cyclicReportStartDiagnosticExtExtension.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
			reverseOS.write(0x64);
			reverseOS.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (outOfRange != null) {
			codeLength += outOfRange.encode(reverseOS, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			reverseOS.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (common != null) {
			sublength = common.encode(reverseOS);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(reverseOS, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			reverseOS.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			codeLength += BerLength.skip(is);
			common = new ListOfParamEventsDiagnostics();
			codeLength += common.decode(is, null);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			outOfRange = new AdditionalText();
			codeLength += outOfRange.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
			cyclicReportStartDiagnosticExtExtension = new Embedded();
			codeLength += cyclicReportStartDiagnosticExtExtension.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(reverseOS);
		code = reverseOS.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (common != null) {
			sb.append("common: ");
			common.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (outOfRange != null) {
			sb.append("outOfRange: ").append(outOfRange);
			return;
		}

		if (cyclicReportStartDiagnosticExtExtension != null) {
			sb.append("cyclicReportStartDiagnosticExtExtension: ");
			cyclicReportStartDiagnosticExtExtension.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

