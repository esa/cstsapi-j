/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package ccsds.csts.sequence.controlled.data.processing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import ccsds.csts.common.types.ConditionalTime;
import ccsds.csts.common.types.DataUnitId;
import ccsds.csts.common.types.Embedded;
import ccsds.csts.common.types.Extended;
import ccsds.csts.pdus.CstsFrameworkPdu;

public class SequContrDataProcStatus implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private BerNull expired = null;
	private BerNull processingNotStarted = null;
	private Embedded sequContrDataProcStatusExtension = null;
	
	public SequContrDataProcStatus() {
	}

	public SequContrDataProcStatus(byte[] code) {
		this.code = code;
	}

	public void setExpired(BerNull expired) {
		this.expired = expired;
	}

	public BerNull getExpired() {
		return expired;
	}

	public void setProcessingNotStarted(BerNull processingNotStarted) {
		this.processingNotStarted = processingNotStarted;
	}

	public BerNull getProcessingNotStarted() {
		return processingNotStarted;
	}

	public void setSequContrDataProcStatusExtension(Embedded sequContrDataProcStatusExtension) {
		this.sequContrDataProcStatusExtension = sequContrDataProcStatusExtension;
	}

	public Embedded getSequContrDataProcStatusExtension() {
		return sequContrDataProcStatusExtension;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (sequContrDataProcStatusExtension != null) {
			codeLength += sequContrDataProcStatusExtension.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
			os.write(0x64);
			os.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (processingNotStarted != null) {
			codeLength += processingNotStarted.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (expired != null) {
			codeLength += expired.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			expired = new BerNull();
			codeLength += expired.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			processingNotStarted = new BerNull();
			codeLength += processingNotStarted.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
			sequContrDataProcStatusExtension = new Embedded();
			codeLength += sequContrDataProcStatusExtension.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (expired != null) {
			sb.append("expired: ").append(expired);
			return;
		}

		if (processingNotStarted != null) {
			sb.append("processingNotStarted: ").append(processingNotStarted);
			return;
		}

		if (sequContrDataProcStatusExtension != null) {
			sb.append("sequContrDataProcStatusExtension: ");
			sequContrDataProcStatusExtension.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

