/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package ccsds.csts.data.processing.pdus;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;

import ccsds.csts.common.types.DataUnitId;
import ccsds.csts.common.types.Embedded;
import ccsds.csts.common.types.Extended;
import ccsds.csts.common.types.ProductionStatus;
import ccsds.csts.common.types.Time;
import ccsds.csts.pdus.CstsFrameworkPdu;

public class DataProcProcDataInvocExt implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class ProcessCompletionReport implements Serializable {

		private static final long serialVersionUID = 1L;

		public byte[] code = null;
		private BerNull doNotProduceReport = null;
		private BerNull produceReport = null;
		
		public ProcessCompletionReport() {
		}

		public ProcessCompletionReport(byte[] code) {
			this.code = code;
		}

		public void setDoNotProduceReport(BerNull doNotProduceReport) {
			this.doNotProduceReport = doNotProduceReport;
		}

		public BerNull getDoNotProduceReport() {
			return doNotProduceReport;
		}

		public void setProduceReport(BerNull produceReport) {
			this.produceReport = produceReport;
		}

		public BerNull getProduceReport() {
			return produceReport;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				return code.length;
			}

			int codeLength = 0;
			if (produceReport != null) {
				codeLength += produceReport.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 1
				os.write(0x81);
				codeLength += 1;
				return codeLength;
			}
			
			if (doNotProduceReport != null) {
				codeLength += doNotProduceReport.encode(os, false);
				// write tag: CONTEXT_CLASS, PRIMITIVE, 0
				os.write(0x80);
				codeLength += 1;
				return codeLength;
			}
			
			throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, null);
		}

		public int decode(InputStream is, BerTag berTag) throws IOException {

			int codeLength = 0;
			BerTag passedTag = berTag;

			if (berTag == null) {
				berTag = new BerTag();
				codeLength += berTag.decode(is);
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
				doNotProduceReport = new BerNull();
				codeLength += doNotProduceReport.decode(is, false);
				return codeLength;
			}

			if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
				produceReport = new BerNull();
				codeLength += produceReport.decode(is, false);
				return codeLength;
			}

			if (passedTag != null) {
				return 0;
			}

			throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			if (doNotProduceReport != null) {
				sb.append("doNotProduceReport: ").append(doNotProduceReport);
				return;
			}

			if (produceReport != null) {
				sb.append("produceReport: ").append(produceReport);
				return;
			}

			sb.append("<none>");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private ProcessCompletionReport processCompletionReport = null;
	private Extended dataProcProcDataInvocExtExtension = null;
	
	public DataProcProcDataInvocExt() {
	}

	public DataProcProcDataInvocExt(byte[] code) {
		this.code = code;
	}

	public void setProcessCompletionReport(ProcessCompletionReport processCompletionReport) {
		this.processCompletionReport = processCompletionReport;
	}

	public ProcessCompletionReport getProcessCompletionReport() {
		return processCompletionReport;
	}

	public void setDataProcProcDataInvocExtExtension(Extended dataProcProcDataInvocExtExtension) {
		this.dataProcProcDataInvocExtExtension = dataProcProcDataInvocExtExtension;
	}

	public Extended getDataProcProcDataInvocExtExtension() {
		return dataProcProcDataInvocExtExtension;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += dataProcProcDataInvocExtExtension.encode(os);
		
		codeLength += processCompletionReport.encode(os);
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		processCompletionReport = new ProcessCompletionReport();
		subCodeLength += processCompletionReport.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		dataProcProcDataInvocExtExtension = new Extended();
		subCodeLength += dataProcProcDataInvocExtExtension.decode(is, berTag);
		if (subCodeLength == totalLength) {
			return codeLength;
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (processCompletionReport != null) {
			sb.append("processCompletionReport: ");
			processCompletionReport.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("processCompletionReport: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dataProcProcDataInvocExtExtension != null) {
			sb.append("dataProcProcDataInvocExtExtension: ");
			dataProcProcDataInvocExtExtension.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("dataProcProcDataInvocExtExtension: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

