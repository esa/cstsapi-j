/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package ccsds.csts.common.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class Name implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private FRorProcedureName fRorProcedureName = null;
	private PublishedIdentifier paramOrEventOrDirectiveId = null;
	
	public Name() {
	}

	public Name(byte[] code) {
		this.code = code;
	}

	public void setFRorProcedureName(FRorProcedureName fRorProcedureName) {
		this.fRorProcedureName = fRorProcedureName;
	}

	public FRorProcedureName getFRorProcedureName() {
		return fRorProcedureName;
	}

	public void setParamOrEventOrDirectiveId(PublishedIdentifier paramOrEventOrDirectiveId) {
		this.paramOrEventOrDirectiveId = paramOrEventOrDirectiveId;
	}

	public PublishedIdentifier getParamOrEventOrDirectiveId() {
		return paramOrEventOrDirectiveId;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		codeLength += paramOrEventOrDirectiveId.encode(os, true);
		
		codeLength += fRorProcedureName.encode(os);
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		fRorProcedureName = new FRorProcedureName();
		subCodeLength += fRorProcedureName.decode(is, berTag);
		subCodeLength += berTag.decode(is);
		
		if (berTag.equals(PublishedIdentifier.tag)) {
			paramOrEventOrDirectiveId = new PublishedIdentifier();
			subCodeLength += paramOrEventOrDirectiveId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (fRorProcedureName != null) {
			sb.append("fRorProcedureName: ");
			fRorProcedureName.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("fRorProcedureName: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (paramOrEventOrDirectiveId != null) {
			sb.append("paramOrEventOrDirectiveId: ").append(paramOrEventOrDirectiveId);
		}
		else {
			sb.append("paramOrEventOrDirectiveId: <empty-required-field>");
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

