/**
 * This class file was automatically generated by jASN1 v1.8.1 (http://www.openmuc.org)
 */

package ccsds.csts.common.types;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class Diagnostic implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	public static class InvalidParameterValue implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private AdditionalText text = null;
		private Appellation appellation = null;
		
		public InvalidParameterValue() {
		}

		public InvalidParameterValue(byte[] code) {
			this.code = code;
		}

		public void setText(AdditionalText text) {
			this.text = text;
		}

		public AdditionalText getText() {
			return text;
		}

		public void setAppellation(Appellation appellation) {
			this.appellation = appellation;
		}

		public Appellation getAppellation() {
			return appellation;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += appellation.encode(os, true);
			
			codeLength += text.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(AdditionalText.tag)) {
				text = new AdditionalText();
				subCodeLength += text.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(Appellation.tag)) {
				appellation = new Appellation();
				subCodeLength += appellation.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (text != null) {
				sb.append("text: ").append(text);
			}
			else {
				sb.append("text: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (appellation != null) {
				sb.append("appellation: ").append(appellation);
			}
			else {
				sb.append("appellation: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ConflictingValues implements Serializable {

		private static final long serialVersionUID = 1L;

		public static class Appellations implements Serializable {

			private static final long serialVersionUID = 1L;

			public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
			public byte[] code = null;
			private List<Appellation> seqOf = null;

			public Appellations() {
				seqOf = new ArrayList<Appellation>();
			}

			public Appellations(byte[] code) {
				this.code = code;
			}

			public List<Appellation> getAppellation() {
				if (seqOf == null) {
					seqOf = new ArrayList<Appellation>();
				}
				return seqOf;
			}

			public int encode(BerByteArrayOutputStream os) throws IOException {
				return encode(os, true);
			}

			public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

				if (code != null) {
					for (int i = code.length - 1; i >= 0; i--) {
						os.write(code[i]);
					}
					if (withTag) {
						return tag.encode(os) + code.length;
					}
					return code.length;
				}

				int codeLength = 0;
				for (int i = (seqOf.size() - 1); i >= 0; i--) {
					codeLength += seqOf.get(i).encode(os, true);
				}

				codeLength += BerLength.encodeLength(os, codeLength);

				if (withTag) {
					codeLength += tag.encode(os);
				}

				return codeLength;
			}

			public int decode(InputStream is) throws IOException {
				return decode(is, true);
			}

			public int decode(InputStream is, boolean withTag) throws IOException {
				int codeLength = 0;
				int subCodeLength = 0;
				if (withTag) {
					codeLength += tag.decodeAndCheck(is);
				}

				BerLength length = new BerLength();
				codeLength += length.decode(is);
				int totalLength = length.val;

				while (subCodeLength < totalLength) {
					Appellation element = new Appellation();
					subCodeLength += element.decode(is, true);
					seqOf.add(element);
				}
				if (subCodeLength != totalLength) {
					throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

				}
				codeLength += subCodeLength;

				return codeLength;
			}

			public void encodeAndSave(int encodingSizeGuess) throws IOException {
				BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
				encode(os, false);
				code = os.getArray();
			}

			public String toString() {
				StringBuilder sb = new StringBuilder();
				appendAsString(sb, 0);
				return sb.toString();
			}

			public void appendAsString(StringBuilder sb, int indentLevel) {

				sb.append("{\n");
				for (int i = 0; i < indentLevel + 1; i++) {
					sb.append("\t");
				}
				if (seqOf == null) {
					sb.append("null");
				}
				else {
					Iterator<Appellation> it = seqOf.iterator();
					if (it.hasNext()) {
						sb.append(it.next());
						while (it.hasNext()) {
							sb.append(",\n");
							for (int i = 0; i < indentLevel + 1; i++) {
								sb.append("\t");
							}
							sb.append(it.next());
						}
					}
				}

				sb.append("\n");
				for (int i = 0; i < indentLevel; i++) {
					sb.append("\t");
				}
				sb.append("}");
			}

		}

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

		public byte[] code = null;
		private AdditionalText text = null;
		private Appellations appellations = null;
		
		public ConflictingValues() {
		}

		public ConflictingValues(byte[] code) {
			this.code = code;
		}

		public void setText(AdditionalText text) {
			this.text = text;
		}

		public AdditionalText getText() {
			return text;
		}

		public void setAppellations(Appellations appellations) {
			this.appellations = appellations;
		}

		public Appellations getAppellations() {
			return appellations;
		}

		public int encode(BerByteArrayOutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(BerByteArrayOutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			codeLength += appellations.encode(os, true);
			
			codeLength += text.encode(os, true);
			
			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;

		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			BerTag berTag = new BerTag();

			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);

			int totalLength = length.val;
			codeLength += totalLength;

			subCodeLength += berTag.decode(is);
			if (berTag.equals(AdditionalText.tag)) {
				text = new AdditionalText();
				subCodeLength += text.decode(is, false);
				subCodeLength += berTag.decode(is);
			}
			else {
				throw new IOException("Tag does not match the mandatory sequence element tag.");
			}
			
			if (berTag.equals(Appellations.tag)) {
				appellations = new Appellations();
				subCodeLength += appellations.decode(is, false);
				if (subCodeLength == totalLength) {
					return codeLength;
				}
			}
			throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

			
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{");
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (text != null) {
				sb.append("text: ").append(text);
			}
			else {
				sb.append("text: <empty-required-field>");
			}
			
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (appellations != null) {
				sb.append("appellations: ");
				appellations.appendAsString(sb, indentLevel + 1);
			}
			else {
				sb.append("appellations: <empty-required-field>");
			}
			
			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	private InvalidParameterValue invalidParameterValue = null;
	private ConflictingValues conflictingValues = null;
	private AdditionalText otherReason = null;
	private AdditionalText unsupportedOption = null;
	private Embedded diagnosticExtension = null;
	
	public Diagnostic() {
	}

	public Diagnostic(byte[] code) {
		this.code = code;
	}

	public void setInvalidParameterValue(InvalidParameterValue invalidParameterValue) {
		this.invalidParameterValue = invalidParameterValue;
	}

	public InvalidParameterValue getInvalidParameterValue() {
		return invalidParameterValue;
	}

	public void setConflictingValues(ConflictingValues conflictingValues) {
		this.conflictingValues = conflictingValues;
	}

	public ConflictingValues getConflictingValues() {
		return conflictingValues;
	}

	public void setOtherReason(AdditionalText otherReason) {
		this.otherReason = otherReason;
	}

	public AdditionalText getOtherReason() {
		return otherReason;
	}

	public void setUnsupportedOption(AdditionalText unsupportedOption) {
		this.unsupportedOption = unsupportedOption;
	}

	public AdditionalText getUnsupportedOption() {
		return unsupportedOption;
	}

	public void setDiagnosticExtension(Embedded diagnosticExtension) {
		this.diagnosticExtension = diagnosticExtension;
	}

	public Embedded getDiagnosticExtension() {
		return diagnosticExtension;
	}

	public int encode(BerByteArrayOutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (diagnosticExtension != null) {
			codeLength += diagnosticExtension.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 100
			os.write(0x64);
			os.write(0xBF);
			codeLength += 2;
			return codeLength;
		}
		
		if (unsupportedOption != null) {
			codeLength += unsupportedOption.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
			return codeLength;
		}
		
		if (otherReason != null) {
			codeLength += otherReason.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (conflictingValues != null) {
			codeLength += conflictingValues.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (invalidParameterValue != null) {
			codeLength += invalidParameterValue.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			invalidParameterValue = new InvalidParameterValue();
			codeLength += invalidParameterValue.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			conflictingValues = new ConflictingValues();
			codeLength += conflictingValues.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			otherReason = new AdditionalText();
			codeLength += otherReason.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			unsupportedOption = new AdditionalText();
			codeLength += unsupportedOption.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 100)) {
			diagnosticExtension = new Embedded();
			codeLength += diagnosticExtension.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		BerByteArrayOutputStream os = new BerByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (invalidParameterValue != null) {
			sb.append("invalidParameterValue: ");
			invalidParameterValue.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (conflictingValues != null) {
			sb.append("conflictingValues: ");
			conflictingValues.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (otherReason != null) {
			sb.append("otherReason: ").append(otherReason);
			return;
		}

		if (unsupportedOption != null) {
			sb.append("unsupportedOption: ").append(unsupportedOption);
			return;
		}

		if (diagnosticExtension != null) {
			sb.append("diagnosticExtension: ");
			diagnosticExtension.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

